/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsCompilation_initialParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Compilation_initial;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Compilation_initial
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Compilation_initial
		public RuleCall getGreetingsCompilation_initialParserRuleCall_0() { return cGreetingsCompilation_initialParserRuleCall_0; }
	}
	public class Compilation_initialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Compilation_initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilation_initialAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackPackageClauseParserRuleCall_1_0 = (RuleCall)cPackAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cImportdeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cImportdeclImportDeclParserRuleCall_3_0_0 = (RuleCall)cImportdeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cToplevelAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cToplevelTopLevelDeclParserRuleCall_4_0_0 = (RuleCall)cToplevelAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//Compilation_initial:
		//	{Compilation_initial} pack=PackageClause ';' (importdecl+=ImportDecl ';')* (toplevel+=TopLevelDecl ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Compilation_initial} pack=PackageClause ';' (importdecl+=ImportDecl ';')* (toplevel+=TopLevelDecl ';')*
		public Group getGroup() { return cGroup; }
		
		//{Compilation_initial}
		public Action getCompilation_initialAction_0() { return cCompilation_initialAction_0; }
		
		//pack=PackageClause
		public Assignment getPackAssignment_1() { return cPackAssignment_1; }
		
		//PackageClause
		public RuleCall getPackPackageClauseParserRuleCall_1_0() { return cPackPackageClauseParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//(importdecl+=ImportDecl ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//importdecl+=ImportDecl
		public Assignment getImportdeclAssignment_3_0() { return cImportdeclAssignment_3_0; }
		
		//ImportDecl
		public RuleCall getImportdeclImportDeclParserRuleCall_3_0_0() { return cImportdeclImportDeclParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//(toplevel+=TopLevelDecl ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//toplevel+=TopLevelDecl
		public Assignment getToplevelAssignment_4_0() { return cToplevelAssignment_4_0; }
		
		//TopLevelDecl
		public RuleCall getToplevelTopLevelDeclParserRuleCall_4_0_0() { return cToplevelTopLevelDeclParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TopLevelDecl:
		//	Declaration | FunctionDecl | MethodDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//Declaration | FunctionDecl | MethodDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Declaration
		public RuleCall getDeclarationParserRuleCall_0() { return cDeclarationParserRuleCall_0; }
		
		//FunctionDecl
		public RuleCall getFunctionDeclParserRuleCall_1() { return cFunctionDeclParserRuleCall_1; }
		
		//MethodDecl
		public RuleCall getMethodDeclParserRuleCall_2() { return cMethodDeclParserRuleCall_2; }
	}
	public class MethodDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MethodDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cReceiverParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyFunctionBodyParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//MethodDecl:
		//	'func' Receiver MethodName signature+=Signature body+=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' Receiver MethodName signature+=Signature body+=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Receiver
		public RuleCall getReceiverParserRuleCall_1() { return cReceiverParserRuleCall_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
		
		//signature+=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//body+=FunctionBody?
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_4_0() { return cBodyFunctionBodyParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FunctionName");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}
	public class FunctionDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FunctionDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFunctionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSignatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignatureSignatureParserRuleCall_2_0 = (RuleCall)cSignatureAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFunctionBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//FunctionDecl:
		//	'func' FunctionName signature+=Signature body+=FunctionBody?;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' FunctionName signature+=Signature body+=FunctionBody?
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//FunctionName
		public RuleCall getFunctionNameParserRuleCall_1() { return cFunctionNameParserRuleCall_1; }
		
		//signature+=Signature
		public Assignment getSignatureAssignment_2() { return cSignatureAssignment_2; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_2_0() { return cSignatureSignatureParserRuleCall_2_0; }
		
		//body+=FunctionBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_3_0() { return cBodyFunctionBodyParserRuleCall_3_0; }
	}
	public class PackageClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PackageClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackPackageNameParserRuleCall_1_0 = (RuleCall)cPackAssignment_1.eContents().get(0);
		
		//PackageClause:
		//	'package' pack=PackageName;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' pack=PackageName
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//pack=PackageName
		public Assignment getPackAssignment_1() { return cPackAssignment_1; }
		
		//PackageName
		public RuleCall getPackPackageNameParserRuleCall_1_0() { return cPackPackageNameParserRuleCall_1_0; }
	}
	public class KEYWORDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.KEYWORDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFuncKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInterfaceKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSelectKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCaseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDeferKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cGoKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMapKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cStructKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cChanKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cElseKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cGotoKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPackageKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSwitchKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cConstKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFallthroughKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cIfKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cRangeKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cTypeKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cContinueKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cForKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cImportKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cReturnKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cVarKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		
		//KEYWORDS:
		//	'break'
		//	| 'default'
		//	| 'func'
		//	| 'interface'
		//	| 'select'
		//	| 'case'
		//	| 'defer'
		//	| 'go'
		//	| 'map'
		//	| 'struct'
		//	| 'chan'
		//	| 'else'
		//	| 'goto'
		//	| 'package'
		//	| 'switch'
		//	| 'const'
		//	| 'fallthrough'
		//	| 'if'
		//	| 'range'
		//	| 'type'
		//	| 'continue'
		//	| 'for'
		//	| 'import'
		//	| 'return'
		//	| 'var';
		@Override public ParserRule getRule() { return rule; }
		
		//'break' | 'default' | 'func' | 'interface' | 'select' | 'case' | 'defer' | 'go' | 'map' | 'struct' | 'chan' | 'else' |
		//'goto' | 'package' | 'switch' | 'const' | 'fallthrough' | 'if' | 'range' | 'type' | 'continue' | 'for' | 'import' |
		//'return' | 'var'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
		
		//'func'
		public Keyword getFuncKeyword_2() { return cFuncKeyword_2; }
		
		//'interface'
		public Keyword getInterfaceKeyword_3() { return cInterfaceKeyword_3; }
		
		//'select'
		public Keyword getSelectKeyword_4() { return cSelectKeyword_4; }
		
		//'case'
		public Keyword getCaseKeyword_5() { return cCaseKeyword_5; }
		
		//'defer'
		public Keyword getDeferKeyword_6() { return cDeferKeyword_6; }
		
		//'go'
		public Keyword getGoKeyword_7() { return cGoKeyword_7; }
		
		//'map'
		public Keyword getMapKeyword_8() { return cMapKeyword_8; }
		
		//'struct'
		public Keyword getStructKeyword_9() { return cStructKeyword_9; }
		
		//'chan'
		public Keyword getChanKeyword_10() { return cChanKeyword_10; }
		
		//'else'
		public Keyword getElseKeyword_11() { return cElseKeyword_11; }
		
		//'goto'
		public Keyword getGotoKeyword_12() { return cGotoKeyword_12; }
		
		//'package'
		public Keyword getPackageKeyword_13() { return cPackageKeyword_13; }
		
		//'switch'
		public Keyword getSwitchKeyword_14() { return cSwitchKeyword_14; }
		
		//'const'
		public Keyword getConstKeyword_15() { return cConstKeyword_15; }
		
		//'fallthrough'
		public Keyword getFallthroughKeyword_16() { return cFallthroughKeyword_16; }
		
		//'if'
		public Keyword getIfKeyword_17() { return cIfKeyword_17; }
		
		//'range'
		public Keyword getRangeKeyword_18() { return cRangeKeyword_18; }
		
		//'type'
		public Keyword getTypeKeyword_19() { return cTypeKeyword_19; }
		
		//'continue'
		public Keyword getContinueKeyword_20() { return cContinueKeyword_20; }
		
		//'for'
		public Keyword getForKeyword_21() { return cForKeyword_21; }
		
		//'import'
		public Keyword getImportKeyword_22() { return cImportKeyword_22; }
		
		//'return'
		public Keyword getReturnKeyword_23() { return cReturnKeyword_23; }
		
		//'var'
		public Keyword getVarKeyword_24() { return cVarKeyword_24; }
	}
	public class IDENTIFIERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.IDENTIFIER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cUNICODE_DIGITTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//IDENTIFIER:
		//	LETTER (LETTER | UNICODE_DIGIT)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LETTER (LETTER | UNICODE_DIGIT)*
		public Group getGroup() { return cGroup; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }
		
		//(LETTER | UNICODE_DIGIT)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LETTER
		public RuleCall getLETTERTerminalRuleCall_1_0() { return cLETTERTerminalRuleCall_1_0; }
		
		//UNICODE_DIGIT
		public RuleCall getUNICODE_DIGITTerminalRuleCall_1_1() { return cUNICODE_DIGITTerminalRuleCall_1_1; }
	}
	public class INT_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.INT_LIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECIMAL_LITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOCTAL_LITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHEX_LITTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//INT_LIT:
		//	DECIMAL_LIT | OCTAL_LIT | HEX_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMAL_LIT | OCTAL_LIT | HEX_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMAL_LIT
		public RuleCall getDECIMAL_LITTerminalRuleCall_0() { return cDECIMAL_LITTerminalRuleCall_0; }
		
		//OCTAL_LIT
		public RuleCall getOCTAL_LITTerminalRuleCall_1() { return cOCTAL_LITTerminalRuleCall_1; }
		
		//HEX_LIT
		public RuleCall getHEX_LITTerminalRuleCall_2() { return cHEX_LITTerminalRuleCall_2; }
	}
	public class FLOAT_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FLOAT_LIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDECIMALSTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cEXPOENTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDECIMALSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cEXPOENTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cEXPOENTTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//FLOAT_LIT:
		//	DECIMALS '.' DECIMALS? EXPOENT? | DECIMALS EXPOENT |
		//	'.' DECIMALS EXPOENT?;
		@Override public ParserRule getRule() { return rule; }
		
		//DECIMALS '.' DECIMALS? EXPOENT? | DECIMALS EXPOENT | '.' DECIMALS EXPOENT?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DECIMALS '.' DECIMALS? EXPOENT?
		public Group getGroup_0() { return cGroup_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_0_0() { return cDECIMALSTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//DECIMALS?
		public RuleCall getDECIMALSTerminalRuleCall_0_2() { return cDECIMALSTerminalRuleCall_0_2; }
		
		//EXPOENT?
		public RuleCall getEXPOENTTerminalRuleCall_0_3() { return cEXPOENTTerminalRuleCall_0_3; }
		
		//DECIMALS EXPOENT
		public Group getGroup_1() { return cGroup_1; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_1_0() { return cDECIMALSTerminalRuleCall_1_0; }
		
		//EXPOENT
		public RuleCall getEXPOENTTerminalRuleCall_1_1() { return cEXPOENTTerminalRuleCall_1_1; }
		
		//'.' DECIMALS EXPOENT?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_2_1() { return cDECIMALSTerminalRuleCall_2_1; }
		
		//EXPOENT?
		public RuleCall getEXPOENTTerminalRuleCall_2_2() { return cEXPOENTTerminalRuleCall_2_2; }
	}
	public class IMAGINARY_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.IMAGINARY_LIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDECIMALSTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFLOAT_LITParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cIKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IMAGINARY_LIT:
		//	(DECIMALS | FLOAT_LIT) 'i';
		@Override public ParserRule getRule() { return rule; }
		
		//(DECIMALS | FLOAT_LIT) 'i'
		public Group getGroup() { return cGroup; }
		
		//DECIMALS | FLOAT_LIT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//DECIMALS
		public RuleCall getDECIMALSTerminalRuleCall_0_0() { return cDECIMALSTerminalRuleCall_0_0; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITParserRuleCall_0_1() { return cFLOAT_LITParserRuleCall_0_1; }
		
		//'i'
		public Keyword getIKeyword_1() { return cIKeyword_1; }
	}
	public class RUNE_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.RUNE_LIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApostropheKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUNICODE_VALUETerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBYTE_VALUETerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RUNE_LIT:
		//	"'" (UNICODE_VALUE | BYTE_VALUE) "'";
		@Override public ParserRule getRule() { return rule; }
		
		//"'" (UNICODE_VALUE | BYTE_VALUE) "'"
		public Group getGroup() { return cGroup; }
		
		//"'"
		public Keyword getApostropheKeyword_0() { return cApostropheKeyword_0; }
		
		//UNICODE_VALUE | BYTE_VALUE
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//UNICODE_VALUE
		public RuleCall getUNICODE_VALUETerminalRuleCall_1_0() { return cUNICODE_VALUETerminalRuleCall_1_0; }
		
		//BYTE_VALUE
		public RuleCall getBYTE_VALUETerminalRuleCall_1_1() { return cBYTE_VALUETerminalRuleCall_1_1; }
		
		//"'"
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
	}
	public class STRING_LITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.STRING_LIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRAW_STRING_LITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTERPRETED_STRING_LITTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//STRING_LIT:
		//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//RAW_STRING_LIT | INTERPRETED_STRING_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RAW_STRING_LIT
		public RuleCall getRAW_STRING_LITTerminalRuleCall_0() { return cRAW_STRING_LITTerminalRuleCall_0; }
		
		//INTERPRETED_STRING_LIT
		public RuleCall getINTERPRETED_STRING_LITTerminalRuleCall_1() { return cINTERPRETED_STRING_LITTerminalRuleCall_1; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTypeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Type:
		//	{Type} TypeName | TypeLit | "(" Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} TypeName | TypeLit | "(" Type ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Type} TypeName
		public Group getGroup_0() { return cGroup_0; }
		
		//{Type}
		public Action getTypeAction_0_0() { return cTypeAction_0_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_0_1() { return cTypeNameParserRuleCall_0_1; }
		
		//TypeLit
		public RuleCall getTypeLitParserRuleCall_1() { return cTypeLitParserRuleCall_1; }
		
		//"(" Type ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeName:
		//	IDENTIFIER | QualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | QualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.QualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedIdent:
		//	PackageName "." IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//PackageName "." IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0() { return cPackageNameParserRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_2() { return cIDENTIFIERParserRuleCall_2; }
	}
	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PackageName");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}
	public class TypeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInterfaceTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSliceTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMapTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChannelTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TypeLit:
		//	ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_0() { return cArrayTypeParserRuleCall_0; }
		
		//StructType
		public RuleCall getStructTypeParserRuleCall_1() { return cStructTypeParserRuleCall_1; }
		
		//PointerType
		public RuleCall getPointerTypeParserRuleCall_2() { return cPointerTypeParserRuleCall_2; }
		
		//FunctionType
		public RuleCall getFunctionTypeParserRuleCall_3() { return cFunctionTypeParserRuleCall_3; }
		
		//InterfaceType
		public RuleCall getInterfaceTypeParserRuleCall_4() { return cInterfaceTypeParserRuleCall_4; }
		
		//SliceType
		public RuleCall getSliceTypeParserRuleCall_5() { return cSliceTypeParserRuleCall_5; }
		
		//MapType
		public RuleCall getMapTypeParserRuleCall_6() { return cMapTypeParserRuleCall_6; }
		
		//ChannelType
		public RuleCall getChannelTypeParserRuleCall_7() { return cChannelTypeParserRuleCall_7; }
	}
	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cArrayLengthParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElemtypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElemtypeElementTypeParserRuleCall_3_0 = (RuleCall)cElemtypeAssignment_3.eContents().get(0);
		
		//ArrayType:
		//	"[" ArrayLength "]" elemtype=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" ArrayLength "]" elemtype=ElementType
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//ArrayLength
		public RuleCall getArrayLengthParserRuleCall_1() { return cArrayLengthParserRuleCall_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//elemtype=ElementType
		public Assignment getElemtypeAssignment_3() { return cElemtypeAssignment_3; }
		
		//ElementType
		public RuleCall getElemtypeElementTypeParserRuleCall_3_0() { return cElemtypeElementTypeParserRuleCall_3_0; }
	}
	public class ArrayLengthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ArrayLength");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArrayLength:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ElementType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ElementType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class SliceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.SliceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElemtypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElemtypeElementTypeParserRuleCall_2_0 = (RuleCall)cElemtypeAssignment_2.eContents().get(0);
		
		//SliceType:
		//	'[' ']' elemtype=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' ']' elemtype=ElementType
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1() { return cRightSquareBracketKeyword_1; }
		
		//elemtype=ElementType
		public Assignment getElemtypeAssignment_2() { return cElemtypeAssignment_2; }
		
		//ElementType
		public RuleCall getElemtypeElementTypeParserRuleCall_2_0() { return cElemtypeElementTypeParserRuleCall_2_0; }
	}
	public class StructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.StructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFielddeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFielddeclFieldDeclParserRuleCall_3_0_0 = (RuleCall)cFielddeclAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructType:
		//	{StructType}
		//	'struct' '{' (fielddecl+=FieldDecl ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{StructType} 'struct' '{' (fielddecl+=FieldDecl ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//{StructType}
		public Action getStructTypeAction_0() { return cStructTypeAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(fielddecl+=FieldDecl ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//fielddecl+=FieldDecl
		public Assignment getFielddeclAssignment_3_0() { return cFielddeclAssignment_3_0; }
		
		//FieldDecl
		public RuleCall getFielddeclFieldDeclParserRuleCall_3_0_0() { return cFielddeclFieldDeclParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFieldDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIndentifierLAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIndentifierLIdentifierListParserRuleCall_1_0_0_0 = (RuleCall)cIndentifierLAssignment_1_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final RuleCall cEmbeddedFieldParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cTagParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FieldDecl:
		//	{FieldDecl} (indentifierL=IdentifierList type=Type | EmbeddedField) Tag?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FieldDecl} (indentifierL=IdentifierList type=Type | EmbeddedField) Tag?
		public Group getGroup() { return cGroup; }
		
		//{FieldDecl}
		public Action getFieldDeclAction_0() { return cFieldDeclAction_0; }
		
		//indentifierL=IdentifierList type=Type | EmbeddedField
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//indentifierL=IdentifierList type=Type
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//indentifierL=IdentifierList
		public Assignment getIndentifierLAssignment_1_0_0() { return cIndentifierLAssignment_1_0_0; }
		
		//IdentifierList
		public RuleCall getIndentifierLIdentifierListParserRuleCall_1_0_0_0() { return cIndentifierLIdentifierListParserRuleCall_1_0_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0_1_0() { return cTypeTypeParserRuleCall_1_0_1_0; }
		
		//EmbeddedField
		public RuleCall getEmbeddedFieldParserRuleCall_1_1() { return cEmbeddedFieldParserRuleCall_1_1; }
		
		//Tag?
		public RuleCall getTagParserRuleCall_2() { return cTagParserRuleCall_2; }
	}
	public class IdentifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.IdentifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IdentifierList:
		//	IDENTIFIER ("," IDENTIFIER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER ("," IDENTIFIER)*
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//("," IDENTIFIER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1_1() { return cIDENTIFIERParserRuleCall_1_1; }
	}
	public class EmbeddedFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.EmbeddedField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EmbeddedField:
		//	'*'? TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//'*'? TypeName
		public Group getGroup() { return cGroup; }
		
		//'*'?
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Tag");
		private final RuleCall cSTRING_LITParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Tag:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITParserRuleCall() { return cSTRING_LITParserRuleCall; }
	}
	public class PointerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PointerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBasetypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasetypeBaseTypeParserRuleCall_1_0 = (RuleCall)cBasetypeAssignment_1.eContents().get(0);
		
		//PointerType:
		//	'*' basetype=BaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' basetype=BaseType
		public Group getGroup() { return cGroup; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//basetype=BaseType
		public Assignment getBasetypeAssignment_1() { return cBasetypeAssignment_1; }
		
		//BaseType
		public RuleCall getBasetypeBaseTypeParserRuleCall_1_0() { return cBasetypeBaseTypeParserRuleCall_1_0; }
	}
	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BaseType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BaseType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	'func' Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' Signature
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cParametersParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultResultParserRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		
		//Signature:
		//	'.' Parameters result=Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' Parameters result=Result?
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_1() { return cParametersParserRuleCall_1; }
		
		//result=Result?
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }
		
		//Result
		public RuleCall getResultResultParserRuleCall_2_0() { return cResultResultParserRuleCall_2_0; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	Parameters | Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters | Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterlistAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterlistParameterListParserRuleCall_2_0_0 = (RuleCall)cParameterlistAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameters:
		//	{Parameters} '(' (parameterlist=ParameterList ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameters} '(' (parameterlist=ParameterList ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//{Parameters}
		public Action getParametersAction_0() { return cParametersAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameterlist=ParameterList ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameterlist=ParameterList
		public Assignment getParameterlistAssignment_2_0() { return cParameterlistAssignment_2_0; }
		
		//ParameterList
		public RuleCall getParameterlistParameterListParserRuleCall_2_0_0() { return cParameterlistParameterListParserRuleCall_2_0_0; }
		
		//','?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterdeclAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterdeclParameterDeclParserRuleCall_1_1_0 = (RuleCall)cParameterdeclAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	ParameterDecl (',' parameterdecl+=ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl (',' parameterdecl+=ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//(',' parameterdecl+=ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterdecl+=ParameterDecl
		public Assignment getParameterdeclAssignment_1_1() { return cParameterdeclAssignment_1_1; }
		
		//ParameterDecl
		public RuleCall getParameterdeclParameterDeclParserRuleCall_1_1_0() { return cParameterdeclParameterDeclParserRuleCall_1_1_0; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndentifierLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIndentifierLIdentifierListParserRuleCall_0_0 = (RuleCall)cIndentifierLAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ParameterDecl:
		//	indentifierL=IdentifierList? "..."? type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//indentifierL=IdentifierList? "..."? type=Type
		public Group getGroup() { return cGroup; }
		
		//indentifierL=IdentifierList?
		public Assignment getIndentifierLAssignment_0() { return cIndentifierLAssignment_0; }
		
		//IdentifierList
		public RuleCall getIndentifierLIdentifierListParserRuleCall_0_0() { return cIndentifierLIdentifierListParserRuleCall_0_0; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.InterfaceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMethodspecAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMethodspecMethodSpecParserRuleCall_3_0_0 = (RuleCall)cMethodspecAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterfaceType:
		//	{InterfaceType}
		//	'interface' '{' (methodspec+=MethodSpec ';')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{InterfaceType} 'interface' '{' (methodspec+=MethodSpec ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//{InterfaceType}
		public Action getInterfaceTypeAction_0() { return cInterfaceTypeAction_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(methodspec+=MethodSpec ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//methodspec+=MethodSpec
		public Assignment getMethodspecAssignment_3_0() { return cMethodspecAssignment_3_0; }
		
		//MethodSpec
		public RuleCall getMethodspecMethodSpecParserRuleCall_3_0_0() { return cMethodspecMethodSpecParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MethodSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MethodSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cMethodNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMethodSpecAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cInterfaceTypeNameParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//MethodSpec:
		//	MethodName Signature | {MethodSpec} InterfaceTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//MethodName Signature | {MethodSpec} InterfaceTypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MethodName Signature
		public Group getGroup_0() { return cGroup_0; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_0_0() { return cMethodNameParserRuleCall_0_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_0_1() { return cSignatureParserRuleCall_0_1; }
		
		//{MethodSpec} InterfaceTypeName
		public Group getGroup_1() { return cGroup_1; }
		
		//{MethodSpec}
		public Action getMethodSpecAction_1_0() { return cMethodSpecAction_1_0; }
		
		//InterfaceTypeName
		public RuleCall getInterfaceTypeNameParserRuleCall_1_1() { return cInterfaceTypeNameParserRuleCall_1_1; }
	}
	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MethodName");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MethodName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}
	public class InterfaceTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.InterfaceTypeName");
		private final RuleCall cTypeNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InterfaceTypeName:
		//	TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall() { return cTypeNameParserRuleCall; }
	}
	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeytypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeytypeKeyTypeParserRuleCall_2_0 = (RuleCall)cKeytypeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElemtypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElemtypeElementTypeParserRuleCall_4_0 = (RuleCall)cElemtypeAssignment_4.eContents().get(0);
		
		//MapType:
		//	'map' '[' keytype=KeyType ']' elemtype=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//'map' '[' keytype=KeyType ']' elemtype=ElementType
		public Group getGroup() { return cGroup; }
		
		//'map'
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//keytype=KeyType
		public Assignment getKeytypeAssignment_2() { return cKeytypeAssignment_2; }
		
		//KeyType
		public RuleCall getKeytypeKeyTypeParserRuleCall_2_0() { return cKeytypeKeyTypeParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//elemtype=ElementType
		public Assignment getElemtypeAssignment_4() { return cElemtypeAssignment_4; }
		
		//ElementType
		public RuleCall getElemtypeElementTypeParserRuleCall_4_0() { return cElemtypeElementTypeParserRuleCall_4_0; }
	}
	public class KeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.KeyType");
		private final RuleCall cTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//KeyType:
		//	Type;
		@Override public ParserRule getRule() { return rule; }
		
		//Type
		public RuleCall getTypeParserRuleCall() { return cTypeParserRuleCall; }
	}
	public class ChannelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ChannelType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cChanKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cChanKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cElemtypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemtypeElementTypeParserRuleCall_1_0 = (RuleCall)cElemtypeAssignment_1.eContents().get(0);
		
		//ChannelType:
		//	('chan' '<-'? | '<-' 'chan') elemtype=ElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//('chan' '<-'? | '<-' 'chan') elemtype=ElementType
		public Group getGroup() { return cGroup; }
		
		//'chan' '<-'? | '<-' 'chan'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'chan' '<-'?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_0_0() { return cChanKeyword_0_0_0; }
		
		//'<-'?
		public Keyword getLessThanSignHyphenMinusKeyword_0_0_1() { return cLessThanSignHyphenMinusKeyword_0_0_1; }
		
		//'<-' 'chan'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_1_0() { return cLessThanSignHyphenMinusKeyword_0_1_0; }
		
		//'chan'
		public Keyword getChanKeyword_0_1_1() { return cChanKeyword_0_1_1; }
		
		//elemtype=ElementType
		public Assignment getElemtypeAssignment_1() { return cElemtypeAssignment_1; }
		
		//ElementType
		public RuleCall getElemtypeElementTypeParserRuleCall_1_0() { return cElemtypeElementTypeParserRuleCall_1_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	'{' StatementList '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' StatementList '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatmentAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatmentStatementParserRuleCall_1_0_0 = (RuleCall)cStatmentAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementList:
		//	{StatementList} (statment+=Statement ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} (statment+=Statement ';')*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//(statment+=Statement ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//statment+=Statement
		public Assignment getStatmentAssignment_1_0() { return cStatmentAssignment_1_0; }
		
		//Statement
		public RuleCall getStatmentStatementParserRuleCall_1_0_0() { return cStatmentStatementParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDeclarationAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_1_0 = (RuleCall)cDeclarationAssignment_0_1.eContents().get(0);
		private final Assignment cLabestAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLabestLabeledStmtParserRuleCall_1_0 = (RuleCall)cLabestAssignment_1.eContents().get(0);
		private final Assignment cSimplestAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimplestSimpleStmtParserRuleCall_2_0 = (RuleCall)cSimplestAssignment_2.eContents().get(0);
		private final Assignment cGotstAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cGotstGoStmtParserRuleCall_3_0 = (RuleCall)cGotstAssignment_3.eContents().get(0);
		private final RuleCall cReturnStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Assignment cBreakstAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cBreakstBreakStmtParserRuleCall_5_0 = (RuleCall)cBreakstAssignment_5.eContents().get(0);
		private final Assignment cContinuestAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cContinuestContinueStmtParserRuleCall_6_0 = (RuleCall)cContinuestAssignment_6.eContents().get(0);
		private final Assignment cGotostAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGotostGotoStmtParserRuleCall_7_0 = (RuleCall)cGotostAssignment_7.eContents().get(0);
		private final Assignment cFalltstAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cFalltstFallthroughStmtParserRuleCall_8_0 = (RuleCall)cFalltstAssignment_8.eContents().get(0);
		private final Assignment cBlock1Assignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cBlock1BlockParserRuleCall_9_0 = (RuleCall)cBlock1Assignment_9.eContents().get(0);
		private final Assignment cIfAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cIfIfStmtParserRuleCall_10_0 = (RuleCall)cIfAssignment_10.eContents().get(0);
		private final Assignment cSwitchAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cSwitchSwitchStmtParserRuleCall_11_0 = (RuleCall)cSwitchAssignment_11.eContents().get(0);
		private final Assignment cSelectstAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final RuleCall cSelectstSelectStmtParserRuleCall_12_0 = (RuleCall)cSelectstAssignment_12.eContents().get(0);
		private final Assignment cForstAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final RuleCall cForstForStmtParserRuleCall_13_0 = (RuleCall)cForstAssignment_13.eContents().get(0);
		private final Assignment cDeferstAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final RuleCall cDeferstDeferStmtParserRuleCall_14_0 = (RuleCall)cDeferstAssignment_14.eContents().get(0);
		
		//Statement:
		//	{Statement} declaration=Declaration | labest=LabeledStmt | simplest=SimpleStmt | gotst=GoStmt | ReturnStmt |
		//	breakst=BreakStmt | continuest=ContinueStmt | gotost=GotoStmt | falltst=FallthroughStmt | block1=Block | if=IfStmt |
		//	switch=SwitchStmt | selectst=SelectStmt | forst=ForStmt | deferst=DeferStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} declaration=Declaration | labest=LabeledStmt | simplest=SimpleStmt | gotst=GoStmt | ReturnStmt |
		//breakst=BreakStmt | continuest=ContinueStmt | gotost=GotoStmt | falltst=FallthroughStmt | block1=Block | if=IfStmt |
		//switch=SwitchStmt | selectst=SelectStmt | forst=ForStmt | deferst=DeferStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Statement} declaration=Declaration
		public Group getGroup_0() { return cGroup_0; }
		
		//{Statement}
		public Action getStatementAction_0_0() { return cStatementAction_0_0; }
		
		//declaration=Declaration
		public Assignment getDeclarationAssignment_0_1() { return cDeclarationAssignment_0_1; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_1_0() { return cDeclarationDeclarationParserRuleCall_0_1_0; }
		
		//labest=LabeledStmt
		public Assignment getLabestAssignment_1() { return cLabestAssignment_1; }
		
		//LabeledStmt
		public RuleCall getLabestLabeledStmtParserRuleCall_1_0() { return cLabestLabeledStmtParserRuleCall_1_0; }
		
		//simplest=SimpleStmt
		public Assignment getSimplestAssignment_2() { return cSimplestAssignment_2; }
		
		//SimpleStmt
		public RuleCall getSimplestSimpleStmtParserRuleCall_2_0() { return cSimplestSimpleStmtParserRuleCall_2_0; }
		
		//gotst=GoStmt
		public Assignment getGotstAssignment_3() { return cGotstAssignment_3; }
		
		//GoStmt
		public RuleCall getGotstGoStmtParserRuleCall_3_0() { return cGotstGoStmtParserRuleCall_3_0; }
		
		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_4() { return cReturnStmtParserRuleCall_4; }
		
		//breakst=BreakStmt
		public Assignment getBreakstAssignment_5() { return cBreakstAssignment_5; }
		
		//BreakStmt
		public RuleCall getBreakstBreakStmtParserRuleCall_5_0() { return cBreakstBreakStmtParserRuleCall_5_0; }
		
		//continuest=ContinueStmt
		public Assignment getContinuestAssignment_6() { return cContinuestAssignment_6; }
		
		//ContinueStmt
		public RuleCall getContinuestContinueStmtParserRuleCall_6_0() { return cContinuestContinueStmtParserRuleCall_6_0; }
		
		//gotost=GotoStmt
		public Assignment getGotostAssignment_7() { return cGotostAssignment_7; }
		
		//GotoStmt
		public RuleCall getGotostGotoStmtParserRuleCall_7_0() { return cGotostGotoStmtParserRuleCall_7_0; }
		
		//falltst=FallthroughStmt
		public Assignment getFalltstAssignment_8() { return cFalltstAssignment_8; }
		
		//FallthroughStmt
		public RuleCall getFalltstFallthroughStmtParserRuleCall_8_0() { return cFalltstFallthroughStmtParserRuleCall_8_0; }
		
		//block1=Block
		public Assignment getBlock1Assignment_9() { return cBlock1Assignment_9; }
		
		//Block
		public RuleCall getBlock1BlockParserRuleCall_9_0() { return cBlock1BlockParserRuleCall_9_0; }
		
		//if=IfStmt
		public Assignment getIfAssignment_10() { return cIfAssignment_10; }
		
		//IfStmt
		public RuleCall getIfIfStmtParserRuleCall_10_0() { return cIfIfStmtParserRuleCall_10_0; }
		
		//switch=SwitchStmt
		public Assignment getSwitchAssignment_11() { return cSwitchAssignment_11; }
		
		//SwitchStmt
		public RuleCall getSwitchSwitchStmtParserRuleCall_11_0() { return cSwitchSwitchStmtParserRuleCall_11_0; }
		
		//selectst=SelectStmt
		public Assignment getSelectstAssignment_12() { return cSelectstAssignment_12; }
		
		//SelectStmt
		public RuleCall getSelectstSelectStmtParserRuleCall_12_0() { return cSelectstSelectStmtParserRuleCall_12_0; }
		
		//forst=ForStmt
		public Assignment getForstAssignment_13() { return cForstAssignment_13; }
		
		//ForStmt
		public RuleCall getForstForStmtParserRuleCall_13_0() { return cForstForStmtParserRuleCall_13_0; }
		
		//deferst=DeferStmt
		public Assignment getDeferstAssignment_14() { return cDeferstAssignment_14; }
		
		//DeferStmt
		public RuleCall getDeferstDeferStmtParserRuleCall_14_0() { return cDeferstDeferStmtParserRuleCall_14_0; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Declaration:
		//	ConstDecl | TypeDecl | VarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstDecl | TypeDecl | VarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstDecl
		public RuleCall getConstDeclParserRuleCall_0() { return cConstDeclParserRuleCall_0; }
		
		//TypeDecl
		public RuleCall getTypeDeclParserRuleCall_1() { return cTypeDeclParserRuleCall_1; }
		
		//VarDecl
		public RuleCall getVarDeclParserRuleCall_2() { return cVarDeclParserRuleCall_2; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//LabeledStmt:
		//	Label ':' statement=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//Label ':' statement=Statement
		public Group getGroup() { return cGroup; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement=Statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSimpleStmtAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cEmptyStmtParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIncDecStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignmentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cShortVarDeclParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SimpleStmt:
		//	{SimpleStmt} EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleStmt} EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SimpleStmt} EmptyStmt
		public Group getGroup_0() { return cGroup_0; }
		
		//{SimpleStmt}
		public Action getSimpleStmtAction_0_0() { return cSimpleStmtAction_0_0; }
		
		//EmptyStmt
		public RuleCall getEmptyStmtParserRuleCall_0_1() { return cEmptyStmtParserRuleCall_0_1; }
		
		//ExpressionStmt
		public RuleCall getExpressionStmtParserRuleCall_1() { return cExpressionStmtParserRuleCall_1; }
		
		//SendStmt
		public RuleCall getSendStmtParserRuleCall_2() { return cSendStmtParserRuleCall_2; }
		
		//IncDecStmt
		public RuleCall getIncDecStmtParserRuleCall_3() { return cIncDecStmtParserRuleCall_3; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_4() { return cAssignmentParserRuleCall_4; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_5() { return cShortVarDeclParserRuleCall_5; }
	}
	public class GoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.GoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GoStmt:
		//	'goto' Label;
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' Label
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionlistAssignment_2.eContents().get(0);
		
		//ReturnStmt:
		//	{ReturnStmt}
		//	'return' expressionlist=ExpressionList?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ReturnStmt} 'return' expressionlist=ExpressionList?
		public Group getGroup() { return cGroup; }
		
		//{ReturnStmt}
		public Action getReturnStmtAction_0() { return cReturnStmtAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//expressionlist=ExpressionList?
		public Assignment getExpressionlistAssignment_2() { return cExpressionlistAssignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_2_0() { return cExpressionlistExpressionListParserRuleCall_2_0; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//BreakStmt:
		//	'break' Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//'break' Label?
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//Label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ContinueStmt:
		//	'continue' Label?;
		@Override public ParserRule getRule() { return rule; }
		
		//'continue' Label?
		public Group getGroup() { return cGroup; }
		
		//'continue'
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//Label?
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//GotoStmt:
		//	'goto' Label;
		@Override public ParserRule getRule() { return rule; }
		
		//'goto' Label
		public Group getGroup() { return cGroup; }
		
		//'goto'
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSimstAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSimstSimpleStmtParserRuleCall_1_0_0 = (RuleCall)cSimstAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfsIfStmtParserRuleCall_4_1_0_0 = (RuleCall)cIfsAssignment_4_1_0.eContents().get(0);
		private final Assignment cBlock2Assignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cBlock2BlockParserRuleCall_4_1_1_0 = (RuleCall)cBlock2Assignment_4_1_1.eContents().get(0);
		
		//IfStmt:
		//	'if' (simst=SimpleStmt ';')? expression=Expression block=Block ('else' (ifs=IfStmt | block2=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' (simst=SimpleStmt ';')? expression=Expression block=Block ('else' (ifs=IfStmt | block2=Block))?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//(simst=SimpleStmt ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//simst=SimpleStmt
		public Assignment getSimstAssignment_1_0() { return cSimstAssignment_1_0; }
		
		//SimpleStmt
		public RuleCall getSimstSimpleStmtParserRuleCall_1_0_0() { return cSimstSimpleStmtParserRuleCall_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//('else' (ifs=IfStmt | block2=Block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//'else'
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//ifs=IfStmt | block2=Block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//ifs=IfStmt
		public Assignment getIfsAssignment_4_1_0() { return cIfsAssignment_4_1_0; }
		
		//IfStmt
		public RuleCall getIfsIfStmtParserRuleCall_4_1_0_0() { return cIfsIfStmtParserRuleCall_4_1_0_0; }
		
		//block2=Block
		public Assignment getBlock2Assignment_4_1_1() { return cBlock2Assignment_4_1_1; }
		
		//Block
		public RuleCall getBlock2BlockParserRuleCall_4_1_1_0() { return cBlock2BlockParserRuleCall_4_1_1_0; }
	}
	public class FallthroughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FallthroughStmt");
		private final Keyword cFallthroughKeyword = (Keyword)rule.eContents().get(1);
		
		//FallthroughStmt:
		//	'fallthrough';
		@Override public ParserRule getRule() { return rule; }
		
		//'fallthrough'
		public Keyword getFallthroughKeyword() { return cFallthroughKeyword; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.SwitchStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprSwitchStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeSwitchStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SwitchStmt:
		//	ExprSwitchStmt | TypeSwitchStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchStmt | TypeSwitchStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprSwitchStmt
		public RuleCall getExprSwitchStmtParserRuleCall_0() { return cExprSwitchStmtParserRuleCall_0; }
		
		//TypeSwitchStmt
		public RuleCall getTypeSwitchStmtParserRuleCall_1() { return cTypeSwitchStmtParserRuleCall_1; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommclauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommclauseCommClauseParserRuleCall_3_0 = (RuleCall)cCommclauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SelectStmt:
		//	{SelectStmt}
		//	"select" '{' commclause+=CommClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectStmt} "select" '{' commclause+=CommClause* '}'
		public Group getGroup() { return cGroup; }
		
		//{SelectStmt}
		public Action getSelectStmtAction_0() { return cSelectStmtAction_0; }
		
		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//commclause+=CommClause*
		public Assignment getCommclauseAssignment_3() { return cCommclauseAssignment_3; }
		
		//CommClause
		public RuleCall getCommclauseCommClauseParserRuleCall_3_0() { return cCommclauseCommClauseParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConditionConditionParserRuleCall_1_0_0 = (RuleCall)cConditionAssignment_1_0.eContents().get(0);
		private final Assignment cForAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cForForClauseParserRuleCall_1_1_0 = (RuleCall)cForAssignment_1_1.eContents().get(0);
		private final Assignment cRangeAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cRangeRangeClauseParserRuleCall_1_2_0 = (RuleCall)cRangeAssignment_1_2.eContents().get(0);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ForStmt:
		//	"for" (condition+=Condition | for+=ForClause | range+=RangeClause)* block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (condition+=Condition | for+=ForClause | range+=RangeClause)* block=Block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//(condition+=Condition | for+=ForClause | range+=RangeClause)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//condition+=Condition
		public Assignment getConditionAssignment_1_0() { return cConditionAssignment_1_0; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0_0() { return cConditionConditionParserRuleCall_1_0_0; }
		
		//for+=ForClause
		public Assignment getForAssignment_1_1() { return cForAssignment_1_1; }
		
		//ForClause
		public RuleCall getForForClauseParserRuleCall_1_1_0() { return cForForClauseParserRuleCall_1_1_0; }
		
		//range+=RangeClause
		public Assignment getRangeAssignment_1_2() { return cRangeAssignment_1_2; }
		
		//RangeClause
		public RuleCall getRangeRangeClauseParserRuleCall_1_2_0() { return cRangeRangeClauseParserRuleCall_1_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DeferStmt:
		//	'defer' Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'defer' Expression
		public Group getGroup() { return cGroup; }
		
		//'defer'
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class ConstDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ConstDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConstspecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConstspecConstSpecParserRuleCall_2_0_0 = (RuleCall)cConstspecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cConstspec2Assignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cConstspec2ConstSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cConstspec2Assignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ConstDecl:
		//	{ConstDecl}
		//	'const' (constspec=ConstSpec | '(' (constspec2+=ConstSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstDecl} 'const' (constspec=ConstSpec | '(' (constspec2+=ConstSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//{ConstDecl}
		public Action getConstDeclAction_0() { return cConstDeclAction_0; }
		
		//'const'
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }
		
		//constspec=ConstSpec | '(' (constspec2+=ConstSpec ';')* ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//constspec=ConstSpec
		public Assignment getConstspecAssignment_2_0() { return cConstspecAssignment_2_0; }
		
		//ConstSpec
		public RuleCall getConstspecConstSpecParserRuleCall_2_0_0() { return cConstspecConstSpecParserRuleCall_2_0_0; }
		
		//'(' (constspec2+=ConstSpec ';')* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(constspec2+=ConstSpec ';')*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//constspec2+=ConstSpec
		public Assignment getConstspec2Assignment_2_1_1_0() { return cConstspec2Assignment_2_1_1_0; }
		
		//ConstSpec
		public RuleCall getConstspec2ConstSpecParserRuleCall_2_1_1_0_0() { return cConstspec2ConstSpecParserRuleCall_2_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ConstSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ConstSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionlistAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_1_2_0 = (RuleCall)cExpressionlistAssignment_1_2.eContents().get(0);
		
		//ConstSpec:
		//	IdentifierList (Type '=' expressionlist=ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type '=' expressionlist=ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//Type '=' expressionlist=ExpressionList
		public Group getGroup_1() { return cGroup_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0() { return cTypeParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_1_2() { return cExpressionlistAssignment_1_2; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_1_2_0() { return cExpressionlistExpressionListParserRuleCall_1_2_0; }
	}
	public class TypeDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTypespecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTypespecTypeSpecParserRuleCall_2_0_0 = (RuleCall)cTypespecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cTypespec2Assignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cTypespec2TypeSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cTypespec2Assignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//TypeDecl:
		//	{TypeDecl}
		//	'type' (typespec=TypeSpec | '(' (typespec2+=TypeSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeDecl} 'type' (typespec=TypeSpec | '(' (typespec2+=TypeSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//{TypeDecl}
		public Action getTypeDeclAction_0() { return cTypeDeclAction_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//typespec=TypeSpec | '(' (typespec2+=TypeSpec ';')* ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//typespec=TypeSpec
		public Assignment getTypespecAssignment_2_0() { return cTypespecAssignment_2_0; }
		
		//TypeSpec
		public RuleCall getTypespecTypeSpecParserRuleCall_2_0_0() { return cTypespecTypeSpecParserRuleCall_2_0_0; }
		
		//'(' (typespec2+=TypeSpec ';')* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(typespec2+=TypeSpec ';')*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//typespec2+=TypeSpec
		public Assignment getTypespec2Assignment_2_1_1_0() { return cTypespec2Assignment_2_1_1_0; }
		
		//TypeSpec
		public RuleCall getTypespec2TypeSpecParserRuleCall_2_1_1_0_0() { return cTypespec2TypeSpecParserRuleCall_2_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class TypeSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAliasDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeSpec:
		//	AliasDecl | TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//AliasDecl | TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AliasDecl
		public RuleCall getAliasDeclParserRuleCall_0() { return cAliasDeclParserRuleCall_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_1() { return cTypeDefParserRuleCall_1; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TypeDef:
		//	IDENTIFIER Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
	}
	public class AliasDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.AliasDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//AliasDecl:
		//	IDENTIFIER '=' Type;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER '=' Type
		public Group getGroup() { return cGroup; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVarspecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVarspecVarSpecParserRuleCall_2_0_0 = (RuleCall)cVarspecAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Assignment cVarspec2Assignment_2_1_1_0 = (Assignment)cGroup_2_1_1.eContents().get(0);
		private final RuleCall cVarspec2VarSpecParserRuleCall_2_1_1_0_0 = (RuleCall)cVarspec2Assignment_2_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//VarDecl:
		//	{VarDecl}
		//	"var" (varspec=VarSpec | '(' (varspec2+=VarSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDecl} "var" (varspec=VarSpec | '(' (varspec2+=VarSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//{VarDecl}
		public Action getVarDeclAction_0() { return cVarDeclAction_0; }
		
		//"var"
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//varspec=VarSpec | '(' (varspec2+=VarSpec ';')* ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//varspec=VarSpec
		public Assignment getVarspecAssignment_2_0() { return cVarspecAssignment_2_0; }
		
		//VarSpec
		public RuleCall getVarspecVarSpecParserRuleCall_2_0_0() { return cVarspecVarSpecParserRuleCall_2_0_0; }
		
		//'(' (varspec2+=VarSpec ';')* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(varspec2+=VarSpec ';')*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//varspec2+=VarSpec
		public Assignment getVarspec2Assignment_2_1_1_0() { return cVarspec2Assignment_2_1_1_0; }
		
		//VarSpec
		public RuleCall getVarspec2VarSpecParserRuleCall_2_1_1_0_0() { return cVarspec2VarSpecParserRuleCall_2_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class VarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.VarSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_1_0_1_1_0 = (RuleCall)cExpressionlistAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//VarSpec:
		//	IdentifierList (Type ("=" expressionlist=ExpressionList)? | "=" ExpressionList);
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList (Type ("=" expressionlist=ExpressionList)? | "=" ExpressionList)
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//Type ("=" expressionlist=ExpressionList)? | "=" ExpressionList
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Type ("=" expressionlist=ExpressionList)?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1_0_0() { return cTypeParserRuleCall_1_0_0; }
		
		//("=" expressionlist=ExpressionList)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1_0() { return cEqualsSignKeyword_1_0_1_0; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_1_0_1_1() { return cExpressionlistAssignment_1_0_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_1_0_1_1_0() { return cExpressionlistExpressionListParserRuleCall_1_0_1_1_0; }
		
		//"=" ExpressionList
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0() { return cEqualsSignKeyword_1_1_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_1_1_1() { return cExpressionListParserRuleCall_1_1_1; }
	}
	public class EmptyStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.EmptyStmt");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//EmptyStmt:
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	public class ExpressionStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ExpressionStmt");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionStmt:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.SendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChChannelParserRuleCall_0_0 = (RuleCall)cChAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SendStmt:
		//	ch=Channel "<-" expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ch=Channel "<-" expression=Expression
		public Group getGroup() { return cGroup; }
		
		//ch=Channel
		public Assignment getChAssignment_0() { return cChAssignment_0; }
		
		//Channel
		public RuleCall getChChannelParserRuleCall_0_0() { return cChChannelParserRuleCall_0_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ChannelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Channel");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Channel:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class IncDecStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.IncDecStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//IncDecStmt:
		//	Expression ("++" | "--");
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ("++" | "--")
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//"++" | "--"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionlistAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_0_0 = (RuleCall)cExpressionlistAssignment_0.eContents().get(0);
		private final RuleCall cASSING_OPTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpressionlist2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionlist2ExpressionListParserRuleCall_2_0 = (RuleCall)cExpressionlist2Assignment_2.eContents().get(0);
		
		//Assignment:
		//	expressionlist=ExpressionList ASSING_OP expressionlist2=ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//expressionlist=ExpressionList ASSING_OP expressionlist2=ExpressionList
		public Group getGroup() { return cGroup; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_0() { return cExpressionlistAssignment_0; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_0_0() { return cExpressionlistExpressionListParserRuleCall_0_0; }
		
		//ASSING_OP
		public RuleCall getASSING_OPTerminalRuleCall_1() { return cASSING_OPTerminalRuleCall_1; }
		
		//expressionlist2=ExpressionList
		public Assignment getExpressionlist2Assignment_2() { return cExpressionlist2Assignment_2; }
		
		//ExpressionList
		public RuleCall getExpressionlist2ExpressionListParserRuleCall_2_0() { return cExpressionlist2ExpressionListParserRuleCall_2_0; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpressionListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ShortVarDecl:
		//	IdentifierList ':=' ExpressionList;
		@Override public ParserRule getRule() { return rule; }
		
		//IdentifierList ':=' ExpressionList
		public Group getGroup() { return cGroup; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0() { return cIdentifierListParserRuleCall_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_2() { return cExpressionListParserRuleCall_2; }
	}
	public class ExprSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ExprSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExprSwitchStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSimplestmtAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSimplestmtSimpleStmtParserRuleCall_2_0_0 = (RuleCall)cSimplestmtAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprcaseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprcaseExprCaseClauseParserRuleCall_5_0 = (RuleCall)cExprcaseAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ExprSwitchStmt:
		//	{ExprSwitchStmt}
		//	'switch' (simplestmt=SimpleStmt ';')? expression=Expression? "{" exprcase+=ExprCaseClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprSwitchStmt} 'switch' (simplestmt=SimpleStmt ';')? expression=Expression? "{" exprcase+=ExprCaseClause* "}"
		public Group getGroup() { return cGroup; }
		
		//{ExprSwitchStmt}
		public Action getExprSwitchStmtAction_0() { return cExprSwitchStmtAction_0; }
		
		//'switch'
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }
		
		//(simplestmt=SimpleStmt ';')?
		public Group getGroup_2() { return cGroup_2; }
		
		//simplestmt=SimpleStmt
		public Assignment getSimplestmtAssignment_2_0() { return cSimplestmtAssignment_2_0; }
		
		//SimpleStmt
		public RuleCall getSimplestmtSimpleStmtParserRuleCall_2_0_0() { return cSimplestmtSimpleStmtParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//exprcase+=ExprCaseClause*
		public Assignment getExprcaseAssignment_5() { return cExprcaseAssignment_5; }
		
		//ExprCaseClause
		public RuleCall getExprcaseExprCaseClauseParserRuleCall_5_0() { return cExprcaseExprCaseClauseParserRuleCall_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ExprCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ExprCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlistStatementListParserRuleCall_2_0 = (RuleCall)cStatementlistAssignment_2.eContents().get(0);
		
		//ExprCaseClause:
		//	ExprSwitchCase ':' statementlist=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSwitchCase ':' statementlist=StatementList
		public Group getGroup() { return cGroup; }
		
		//ExprSwitchCase
		public RuleCall getExprSwitchCaseParserRuleCall_0() { return cExprSwitchCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist=StatementList
		public Assignment getStatementlistAssignment_2() { return cStatementlistAssignment_2; }
		
		//StatementList
		public RuleCall getStatementlistStatementListParserRuleCall_2_0() { return cStatementlistStatementListParserRuleCall_2_0; }
	}
	public class ExprSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ExprSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExprSwitchCaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCaseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionlistAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_0_2_0 = (RuleCall)cExpressionlistAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExprSwitchCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExprSwitchCase:
		//	{ExprSwitchCase}
		//	'case' expressionlist=ExpressionList | {ExprSwitchCase} 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExprSwitchCase} 'case' expressionlist=ExpressionList | {ExprSwitchCase} 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ExprSwitchCase} 'case' expressionlist=ExpressionList
		public Group getGroup_0() { return cGroup_0; }
		
		//{ExprSwitchCase}
		public Action getExprSwitchCaseAction_0_0() { return cExprSwitchCaseAction_0_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_1() { return cCaseKeyword_0_1; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_0_2() { return cExpressionlistAssignment_0_2; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_0_2_0() { return cExpressionlistExpressionListParserRuleCall_0_2_0; }
		
		//{ExprSwitchCase} 'default'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ExprSwitchCase}
		public Action getExprSwitchCaseAction_1_0() { return cExprSwitchCaseAction_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class TypeSwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeSwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypesgAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypesgTypeSwitchGuardParserRuleCall_2_0 = (RuleCall)cTypesgAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeccAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeccTypeCaseClauseParserRuleCall_4_0 = (RuleCall)cTypeccAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchStmt:
		//	'switch' (SimpleStmt ';')? typesg=TypeSwitchGuard '{' typecc+=TypeCaseClause* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'switch' (SimpleStmt ';')? typesg=TypeSwitchGuard '{' typecc+=TypeCaseClause* '}'
		public Group getGroup() { return cGroup; }
		
		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//(SimpleStmt ';')?
		public Group getGroup_1() { return cGroup_1; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_1_0() { return cSimpleStmtParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//typesg=TypeSwitchGuard
		public Assignment getTypesgAssignment_2() { return cTypesgAssignment_2; }
		
		//TypeSwitchGuard
		public RuleCall getTypesgTypeSwitchGuardParserRuleCall_2_0() { return cTypesgTypeSwitchGuardParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//typecc+=TypeCaseClause*
		public Assignment getTypeccAssignment_4() { return cTypeccAssignment_4; }
		
		//TypeCaseClause
		public RuleCall getTypeccTypeCaseClauseParserRuleCall_4_0() { return cTypeccTypeCaseClauseParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeSwitchGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeSwitchGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TypeSwitchGuard:
		//	(IDENTIFIER ':=')? PrimaryExpr '.' '(' 'type' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(IDENTIFIER ':=')? PrimaryExpr '.' '(' 'type' ')'
		public Group getGroup() { return cGroup; }
		
		//(IDENTIFIER ':=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0_0() { return cIDENTIFIERParserRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_1() { return cPrimaryExprParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class TypeCaseClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeCaseClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeSwitchCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlistStatementListParserRuleCall_2_0 = (RuleCall)cStatementlistAssignment_2.eContents().get(0);
		
		//TypeCaseClause:
		//	TypeSwitchCase ':' statementlist=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//TypeSwitchCase ':' statementlist=StatementList
		public Group getGroup() { return cGroup; }
		
		//TypeSwitchCase
		public RuleCall getTypeSwitchCaseParserRuleCall_0() { return cTypeSwitchCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist=StatementList
		public Assignment getStatementlistAssignment_2() { return cStatementlistAssignment_2; }
		
		//StatementList
		public RuleCall getStatementlistStatementListParserRuleCall_2_0() { return cStatementlistStatementListParserRuleCall_2_0; }
	}
	public class TypeSwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeSwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeSwitchCaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCaseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypelistAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypelistTypeListParserRuleCall_0_2_0 = (RuleCall)cTypelistAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeSwitchCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TypeSwitchCase:
		//	{TypeSwitchCase} 'case' typelist=TypeList | {TypeSwitchCase} 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeSwitchCase} 'case' typelist=TypeList | {TypeSwitchCase} 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeSwitchCase} 'case' typelist=TypeList
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeSwitchCase}
		public Action getTypeSwitchCaseAction_0_0() { return cTypeSwitchCaseAction_0_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_1() { return cCaseKeyword_0_1; }
		
		//typelist=TypeList
		public Assignment getTypelistAssignment_0_2() { return cTypelistAssignment_0_2; }
		
		//TypeList
		public RuleCall getTypelistTypeListParserRuleCall_0_2_0() { return cTypelistTypeListParserRuleCall_0_2_0; }
		
		//{TypeSwitchCase} 'default'
		public Group getGroup_1() { return cGroup_1; }
		
		//{TypeSwitchCase}
		public Action getTypeSwitchCaseAction_1_0() { return cTypeSwitchCaseAction_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class TypeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cType2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cType2TypeParserRuleCall_1_1_0 = (RuleCall)cType2Assignment_1_1.eContents().get(0);
		
		//TypeList:
		//	type=Type (',' type2+=Type)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type (',' type2+=Type)*
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//(',' type2+=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//type2+=Type
		public Assignment getType2Assignment_1_1() { return cType2Assignment_1_1; }
		
		//Type
		public RuleCall getType2TypeParserRuleCall_1_1_0() { return cType2TypeParserRuleCall_1_1_0; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementlist2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementlist2StatementListParserRuleCall_2_0 = (RuleCall)cStatementlist2Assignment_2.eContents().get(0);
		
		//CommClause:
		//	CommCase ':' statementlist2=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase ':' statementlist2=StatementList
		public Group getGroup() { return cGroup; }
		
		//CommCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statementlist2=StatementList
		public Assignment getStatementlist2Assignment_2() { return cStatementlist2Assignment_2; }
		
		//StatementList
		public RuleCall getStatementlist2StatementListParserRuleCall_2_0() { return cStatementlist2StatementListParserRuleCall_2_0; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cCommCaseAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cCaseKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cSendstmtAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cSendstmtSendStmtParserRuleCall_0_2_0_0 = (RuleCall)cSendstmtAssignment_0_2_0.eContents().get(0);
		private final Assignment cRecvstmtAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final RuleCall cRecvstmtRecvStmtParserRuleCall_0_2_1_0 = (RuleCall)cRecvstmtAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCommCaseAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDefaultKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//CommCase:
		//	{CommCase} 'case' (sendstmt=SendStmt | recvstmt=RecvStmt) | {CommCase} 'default';
		@Override public ParserRule getRule() { return rule; }
		
		//{CommCase} 'case' (sendstmt=SendStmt | recvstmt=RecvStmt) | {CommCase} 'default'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{CommCase} 'case' (sendstmt=SendStmt | recvstmt=RecvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//{CommCase}
		public Action getCommCaseAction_0_0() { return cCommCaseAction_0_0; }
		
		//'case'
		public Keyword getCaseKeyword_0_1() { return cCaseKeyword_0_1; }
		
		//sendstmt=SendStmt | recvstmt=RecvStmt
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//sendstmt=SendStmt
		public Assignment getSendstmtAssignment_0_2_0() { return cSendstmtAssignment_0_2_0; }
		
		//SendStmt
		public RuleCall getSendstmtSendStmtParserRuleCall_0_2_0_0() { return cSendstmtSendStmtParserRuleCall_0_2_0_0; }
		
		//recvstmt=RecvStmt
		public Assignment getRecvstmtAssignment_0_2_1() { return cRecvstmtAssignment_0_2_1; }
		
		//RecvStmt
		public RuleCall getRecvstmtRecvStmtParserRuleCall_0_2_1_0() { return cRecvstmtRecvStmtParserRuleCall_0_2_1_0; }
		
		//{CommCase} 'default'
		public Group getGroup_1() { return cGroup_1; }
		
		//{CommCase}
		public Action getCommCaseAction_1_0() { return cCommCaseAction_1_0; }
		
		//'default'
		public Keyword getDefaultKeyword_1_1() { return cDefaultKeyword_1_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.RecvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionListParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cRecvexprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRecvexprRecvExprParserRuleCall_1_0 = (RuleCall)cRecvexprAssignment_1.eContents().get(0);
		
		//RecvStmt:
		//	(ExpressionList "=" | IdentifierList ":=")? recvexpr=RecvExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpressionList "=" | IdentifierList ":=")? recvexpr=RecvExpr
		public Group getGroup() { return cGroup; }
		
		//(ExpressionList "=" | IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionListParserRuleCall_0_0_0() { return cExpressionListParserRuleCall_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//recvexpr=RecvExpr
		public Assignment getRecvexprAssignment_1() { return cRecvexprAssignment_1; }
		
		//RecvExpr
		public RuleCall getRecvexprRecvExprParserRuleCall_1_0() { return cRecvexprRecvExprParserRuleCall_1_0; }
	}
	public class RecvExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.RecvExpr");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RecvExpr:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Condition:
		//	Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInitStmtParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPoststmtAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPoststmtPostStmtParserRuleCall_4_0 = (RuleCall)cPoststmtAssignment_4.eContents().get(0);
		
		//ForClause:
		//	InitStmt? ';' condition=Condition? ';' poststmt=PostStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//InitStmt? ';' condition=Condition? ';' poststmt=PostStmt
		public Group getGroup() { return cGroup; }
		
		//InitStmt?
		public RuleCall getInitStmtParserRuleCall_0() { return cInitStmtParserRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//condition=Condition?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//poststmt=PostStmt
		public Assignment getPoststmtAssignment_4() { return cPoststmtAssignment_4; }
		
		//PostStmt
		public RuleCall getPoststmtPostStmtParserRuleCall_4_0() { return cPoststmtPostStmtParserRuleCall_4_0; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpressionlistAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_0_0_0_0 = (RuleCall)cExpressionlistAssignment_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdentifierListParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//RangeClause:
		//	(expressionlist=ExpressionList "=" | IdentifierList ":=")? 'range' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(expressionlist=ExpressionList "=" | IdentifierList ":=")? 'range' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//(expressionlist=ExpressionList "=" | IdentifierList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//expressionlist=ExpressionList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_0_0_0() { return cExpressionlistAssignment_0_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_0_0_0_0() { return cExpressionlistExpressionListParserRuleCall_0_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1() { return cEqualsSignKeyword_0_0_1; }
		
		//IdentifierList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//IdentifierList
		public RuleCall getIdentifierListParserRuleCall_0_1_0() { return cIdentifierListParserRuleCall_0_1_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_1() { return cColonEqualsSignKeyword_0_1_1; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class InitStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.InitStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//InitStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class PostStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PostStmt");
		private final RuleCall cSimpleStmtParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PostStmt:
		//	SimpleStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall() { return cSimpleStmtParserRuleCall; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Label");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Label:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}
	public class ExpressionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ExpressionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression2Assignment_1_1.eContents().get(0);
		
		//ExpressionList:
		//	Expression (';' expression2+=Expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression (';' expression2+=Expression)*
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//(';' expression2+=Expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//expression2+=Expression
		public Assignment getExpression2Assignment_1_1() { return cExpression2Assignment_1_1; }
		
		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_1_0() { return cExpression2ExpressionParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpression2ParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Expression:
		//	UnaryExpr exp=Expression2;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr exp=Expression2
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//exp=Expression2
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression2
		public RuleCall getExpExpression2ParserRuleCall_1_0() { return cExpExpression2ParserRuleCall_1_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpression2Action_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cBINARY_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Assignment cExpression2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpression2Expression2ParserRuleCall_1_2_0 = (RuleCall)cExpression2Assignment_1_2.eContents().get(0);
		
		//Expression2:
		//	{Expression2} (BINARY_OP expression=Expression expression2=Expression2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Expression2} (BINARY_OP expression=Expression expression2=Expression2)?
		public Group getGroup() { return cGroup; }
		
		//{Expression2}
		public Action getExpression2Action_0() { return cExpression2Action_0; }
		
		//(BINARY_OP expression=Expression expression2=Expression2)?
		public Group getGroup_1() { return cGroup_1; }
		
		//BINARY_OP
		public RuleCall getBINARY_OPTerminalRuleCall_1_0() { return cBINARY_OPTerminalRuleCall_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//expression2=Expression2
		public Assignment getExpression2Assignment_1_2() { return cExpression2Assignment_1_2; }
		
		//Expression2
		public RuleCall getExpression2Expression2ParserRuleCall_1_2_0() { return cExpression2Expression2ParserRuleCall_1_2_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cUNARY_OPTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//UnaryExpr:
		//	PrimaryExpr | UNARY_OP UnaryExpr;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpr | UNARY_OP UnaryExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpr
		public RuleCall getPrimaryExprParserRuleCall_0() { return cPrimaryExprParserRuleCall_0; }
		
		//UNARY_OP UnaryExpr
		public Group getGroup_1() { return cGroup_1; }
		
		//UNARY_OP
		public RuleCall getUNARY_OPTerminalRuleCall_1_0() { return cUNARY_OPTerminalRuleCall_1_0; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_1_1() { return cUnaryExprParserRuleCall_1_1; }
	}
	public class PrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOperandParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cPrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_0_1_0 = (RuleCall)cPrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cConversionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cPrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_1_0 = (RuleCall)cPrAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cMethodExprParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPrAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_2_1_0 = (RuleCall)cPrAssignment_2_1.eContents().get(0);
		
		//PrimaryExpr:
		//	Operand pr=PrimaryExpr2 | Conversion pr=PrimaryExpr2 | MethodExpr pr=PrimaryExpr2;
		@Override public ParserRule getRule() { return rule; }
		
		//Operand pr=PrimaryExpr2 | Conversion pr=PrimaryExpr2 | MethodExpr pr=PrimaryExpr2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Operand pr=PrimaryExpr2
		public Group getGroup_0() { return cGroup_0; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_0_0() { return cOperandParserRuleCall_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_0_1() { return cPrAssignment_0_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_0_1_0() { return cPrPrimaryExpr2ParserRuleCall_0_1_0; }
		
		//Conversion pr=PrimaryExpr2
		public Group getGroup_1() { return cGroup_1; }
		
		//Conversion
		public RuleCall getConversionParserRuleCall_1_0() { return cConversionParserRuleCall_1_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_1() { return cPrAssignment_1_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_1_0; }
		
		//MethodExpr pr=PrimaryExpr2
		public Group getGroup_2() { return cGroup_2; }
		
		//MethodExpr
		public RuleCall getMethodExprParserRuleCall_2_0() { return cMethodExprParserRuleCall_2_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_2_1() { return cPrAssignment_2_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_2_1_0() { return cPrPrimaryExpr2ParserRuleCall_2_1_0; }
	}
	public class PrimaryExpr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.PrimaryExpr2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpr2Action_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cSelectorParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cPrAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_0_1_0 = (RuleCall)cPrAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIndexIndexParserRuleCall_1_1_0_0 = (RuleCall)cIndexAssignment_1_1_0.eContents().get(0);
		private final Assignment cPrAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_1_1_0 = (RuleCall)cPrAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cSliceAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cSliceSliceParserRuleCall_1_2_0_0 = (RuleCall)cSliceAssignment_1_2_0.eContents().get(0);
		private final Assignment cPrAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_2_1_0 = (RuleCall)cPrAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cTypeassAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cTypeassTypeAssertionParserRuleCall_1_3_0_0 = (RuleCall)cTypeassAssignment_1_3_0.eContents().get(0);
		private final Assignment cPrAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_3_1_0 = (RuleCall)cPrAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cArgumentsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_4_0_0 = (RuleCall)cArgumentsAssignment_1_4_0.eContents().get(0);
		private final Assignment cPrAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cPrPrimaryExpr2ParserRuleCall_1_4_1_0 = (RuleCall)cPrAssignment_1_4_1.eContents().get(0);
		
		//PrimaryExpr2:
		//	{PrimaryExpr2} (Selector pr=PrimaryExpr2 | index=Index pr=PrimaryExpr2 | slice=Slice pr=PrimaryExpr2 |
		//	typeass=TypeAssertion pr=PrimaryExpr2 | arguments=Arguments pr=PrimaryExpr2)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimaryExpr2} (Selector pr=PrimaryExpr2 | index=Index pr=PrimaryExpr2 | slice=Slice pr=PrimaryExpr2 |
		//typeass=TypeAssertion pr=PrimaryExpr2 | arguments=Arguments pr=PrimaryExpr2)?
		public Group getGroup() { return cGroup; }
		
		//{PrimaryExpr2}
		public Action getPrimaryExpr2Action_0() { return cPrimaryExpr2Action_0; }
		
		//(Selector pr=PrimaryExpr2 | index=Index pr=PrimaryExpr2 | slice=Slice pr=PrimaryExpr2 | typeass=TypeAssertion
		//pr=PrimaryExpr2 | arguments=Arguments pr=PrimaryExpr2)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Selector pr=PrimaryExpr2
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_1_0_0() { return cSelectorParserRuleCall_1_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_0_1() { return cPrAssignment_1_0_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_0_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_0_1_0; }
		
		//index=Index pr=PrimaryExpr2
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//index=Index
		public Assignment getIndexAssignment_1_1_0() { return cIndexAssignment_1_1_0; }
		
		//Index
		public RuleCall getIndexIndexParserRuleCall_1_1_0_0() { return cIndexIndexParserRuleCall_1_1_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_1_1() { return cPrAssignment_1_1_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_1_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_1_1_0; }
		
		//slice=Slice pr=PrimaryExpr2
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//slice=Slice
		public Assignment getSliceAssignment_1_2_0() { return cSliceAssignment_1_2_0; }
		
		//Slice
		public RuleCall getSliceSliceParserRuleCall_1_2_0_0() { return cSliceSliceParserRuleCall_1_2_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_2_1() { return cPrAssignment_1_2_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_2_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_2_1_0; }
		
		//typeass=TypeAssertion pr=PrimaryExpr2
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//typeass=TypeAssertion
		public Assignment getTypeassAssignment_1_3_0() { return cTypeassAssignment_1_3_0; }
		
		//TypeAssertion
		public RuleCall getTypeassTypeAssertionParserRuleCall_1_3_0_0() { return cTypeassTypeAssertionParserRuleCall_1_3_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_3_1() { return cPrAssignment_1_3_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_3_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_3_1_0; }
		
		//arguments=Arguments pr=PrimaryExpr2
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_4_0() { return cArgumentsAssignment_1_4_0; }
		
		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_4_0_0() { return cArgumentsArgumentsParserRuleCall_1_4_0_0; }
		
		//pr=PrimaryExpr2
		public Assignment getPrAssignment_1_4_1() { return cPrAssignment_1_4_1; }
		
		//PrimaryExpr2
		public RuleCall getPrPrimaryExpr2ParserRuleCall_1_4_1_0() { return cPrPrimaryExpr2ParserRuleCall_1_4_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOperandAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLiteralAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLiteralLiteralParserRuleCall_0_1_0 = (RuleCall)cLiteralAssignment_0_1.eContents().get(0);
		private final Assignment cOperandnAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOperandnOperandNameParserRuleCall_1_0 = (RuleCall)cOperandnAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Operand:
		//	{Operand} literal=Literal | operandn=OperandName | '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Operand} literal=Literal | operandn=OperandName | '(' expression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Operand} literal=Literal
		public Group getGroup_0() { return cGroup_0; }
		
		//{Operand}
		public Action getOperandAction_0_0() { return cOperandAction_0_0; }
		
		//literal=Literal
		public Assignment getLiteralAssignment_0_1() { return cLiteralAssignment_0_1; }
		
		//Literal
		public RuleCall getLiteralLiteralParserRuleCall_0_1_0() { return cLiteralLiteralParserRuleCall_0_1_0; }
		
		//operandn=OperandName
		public Assignment getOperandnAssignment_1() { return cOperandnAssignment_1; }
		
		//OperandName
		public RuleCall getOperandnOperandNameParserRuleCall_1_0() { return cOperandnOperandNameParserRuleCall_1_0; }
		
		//'(' expression=Expression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Conversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Conversion:
		//	type=Type '(' expression=Expression ','? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type '(' expression=Expression ','? ')'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MethodExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MethodExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReceiverTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cMethodNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MethodExpr:
		//	ReceiverType '.' MethodName;
		@Override public ParserRule getRule() { return rule; }
		
		//ReceiverType '.' MethodName
		public Group getGroup() { return cGroup; }
		
		//ReceiverType
		public RuleCall getReceiverTypeParserRuleCall_0() { return cReceiverTypeParserRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//MethodName
		public RuleCall getMethodNameParserRuleCall_2() { return cMethodNameParserRuleCall_2; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDENTIFIERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Selector:
		//	'.' IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' IDENTIFIER
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_1() { return cIDENTIFIERParserRuleCall_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Index:
		//	'[' expression=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expression=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class SliceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Slice");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSliceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpression2Assignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpression2ExpressionParserRuleCall_0_4_0 = (RuleCall)cExpression2Assignment_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression3Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression3ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression3Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression4Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression4ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression4Assignment_1_3.eContents().get(0);
		private final Keyword cColonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cExpression5Assignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpression5ExpressionParserRuleCall_1_5_0 = (RuleCall)cExpression5Assignment_1_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//Slice:
		//	{Slice}
		//	'[' expression=Expression? ':' expression2=Expression? ']' |
		//	'[' expression3=Expression? ':' expression4=Expression ':' expression5=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Slice} '[' expression=Expression? ':' expression2=Expression? ']' | '[' expression3=Expression? ':'
		//expression4=Expression ':' expression5=Expression ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Slice} '[' expression=Expression? ':' expression2=Expression? ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Slice}
		public Action getSliceAction_0_0() { return cSliceAction_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//expression2=Expression?
		public Assignment getExpression2Assignment_0_4() { return cExpression2Assignment_0_4; }
		
		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_0_4_0() { return cExpression2ExpressionParserRuleCall_0_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }
		
		//'[' expression3=Expression? ':' expression4=Expression ':' expression5=Expression ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//expression3=Expression?
		public Assignment getExpression3Assignment_1_1() { return cExpression3Assignment_1_1; }
		
		//Expression
		public RuleCall getExpression3ExpressionParserRuleCall_1_1_0() { return cExpression3ExpressionParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//expression4=Expression
		public Assignment getExpression4Assignment_1_3() { return cExpression4Assignment_1_3; }
		
		//Expression
		public RuleCall getExpression4ExpressionParserRuleCall_1_3_0() { return cExpression4ExpressionParserRuleCall_1_3_0; }
		
		//':'
		public Keyword getColonKeyword_1_4() { return cColonKeyword_1_4; }
		
		//expression5=Expression
		public Assignment getExpression5Assignment_1_5() { return cExpression5Assignment_1_5; }
		
		//Expression
		public RuleCall getExpression5ExpressionParserRuleCall_1_5_0() { return cExpression5ExpressionParserRuleCall_1_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_6() { return cRightSquareBracketKeyword_1_6; }
	}
	public class TypeAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.TypeAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeAssertion:
		//	'.' '(' Type ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'.' '(' Type ')'
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_0 = (Assignment)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_2_0_0_0 = (RuleCall)cExpressionlistAssignment_2_0_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Assignment cTypeAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_2_0_1_0_0 = (RuleCall)cTypeAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cExpressionlistAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cExpressionlistExpressionListParserRuleCall_2_0_1_1_1_0 = (RuleCall)cExpressionlistAssignment_2_0_1_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Arguments:
		//	{Arguments}
		//	'(' ((expressionlist=ExpressionList | type=Type (',' expressionlist=ExpressionList)?)? '...'? ','?)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Arguments} '(' ((expressionlist=ExpressionList | type=Type (',' expressionlist=ExpressionList)?)? '...'? ','?)? ')'
		public Group getGroup() { return cGroup; }
		
		//{Arguments}
		public Action getArgumentsAction_0() { return cArgumentsAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((expressionlist=ExpressionList | type=Type (',' expressionlist=ExpressionList)?)? '...'? ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(expressionlist=ExpressionList | type=Type (',' expressionlist=ExpressionList)?)?
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_2_0_0() { return cExpressionlistAssignment_2_0_0; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_2_0_0_0() { return cExpressionlistExpressionListParserRuleCall_2_0_0_0; }
		
		//type=Type (',' expressionlist=ExpressionList)?
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2_0_1_0() { return cTypeAssignment_2_0_1_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0_1_0_0() { return cTypeTypeParserRuleCall_2_0_1_0_0; }
		
		//(',' expressionlist=ExpressionList)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//expressionlist=ExpressionList
		public Assignment getExpressionlistAssignment_2_0_1_1_1() { return cExpressionlistAssignment_2_0_1_1_1; }
		
		//ExpressionList
		public RuleCall getExpressionlistExpressionListParserRuleCall_2_0_1_1_1_0() { return cExpressionlistExpressionListParserRuleCall_2_0_1_1_1_0; }
		
		//'...'?
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cBasicLitParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cCompositeLitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionLitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal:
		//	{Literal} BasicLit | CompositeLit | FunctionLit;
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} BasicLit | CompositeLit | FunctionLit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Literal} BasicLit
		public Group getGroup_0() { return cGroup_0; }
		
		//{Literal}
		public Action getLiteralAction_0_0() { return cLiteralAction_0_0; }
		
		//BasicLit
		public RuleCall getBasicLitParserRuleCall_0_1() { return cBasicLitParserRuleCall_0_1; }
		
		//CompositeLit
		public RuleCall getCompositeLitParserRuleCall_1() { return cCompositeLitParserRuleCall_1; }
		
		//FunctionLit
		public RuleCall getFunctionLitParserRuleCall_2() { return cFunctionLitParserRuleCall_2; }
	}
	public class FunctionLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FunctionLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFunctionbodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionbodyFunctionBodyParserRuleCall_2_0 = (RuleCall)cFunctionbodyAssignment_2.eContents().get(0);
		
		//FunctionLit:
		//	'func' Signature functionbody=FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//'func' Signature functionbody=FunctionBody
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
		
		//functionbody=FunctionBody
		public Assignment getFunctionbodyAssignment_2() { return cFunctionbodyAssignment_2; }
		
		//FunctionBody
		public RuleCall getFunctionbodyFunctionBodyParserRuleCall_2_0() { return cFunctionbodyFunctionBodyParserRuleCall_2_0; }
	}
	public class CompositeLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.CompositeLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLiteraltAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLiteraltLiteralTypeParserRuleCall_0_0 = (RuleCall)cLiteraltAssignment_0.eContents().get(0);
		private final Assignment cLiteralvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLiteralvLiteralValueParserRuleCall_1_0 = (RuleCall)cLiteralvAssignment_1.eContents().get(0);
		
		//CompositeLit:
		//	literalt=LiteralType literalv=LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//literalt=LiteralType literalv=LiteralValue
		public Group getGroup() { return cGroup; }
		
		//literalt=LiteralType
		public Assignment getLiteraltAssignment_0() { return cLiteraltAssignment_0; }
		
		//LiteralType
		public RuleCall getLiteraltLiteralTypeParserRuleCall_0_0() { return cLiteraltLiteralTypeParserRuleCall_0_0; }
		
		//literalv=LiteralValue
		public Assignment getLiteralvAssignment_1() { return cLiteralvAssignment_1; }
		
		//LiteralValue
		public RuleCall getLiteralvLiteralValueParserRuleCall_1_0() { return cLiteralvLiteralValueParserRuleCall_1_0; }
	}
	public class LiteralTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.LiteralType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStructtypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStructtypeStructTypeParserRuleCall_0_1_0 = (RuleCall)cStructtypeAssignment_0_1.eContents().get(0);
		private final Assignment cArraytypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArraytypeArrayTypeParserRuleCall_1_0 = (RuleCall)cArraytypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cElementypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cElementypeElementTypeParserRuleCall_2_3_0 = (RuleCall)cElementypeAssignment_2_3.eContents().get(0);
		private final Assignment cSlicetypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSlicetypeSliceTypeParserRuleCall_3_0 = (RuleCall)cSlicetypeAssignment_3.eContents().get(0);
		private final Assignment cMaptypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMaptypeMapTypeParserRuleCall_4_0 = (RuleCall)cMaptypeAssignment_4.eContents().get(0);
		private final Assignment cTypenameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cTypenameTypeNameParserRuleCall_5_0 = (RuleCall)cTypenameAssignment_5.eContents().get(0);
		
		//LiteralType:
		//	{LiteralType} structtype=StructType | arraytype=ArrayType | '[' '...' ']' elementype=ElementType |
		//	slicetype=SliceType | maptype=MapType | typename=TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralType} structtype=StructType | arraytype=ArrayType | '[' '...' ']' elementype=ElementType | slicetype=SliceType |
		//maptype=MapType | typename=TypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LiteralType} structtype=StructType
		public Group getGroup_0() { return cGroup_0; }
		
		//{LiteralType}
		public Action getLiteralTypeAction_0_0() { return cLiteralTypeAction_0_0; }
		
		//structtype=StructType
		public Assignment getStructtypeAssignment_0_1() { return cStructtypeAssignment_0_1; }
		
		//StructType
		public RuleCall getStructtypeStructTypeParserRuleCall_0_1_0() { return cStructtypeStructTypeParserRuleCall_0_1_0; }
		
		//arraytype=ArrayType
		public Assignment getArraytypeAssignment_1() { return cArraytypeAssignment_1; }
		
		//ArrayType
		public RuleCall getArraytypeArrayTypeParserRuleCall_1_0() { return cArraytypeArrayTypeParserRuleCall_1_0; }
		
		//'[' '...' ']' elementype=ElementType
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_2_1() { return cFullStopFullStopFullStopKeyword_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
		
		//elementype=ElementType
		public Assignment getElementypeAssignment_2_3() { return cElementypeAssignment_2_3; }
		
		//ElementType
		public RuleCall getElementypeElementTypeParserRuleCall_2_3_0() { return cElementypeElementTypeParserRuleCall_2_3_0; }
		
		//slicetype=SliceType
		public Assignment getSlicetypeAssignment_3() { return cSlicetypeAssignment_3; }
		
		//SliceType
		public RuleCall getSlicetypeSliceTypeParserRuleCall_3_0() { return cSlicetypeSliceTypeParserRuleCall_3_0; }
		
		//maptype=MapType
		public Assignment getMaptypeAssignment_4() { return cMaptypeAssignment_4; }
		
		//MapType
		public RuleCall getMaptypeMapTypeParserRuleCall_4_0() { return cMaptypeMapTypeParserRuleCall_4_0; }
		
		//typename=TypeName
		public Assignment getTypenameAssignment_5() { return cTypenameAssignment_5; }
		
		//TypeName
		public RuleCall getTypenameTypeNameParserRuleCall_5_0() { return cTypenameTypeNameParserRuleCall_5_0; }
	}
	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.LiteralValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementlistAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementlistElementListParserRuleCall_2_0_0 = (RuleCall)cElementlistAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LiteralValue:
		//	{LiteralValue}
		//	'{' (elementlist=ElementList ','?)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{LiteralValue} '{' (elementlist=ElementList ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//{LiteralValue}
		public Action getLiteralValueAction_0() { return cLiteralValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elementlist=ElementList ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elementlist=ElementList
		public Assignment getElementlistAssignment_2_0() { return cElementlistAssignment_2_0; }
		
		//ElementList
		public RuleCall getElementlistElementListParserRuleCall_2_0_0() { return cElementlistElementListParserRuleCall_2_0_0; }
		
		//','?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ElementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ElementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyedElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cKeyedelementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyedelementKeyedElementParserRuleCall_1_1_0 = (RuleCall)cKeyedelementAssignment_1_1.eContents().get(0);
		
		//ElementList:
		//	KeyedElement ("," keyedelement+=KeyedElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//KeyedElement ("," keyedelement+=KeyedElement)*
		public Group getGroup() { return cGroup; }
		
		//KeyedElement
		public RuleCall getKeyedElementParserRuleCall_0() { return cKeyedElementParserRuleCall_0; }
		
		//("," keyedelement+=KeyedElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//keyedelement+=KeyedElement
		public Assignment getKeyedelementAssignment_1_1() { return cKeyedelementAssignment_1_1; }
		
		//KeyedElement
		public RuleCall getKeyedelementKeyedElementParserRuleCall_1_1_0() { return cKeyedelementKeyedElementParserRuleCall_1_1_0; }
	}
	public class KeyedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.KeyedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//KeyedElement:
		//	(Key ':')? element=Element;
		@Override public ParserRule getRule() { return rule; }
		
		//(Key ':')? element=Element
		public Group getGroup() { return cGroup; }
		
		//(Key ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0_0() { return cKeyParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//element=Element
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_1_0() { return cElementElementParserRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Key");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cKeyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cFieldNameParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Key:
		//	{Key} FieldName | Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{Key} FieldName | Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Key} FieldName
		public Group getGroup_0() { return cGroup_0; }
		
		//{Key}
		public Action getKeyAction_0_0() { return cKeyAction_0_0; }
		
		//FieldName
		public RuleCall getFieldNameParserRuleCall_0_1() { return cFieldNameParserRuleCall_0_1; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_2() { return cLiteralValueParserRuleCall_2; }
	}
	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FieldName");
		private final RuleCall cIDENTIFIERParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FieldName:
		//	IDENTIFIER;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall() { return cIDENTIFIERParserRuleCall; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Expression | LiteralValue;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression | LiteralValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_1() { return cLiteralValueParserRuleCall_1; }
	}
	public class BasicLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BasicLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINT_LITParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOAT_LITParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIMAGINARY_LITParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRUNE_LITParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BasicLit:
		//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT_LIT
		public RuleCall getINT_LITParserRuleCall_0() { return cINT_LITParserRuleCall_0; }
		
		//FLOAT_LIT
		public RuleCall getFLOAT_LITParserRuleCall_1() { return cFLOAT_LITParserRuleCall_1; }
		
		//IMAGINARY_LIT
		public RuleCall getIMAGINARY_LITParserRuleCall_2() { return cIMAGINARY_LITParserRuleCall_2; }
		
		//RUNE_LIT
		public RuleCall getRUNE_LITParserRuleCall_3() { return cRUNE_LITParserRuleCall_3; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITParserRuleCall_4() { return cSTRING_LITParserRuleCall_4; }
	}
	public class ReceiverTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ReceiverType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//ReceiverType:
		//	type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0() { return cTypeTypeParserRuleCall_0; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.FunctionBody");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//FunctionBody:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class OperandNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.OperandName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperandName:
		//	IDENTIFIER | QualifiedIdent;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENTIFIER | QualifiedIdent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENTIFIER
		public RuleCall getIDENTIFIERParserRuleCall_0() { return cIDENTIFIERParserRuleCall_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImportKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cImportSpecParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_2_1_1_0 = (RuleCall)cGroup_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ImportDecl:
		//	{ImportDecl}
		//	"import" (ImportSpec | '(' (ImportSpec ';')* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportDecl} "import" (ImportSpec | '(' (ImportSpec ';')* ')')
		public Group getGroup() { return cGroup; }
		
		//{ImportDecl}
		public Action getImportDeclAction_0() { return cImportDeclAction_0; }
		
		//"import"
		public Keyword getImportKeyword_1() { return cImportKeyword_1; }
		
		//ImportSpec | '(' (ImportSpec ';')* ')'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_2_0() { return cImportSpecParserRuleCall_2_0; }
		
		//'(' (ImportSpec ';')* ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//(ImportSpec ';')*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_2_1_1_0() { return cImportSpecParserRuleCall_2_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cPackageNameParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImportPathParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | PackageName)? ImportPath;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | PackageName)? ImportPath
		public Group getGroup() { return cGroup; }
		
		//("." | PackageName)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//PackageName
		public RuleCall getPackageNameParserRuleCall_0_1() { return cPackageNameParserRuleCall_0_1; }
		
		//ImportPath
		public RuleCall getImportPathParserRuleCall_1() { return cImportPathParserRuleCall_1; }
	}
	public class ImportPathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ImportPath");
		private final RuleCall cSTRING_LITParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ImportPath:
		//	STRING_LIT;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING_LIT
		public RuleCall getSTRING_LITParserRuleCall() { return cSTRING_LITParserRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final Compilation_initialElements pCompilation_initial;
	private final TopLevelDeclElements pTopLevelDecl;
	private final MethodDeclElements pMethodDecl;
	private final ReceiverElements pReceiver;
	private final FunctionNameElements pFunctionName;
	private final FunctionDeclElements pFunctionDecl;
	private final PackageClauseElements pPackageClause;
	private final TerminalRule tNEWLINE;
	private final TerminalRule tUNICODE_CHAR;
	private final TerminalRule tUNICODE_LETTER;
	private final TerminalRule tUNICODE_DIGIT;
	private final KEYWORDSElements pKEYWORDS;
	private final TerminalRule tBINARY_OP;
	private final TerminalRule tREL_OP;
	private final TerminalRule tADD_OP;
	private final TerminalRule tMUL_OP;
	private final TerminalRule tUNARY_OP;
	private final TerminalRule tASSING_OP;
	private final TerminalRule tLETTER;
	private final TerminalRule tDECIMAL_DIGIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final IDENTIFIERElements pIDENTIFIER;
	private final INT_LITElements pINT_LIT;
	private final TerminalRule tDECIMAL_LIT;
	private final TerminalRule tOCTAL_LIT;
	private final TerminalRule tHEX_LIT;
	private final FLOAT_LITElements pFLOAT_LIT;
	private final TerminalRule tDECIMALS;
	private final TerminalRule tEXPOENT;
	private final IMAGINARY_LITElements pIMAGINARY_LIT;
	private final RUNE_LITElements pRUNE_LIT;
	private final TerminalRule tUNICODE_VALUE;
	private final TerminalRule tBYTE_VALUE;
	private final TerminalRule tOCTAL_BYTE_VALUE;
	private final TerminalRule tHEX_BYTE_VALUE;
	private final TerminalRule tLITTLE_U_VALUE;
	private final TerminalRule tBIG_U_VALUE;
	private final TerminalRule tESCAPED_CHAR;
	private final STRING_LITElements pSTRING_LIT;
	private final TerminalRule tRAW_STRING_LIT;
	private final TerminalRule tINTERPRETED_STRING_LIT;
	private final TypeElements pType;
	private final TypeNameElements pTypeName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final PackageNameElements pPackageName;
	private final TypeLitElements pTypeLit;
	private final ArrayTypeElements pArrayType;
	private final ArrayLengthElements pArrayLength;
	private final ElementTypeElements pElementType;
	private final SliceTypeElements pSliceType;
	private final StructTypeElements pStructType;
	private final FieldDeclElements pFieldDecl;
	private final IdentifierListElements pIdentifierList;
	private final EmbeddedFieldElements pEmbeddedField;
	private final TagElements pTag;
	private final PointerTypeElements pPointerType;
	private final BaseTypeElements pBaseType;
	private final FunctionTypeElements pFunctionType;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final InterfaceTypeElements pInterfaceType;
	private final MethodSpecElements pMethodSpec;
	private final MethodNameElements pMethodName;
	private final InterfaceTypeNameElements pInterfaceTypeName;
	private final MapTypeElements pMapType;
	private final KeyTypeElements pKeyType;
	private final ChannelTypeElements pChannelType;
	private final BlockElements pBlock;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final DeclarationElements pDeclaration;
	private final LabeledStmtElements pLabeledStmt;
	private final SimpleStmtElements pSimpleStmt;
	private final GoStmtElements pGoStmt;
	private final ReturnStmtElements pReturnStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final IfStmtElements pIfStmt;
	private final FallthroughStmtElements pFallthroughStmt;
	private final SwitchStmtElements pSwitchStmt;
	private final SelectStmtElements pSelectStmt;
	private final ForStmtElements pForStmt;
	private final DeferStmtElements pDeferStmt;
	private final ConstDeclElements pConstDecl;
	private final ConstSpecElements pConstSpec;
	private final TypeDeclElements pTypeDecl;
	private final TypeSpecElements pTypeSpec;
	private final TypeDefElements pTypeDef;
	private final AliasDeclElements pAliasDecl;
	private final VarDeclElements pVarDecl;
	private final VarSpecElements pVarSpec;
	private final EmptyStmtElements pEmptyStmt;
	private final ExpressionStmtElements pExpressionStmt;
	private final SendStmtElements pSendStmt;
	private final ChannelElements pChannel;
	private final IncDecStmtElements pIncDecStmt;
	private final AssignmentElements pAssignment;
	private final ShortVarDeclElements pShortVarDecl;
	private final ExprSwitchStmtElements pExprSwitchStmt;
	private final ExprCaseClauseElements pExprCaseClause;
	private final ExprSwitchCaseElements pExprSwitchCase;
	private final TypeSwitchStmtElements pTypeSwitchStmt;
	private final TypeSwitchGuardElements pTypeSwitchGuard;
	private final TypeCaseClauseElements pTypeCaseClause;
	private final TypeSwitchCaseElements pTypeSwitchCase;
	private final TypeListElements pTypeList;
	private final CommClauseElements pCommClause;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final RecvExprElements pRecvExpr;
	private final ConditionElements pCondition;
	private final ForClauseElements pForClause;
	private final RangeClauseElements pRangeClause;
	private final InitStmtElements pInitStmt;
	private final PostStmtElements pPostStmt;
	private final LabelElements pLabel;
	private final ExpressionListElements pExpressionList;
	private final ExpressionElements pExpression;
	private final Expression2Elements pExpression2;
	private final UnaryExprElements pUnaryExpr;
	private final PrimaryExprElements pPrimaryExpr;
	private final PrimaryExpr2Elements pPrimaryExpr2;
	private final OperandElements pOperand;
	private final ConversionElements pConversion;
	private final MethodExprElements pMethodExpr;
	private final SelectorElements pSelector;
	private final IndexElements pIndex;
	private final SliceElements pSlice;
	private final TypeAssertionElements pTypeAssertion;
	private final ArgumentsElements pArguments;
	private final LiteralElements pLiteral;
	private final FunctionLitElements pFunctionLit;
	private final CompositeLitElements pCompositeLit;
	private final LiteralTypeElements pLiteralType;
	private final LiteralValueElements pLiteralValue;
	private final ElementListElements pElementList;
	private final KeyedElementElements pKeyedElement;
	private final KeyElements pKey;
	private final FieldNameElements pFieldName;
	private final ElementElements pElement;
	private final BasicLitElements pBasicLit;
	private final ReceiverTypeElements pReceiverType;
	private final FunctionBodyElements pFunctionBody;
	private final OperandNameElements pOperandName;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final ImportPathElements pImportPath;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pCompilation_initial = new Compilation_initialElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pMethodDecl = new MethodDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pFunctionName = new FunctionNameElements();
		this.pFunctionDecl = new FunctionDeclElements();
		this.pPackageClause = new PackageClauseElements();
		this.tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.NEWLINE");
		this.tUNICODE_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UNICODE_CHAR");
		this.tUNICODE_LETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UNICODE_LETTER");
		this.tUNICODE_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UNICODE_DIGIT");
		this.pKEYWORDS = new KEYWORDSElements();
		this.tBINARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BINARY_OP");
		this.tREL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.REL_OP");
		this.tADD_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ADD_OP");
		this.tMUL_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.MUL_OP");
		this.tUNARY_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UNARY_OP");
		this.tASSING_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ASSING_OP");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.LETTER");
		this.tDECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.DECIMAL_DIGIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.OCTAL_DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.HEX_DIGIT");
		this.pIDENTIFIER = new IDENTIFIERElements();
		this.pINT_LIT = new INT_LITElements();
		this.tDECIMAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.DECIMAL_LIT");
		this.tOCTAL_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.OCTAL_LIT");
		this.tHEX_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.HEX_LIT");
		this.pFLOAT_LIT = new FLOAT_LITElements();
		this.tDECIMALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.DECIMALS");
		this.tEXPOENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.EXPOENT");
		this.pIMAGINARY_LIT = new IMAGINARY_LITElements();
		this.pRUNE_LIT = new RUNE_LITElements();
		this.tUNICODE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.UNICODE_VALUE");
		this.tBYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BYTE_VALUE");
		this.tOCTAL_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.OCTAL_BYTE_VALUE");
		this.tHEX_BYTE_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.HEX_BYTE_VALUE");
		this.tLITTLE_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.LITTLE_U_VALUE");
		this.tBIG_U_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.BIG_U_VALUE");
		this.tESCAPED_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.ESCAPED_CHAR");
		this.pSTRING_LIT = new STRING_LITElements();
		this.tRAW_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.RAW_STRING_LIT");
		this.tINTERPRETED_STRING_LIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Go.INTERPRETED_STRING_LIT");
		this.pType = new TypeElements();
		this.pTypeName = new TypeNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pPackageName = new PackageNameElements();
		this.pTypeLit = new TypeLitElements();
		this.pArrayType = new ArrayTypeElements();
		this.pArrayLength = new ArrayLengthElements();
		this.pElementType = new ElementTypeElements();
		this.pSliceType = new SliceTypeElements();
		this.pStructType = new StructTypeElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pIdentifierList = new IdentifierListElements();
		this.pEmbeddedField = new EmbeddedFieldElements();
		this.pTag = new TagElements();
		this.pPointerType = new PointerTypeElements();
		this.pBaseType = new BaseTypeElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pMethodSpec = new MethodSpecElements();
		this.pMethodName = new MethodNameElements();
		this.pInterfaceTypeName = new InterfaceTypeNameElements();
		this.pMapType = new MapTypeElements();
		this.pKeyType = new KeyTypeElements();
		this.pChannelType = new ChannelTypeElements();
		this.pBlock = new BlockElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pDeclaration = new DeclarationElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pGoStmt = new GoStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pIfStmt = new IfStmtElements();
		this.pFallthroughStmt = new FallthroughStmtElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pForStmt = new ForStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pConstDecl = new ConstDeclElements();
		this.pConstSpec = new ConstSpecElements();
		this.pTypeDecl = new TypeDeclElements();
		this.pTypeSpec = new TypeSpecElements();
		this.pTypeDef = new TypeDefElements();
		this.pAliasDecl = new AliasDeclElements();
		this.pVarDecl = new VarDeclElements();
		this.pVarSpec = new VarSpecElements();
		this.pEmptyStmt = new EmptyStmtElements();
		this.pExpressionStmt = new ExpressionStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pChannel = new ChannelElements();
		this.pIncDecStmt = new IncDecStmtElements();
		this.pAssignment = new AssignmentElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pExprSwitchStmt = new ExprSwitchStmtElements();
		this.pExprCaseClause = new ExprCaseClauseElements();
		this.pExprSwitchCase = new ExprSwitchCaseElements();
		this.pTypeSwitchStmt = new TypeSwitchStmtElements();
		this.pTypeSwitchGuard = new TypeSwitchGuardElements();
		this.pTypeCaseClause = new TypeCaseClauseElements();
		this.pTypeSwitchCase = new TypeSwitchCaseElements();
		this.pTypeList = new TypeListElements();
		this.pCommClause = new CommClauseElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pRecvExpr = new RecvExprElements();
		this.pCondition = new ConditionElements();
		this.pForClause = new ForClauseElements();
		this.pRangeClause = new RangeClauseElements();
		this.pInitStmt = new InitStmtElements();
		this.pPostStmt = new PostStmtElements();
		this.pLabel = new LabelElements();
		this.pExpressionList = new ExpressionListElements();
		this.pExpression = new ExpressionElements();
		this.pExpression2 = new Expression2Elements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pPrimaryExpr = new PrimaryExprElements();
		this.pPrimaryExpr2 = new PrimaryExpr2Elements();
		this.pOperand = new OperandElements();
		this.pConversion = new ConversionElements();
		this.pMethodExpr = new MethodExprElements();
		this.pSelector = new SelectorElements();
		this.pIndex = new IndexElements();
		this.pSlice = new SliceElements();
		this.pTypeAssertion = new TypeAssertionElements();
		this.pArguments = new ArgumentsElements();
		this.pLiteral = new LiteralElements();
		this.pFunctionLit = new FunctionLitElements();
		this.pCompositeLit = new CompositeLitElements();
		this.pLiteralType = new LiteralTypeElements();
		this.pLiteralValue = new LiteralValueElements();
		this.pElementList = new ElementListElements();
		this.pKeyedElement = new KeyedElementElements();
		this.pKey = new KeyElements();
		this.pFieldName = new FieldNameElements();
		this.pElement = new ElementElements();
		this.pBasicLit = new BasicLitElements();
		this.pReceiverType = new ReceiverTypeElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pOperandName = new OperandNameElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pImportPath = new ImportPathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Compilation_initial;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Compilation_initial:
	//	{Compilation_initial} pack=PackageClause ';' (importdecl+=ImportDecl ';')* (toplevel+=TopLevelDecl ';')*;
	public Compilation_initialElements getCompilation_initialAccess() {
		return pCompilation_initial;
	}
	
	public ParserRule getCompilation_initialRule() {
		return getCompilation_initialAccess().getRule();
	}
	
	//TopLevelDecl:
	//	Declaration | FunctionDecl | MethodDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//MethodDecl:
	//	'func' Receiver MethodName signature+=Signature body+=FunctionBody?;
	public MethodDeclElements getMethodDeclAccess() {
		return pMethodDecl;
	}
	
	public ParserRule getMethodDeclRule() {
		return getMethodDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//FunctionName:
	//	IDENTIFIER;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//FunctionDecl:
	//	'func' FunctionName signature+=Signature body+=FunctionBody?;
	public FunctionDeclElements getFunctionDeclAccess() {
		return pFunctionDecl;
	}
	
	public ParserRule getFunctionDeclRule() {
		return getFunctionDeclAccess().getRule();
	}
	
	//PackageClause:
	//	'package' pack=PackageName;
	public PackageClauseElements getPackageClauseAccess() {
		return pPackageClause;
	}
	
	public ParserRule getPackageClauseRule() {
		return getPackageClauseAccess().getRule();
	}
	
	//terminal NEWLINE:
	//	'\\u000A';
	public TerminalRule getNEWLINERule() {
		return tNEWLINE;
	}
	
	//terminal UNICODE_CHAR:
	//	'\\u000A';
	public TerminalRule getUNICODE_CHARRule() {
		return tUNICODE_CHAR;
	}
	
	//terminal UNICODE_LETTER:
	//	'\\u0041-\\u005A';
	public TerminalRule getUNICODE_LETTERRule() {
		return tUNICODE_LETTER;
	}
	
	//terminal UNICODE_DIGIT:
	//	'\\u0041-\\u005A';
	public TerminalRule getUNICODE_DIGITRule() {
		return tUNICODE_DIGIT;
	}
	
	//KEYWORDS:
	//	'break'
	//	| 'default'
	//	| 'func'
	//	| 'interface'
	//	| 'select'
	//	| 'case'
	//	| 'defer'
	//	| 'go'
	//	| 'map'
	//	| 'struct'
	//	| 'chan'
	//	| 'else'
	//	| 'goto'
	//	| 'package'
	//	| 'switch'
	//	| 'const'
	//	| 'fallthrough'
	//	| 'if'
	//	| 'range'
	//	| 'type'
	//	| 'continue'
	//	| 'for'
	//	| 'import'
	//	| 'return'
	//	| 'var';
	public KEYWORDSElements getKEYWORDSAccess() {
		return pKEYWORDS;
	}
	
	public ParserRule getKEYWORDSRule() {
		return getKEYWORDSAccess().getRule();
	}
	
	//terminal BINARY_OP:
	//	"||" | "&&" | REL_OP | ADD_OP | MUL_OP;
	public TerminalRule getBINARY_OPRule() {
		return tBINARY_OP;
	}
	
	//terminal REL_OP:
	//	"==" | "!=" | "<" | "<=" | ">" | ">=";
	public TerminalRule getREL_OPRule() {
		return tREL_OP;
	}
	
	//terminal ADD_OP:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getADD_OPRule() {
		return tADD_OP;
	}
	
	//terminal MUL_OP:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getMUL_OPRule() {
		return tMUL_OP;
	}
	
	//terminal UNARY_OP:
	//	"+" | "-" | "!" | "^" | "*" | "&" | "<-";
	public TerminalRule getUNARY_OPRule() {
		return tUNARY_OP;
	}
	
	//terminal ASSING_OP:
	//	(ADD_OP | MUL_OP)? '=';
	public TerminalRule getASSING_OPRule() {
		return tASSING_OP;
	}
	
	//terminal LETTER:
	//	UNICODE_LETTER
	//	| '_'
	//	| EOF;
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DECIMAL_DIGIT:
	//	'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'+;
	public TerminalRule getDECIMAL_DIGITRule() {
		return tDECIMAL_DIGIT;
	}
	
	//terminal OCTAL_DIGIT:
	//	'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal HEX_DIGIT:
	//	('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') | ('A' | 'B' | 'C' | 'D' | 'E' | 'F') | ('a' | 'b' | 'c'
	//	| 'd' | 'e' | 'f');
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//IDENTIFIER:
	//	LETTER (LETTER | UNICODE_DIGIT)*;
	public IDENTIFIERElements getIDENTIFIERAccess() {
		return pIDENTIFIER;
	}
	
	public ParserRule getIDENTIFIERRule() {
		return getIDENTIFIERAccess().getRule();
	}
	
	//INT_LIT:
	//	DECIMAL_LIT | OCTAL_LIT | HEX_LIT;
	public INT_LITElements getINT_LITAccess() {
		return pINT_LIT;
	}
	
	public ParserRule getINT_LITRule() {
		return getINT_LITAccess().getRule();
	}
	
	//terminal DECIMAL_LIT:
	//	('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') DECIMAL_DIGIT;
	public TerminalRule getDECIMAL_LITRule() {
		return tDECIMAL_LIT;
	}
	
	//terminal OCTAL_LIT:
	//	'0' OCTAL_DIGIT*;
	public TerminalRule getOCTAL_LITRule() {
		return tOCTAL_LIT;
	}
	
	//terminal HEX_LIT:
	//	'0' ('x' | 'X') HEX_DIGIT HEX_DIGIT+;
	public TerminalRule getHEX_LITRule() {
		return tHEX_LIT;
	}
	
	//FLOAT_LIT:
	//	DECIMALS '.' DECIMALS? EXPOENT? | DECIMALS EXPOENT |
	//	'.' DECIMALS EXPOENT?;
	public FLOAT_LITElements getFLOAT_LITAccess() {
		return pFLOAT_LIT;
	}
	
	public ParserRule getFLOAT_LITRule() {
		return getFLOAT_LITAccess().getRule();
	}
	
	//terminal DECIMALS:
	//	DECIMAL_DIGIT DECIMAL_DIGIT+;
	public TerminalRule getDECIMALSRule() {
		return tDECIMALS;
	}
	
	//terminal EXPOENT:
	//	('e' | 'E') ('+' | '-')? DECIMALS;
	public TerminalRule getEXPOENTRule() {
		return tEXPOENT;
	}
	
	//IMAGINARY_LIT:
	//	(DECIMALS | FLOAT_LIT) 'i';
	public IMAGINARY_LITElements getIMAGINARY_LITAccess() {
		return pIMAGINARY_LIT;
	}
	
	public ParserRule getIMAGINARY_LITRule() {
		return getIMAGINARY_LITAccess().getRule();
	}
	
	//RUNE_LIT:
	//	"'" (UNICODE_VALUE | BYTE_VALUE) "'";
	public RUNE_LITElements getRUNE_LITAccess() {
		return pRUNE_LIT;
	}
	
	public ParserRule getRUNE_LITRule() {
		return getRUNE_LITAccess().getRule();
	}
	
	//terminal UNICODE_VALUE:
	//	UNICODE_CHAR | LITTLE_U_VALUE | BIG_U_VALUE | ESCAPED_CHAR;
	public TerminalRule getUNICODE_VALUERule() {
		return tUNICODE_VALUE;
	}
	
	//terminal BYTE_VALUE:
	//	OCTAL_BYTE_VALUE | HEX_BYTE_VALUE;
	public TerminalRule getBYTE_VALUERule() {
		return tBYTE_VALUE;
	}
	
	//terminal OCTAL_BYTE_VALUE:
	//	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_BYTE_VALUERule() {
		return tOCTAL_BYTE_VALUE;
	}
	
	//terminal HEX_BYTE_VALUE:
	//	'\\' "x" HEX_DIGIT HEX_DIGIT;
	public TerminalRule getHEX_BYTE_VALUERule() {
		return tHEX_BYTE_VALUE;
	}
	
	//terminal LITTLE_U_VALUE:
	//	'\\' "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getLITTLE_U_VALUERule() {
		return tLITTLE_U_VALUE;
	}
	
	//terminal BIG_U_VALUE:
	//	'\\' "U" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT;
	public TerminalRule getBIG_U_VALUERule() {
		return tBIG_U_VALUE;
	}
	
	//terminal ESCAPED_CHAR:
	//	'\\' ("a" | "b" | "f" | "n" | "r" | "t" | "v" | '\\' | "'" | '"');
	public TerminalRule getESCAPED_CHARRule() {
		return tESCAPED_CHAR;
	}
	
	//STRING_LIT:
	//	RAW_STRING_LIT | INTERPRETED_STRING_LIT;
	public STRING_LITElements getSTRING_LITAccess() {
		return pSTRING_LIT;
	}
	
	public ParserRule getSTRING_LITRule() {
		return getSTRING_LITAccess().getRule();
	}
	
	//terminal RAW_STRING_LIT:
	//	"'" (UNICODE_CHAR | NEWLINE)* "'";
	public TerminalRule getRAW_STRING_LITRule() {
		return tRAW_STRING_LIT;
	}
	
	//terminal INTERPRETED_STRING_LIT:
	//	'"' (UNICODE_VALUE | BYTE_VALUE)* '"';
	public TerminalRule getINTERPRETED_STRING_LITRule() {
		return tINTERPRETED_STRING_LIT;
	}
	
	//Type:
	//	{Type} TypeName | TypeLit | "(" Type ")";
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeName:
	//	IDENTIFIER | QualifiedIdent;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//QualifiedIdent:
	//	PackageName "." IDENTIFIER;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	//PackageName:
	//	IDENTIFIER;
	public PackageNameElements getPackageNameAccess() {
		return pPackageName;
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}
	
	//TypeLit:
	//	ArrayType | StructType | PointerType | FunctionType | InterfaceType | SliceType | MapType | ChannelType;
	public TypeLitElements getTypeLitAccess() {
		return pTypeLit;
	}
	
	public ParserRule getTypeLitRule() {
		return getTypeLitAccess().getRule();
	}
	
	//ArrayType:
	//	"[" ArrayLength "]" elemtype=ElementType;
	public ArrayTypeElements getArrayTypeAccess() {
		return pArrayType;
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}
	
	//ArrayLength:
	//	Expression;
	public ArrayLengthElements getArrayLengthAccess() {
		return pArrayLength;
	}
	
	public ParserRule getArrayLengthRule() {
		return getArrayLengthAccess().getRule();
	}
	
	//ElementType:
	//	Type;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}
	
	//SliceType:
	//	'[' ']' elemtype=ElementType;
	public SliceTypeElements getSliceTypeAccess() {
		return pSliceType;
	}
	
	public ParserRule getSliceTypeRule() {
		return getSliceTypeAccess().getRule();
	}
	
	//StructType:
	//	{StructType}
	//	'struct' '{' (fielddecl+=FieldDecl ';')* '}';
	public StructTypeElements getStructTypeAccess() {
		return pStructType;
	}
	
	public ParserRule getStructTypeRule() {
		return getStructTypeAccess().getRule();
	}
	
	//FieldDecl:
	//	{FieldDecl} (indentifierL=IdentifierList type=Type | EmbeddedField) Tag?;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//IdentifierList:
	//	IDENTIFIER ("," IDENTIFIER)*;
	public IdentifierListElements getIdentifierListAccess() {
		return pIdentifierList;
	}
	
	public ParserRule getIdentifierListRule() {
		return getIdentifierListAccess().getRule();
	}
	
	//EmbeddedField:
	//	'*'? TypeName;
	public EmbeddedFieldElements getEmbeddedFieldAccess() {
		return pEmbeddedField;
	}
	
	public ParserRule getEmbeddedFieldRule() {
		return getEmbeddedFieldAccess().getRule();
	}
	
	//Tag:
	//	STRING_LIT;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//PointerType:
	//	'*' basetype=BaseType;
	public PointerTypeElements getPointerTypeAccess() {
		return pPointerType;
	}
	
	public ParserRule getPointerTypeRule() {
		return getPointerTypeAccess().getRule();
	}
	
	//BaseType:
	//	Type;
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}
	
	//FunctionType:
	//	'func' Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//Signature:
	//	'.' Parameters result=Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters | Type;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	{Parameters} '(' (parameterlist=ParameterList ','?)? ')';
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl (',' parameterdecl+=ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	indentifierL=IdentifierList? "..."? type=Type;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//InterfaceType:
	//	{InterfaceType}
	//	'interface' '{' (methodspec+=MethodSpec ';')* '}';
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}
	
	//MethodSpec:
	//	MethodName Signature | {MethodSpec} InterfaceTypeName;
	public MethodSpecElements getMethodSpecAccess() {
		return pMethodSpec;
	}
	
	public ParserRule getMethodSpecRule() {
		return getMethodSpecAccess().getRule();
	}
	
	//MethodName:
	//	IDENTIFIER;
	public MethodNameElements getMethodNameAccess() {
		return pMethodName;
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}
	
	//InterfaceTypeName:
	//	TypeName;
	public InterfaceTypeNameElements getInterfaceTypeNameAccess() {
		return pInterfaceTypeName;
	}
	
	public ParserRule getInterfaceTypeNameRule() {
		return getInterfaceTypeNameAccess().getRule();
	}
	
	//MapType:
	//	'map' '[' keytype=KeyType ']' elemtype=ElementType;
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}
	
	//KeyType:
	//	Type;
	public KeyTypeElements getKeyTypeAccess() {
		return pKeyType;
	}
	
	public ParserRule getKeyTypeRule() {
		return getKeyTypeAccess().getRule();
	}
	
	//ChannelType:
	//	('chan' '<-'? | '<-' 'chan') elemtype=ElementType;
	public ChannelTypeElements getChannelTypeAccess() {
		return pChannelType;
	}
	
	public ParserRule getChannelTypeRule() {
		return getChannelTypeAccess().getRule();
	}
	
	//Block:
	//	'{' StatementList '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//StatementList:
	//	{StatementList} (statment+=Statement ';')*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//	{Statement} declaration=Declaration | labest=LabeledStmt | simplest=SimpleStmt | gotst=GoStmt | ReturnStmt |
	//	breakst=BreakStmt | continuest=ContinueStmt | gotost=GotoStmt | falltst=FallthroughStmt | block1=Block | if=IfStmt |
	//	switch=SwitchStmt | selectst=SelectStmt | forst=ForStmt | deferst=DeferStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Declaration:
	//	ConstDecl | TypeDecl | VarDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//LabeledStmt:
	//	Label ':' statement=Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//SimpleStmt:
	//	{SimpleStmt} EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//GoStmt:
	//	'goto' Label;
	public GoStmtElements getGoStmtAccess() {
		return pGoStmt;
	}
	
	public ParserRule getGoStmtRule() {
		return getGoStmtAccess().getRule();
	}
	
	//ReturnStmt:
	//	{ReturnStmt}
	//	'return' expressionlist=ExpressionList?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	'break' Label?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	'continue' Label?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	'goto' Label;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//IfStmt:
	//	'if' (simst=SimpleStmt ';')? expression=Expression block=Block ('else' (ifs=IfStmt | block2=Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//FallthroughStmt:
	//	'fallthrough';
	public FallthroughStmtElements getFallthroughStmtAccess() {
		return pFallthroughStmt;
	}
	
	public ParserRule getFallthroughStmtRule() {
		return getFallthroughStmtAccess().getRule();
	}
	
	//SwitchStmt:
	//	ExprSwitchStmt | TypeSwitchStmt;
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//SelectStmt:
	//	{SelectStmt}
	//	"select" '{' commclause+=CommClause* '}';
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (condition+=Condition | for+=ForClause | range+=RangeClause)* block=Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	'defer' Expression;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//ConstDecl:
	//	{ConstDecl}
	//	'const' (constspec=ConstSpec | '(' (constspec2+=ConstSpec ';')* ')');
	public ConstDeclElements getConstDeclAccess() {
		return pConstDecl;
	}
	
	public ParserRule getConstDeclRule() {
		return getConstDeclAccess().getRule();
	}
	
	//ConstSpec:
	//	IdentifierList (Type '=' expressionlist=ExpressionList);
	public ConstSpecElements getConstSpecAccess() {
		return pConstSpec;
	}
	
	public ParserRule getConstSpecRule() {
		return getConstSpecAccess().getRule();
	}
	
	//TypeDecl:
	//	{TypeDecl}
	//	'type' (typespec=TypeSpec | '(' (typespec2+=TypeSpec ';')* ')');
	public TypeDeclElements getTypeDeclAccess() {
		return pTypeDecl;
	}
	
	public ParserRule getTypeDeclRule() {
		return getTypeDeclAccess().getRule();
	}
	
	//TypeSpec:
	//	AliasDecl | TypeDef;
	public TypeSpecElements getTypeSpecAccess() {
		return pTypeSpec;
	}
	
	public ParserRule getTypeSpecRule() {
		return getTypeSpecAccess().getRule();
	}
	
	//TypeDef:
	//	IDENTIFIER Type;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//AliasDecl:
	//	IDENTIFIER '=' Type;
	public AliasDeclElements getAliasDeclAccess() {
		return pAliasDecl;
	}
	
	public ParserRule getAliasDeclRule() {
		return getAliasDeclAccess().getRule();
	}
	
	//VarDecl:
	//	{VarDecl}
	//	"var" (varspec=VarSpec | '(' (varspec2+=VarSpec ';')* ')');
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//VarSpec:
	//	IdentifierList (Type ("=" expressionlist=ExpressionList)? | "=" ExpressionList);
	public VarSpecElements getVarSpecAccess() {
		return pVarSpec;
	}
	
	public ParserRule getVarSpecRule() {
		return getVarSpecAccess().getRule();
	}
	
	//EmptyStmt:
	//	';';
	public EmptyStmtElements getEmptyStmtAccess() {
		return pEmptyStmt;
	}
	
	public ParserRule getEmptyStmtRule() {
		return getEmptyStmtAccess().getRule();
	}
	
	//ExpressionStmt:
	//	Expression;
	public ExpressionStmtElements getExpressionStmtAccess() {
		return pExpressionStmt;
	}
	
	public ParserRule getExpressionStmtRule() {
		return getExpressionStmtAccess().getRule();
	}
	
	//SendStmt:
	//	ch=Channel "<-" expression=Expression;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	//Channel:
	//	Expression;
	public ChannelElements getChannelAccess() {
		return pChannel;
	}
	
	public ParserRule getChannelRule() {
		return getChannelAccess().getRule();
	}
	
	//IncDecStmt:
	//	Expression ("++" | "--");
	public IncDecStmtElements getIncDecStmtAccess() {
		return pIncDecStmt;
	}
	
	public ParserRule getIncDecStmtRule() {
		return getIncDecStmtAccess().getRule();
	}
	
	//Assignment:
	//	expressionlist=ExpressionList ASSING_OP expressionlist2=ExpressionList;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//ShortVarDecl:
	//	IdentifierList ':=' ExpressionList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//ExprSwitchStmt:
	//	{ExprSwitchStmt}
	//	'switch' (simplestmt=SimpleStmt ';')? expression=Expression? "{" exprcase+=ExprCaseClause* "}";
	public ExprSwitchStmtElements getExprSwitchStmtAccess() {
		return pExprSwitchStmt;
	}
	
	public ParserRule getExprSwitchStmtRule() {
		return getExprSwitchStmtAccess().getRule();
	}
	
	//ExprCaseClause:
	//	ExprSwitchCase ':' statementlist=StatementList;
	public ExprCaseClauseElements getExprCaseClauseAccess() {
		return pExprCaseClause;
	}
	
	public ParserRule getExprCaseClauseRule() {
		return getExprCaseClauseAccess().getRule();
	}
	
	//ExprSwitchCase:
	//	{ExprSwitchCase}
	//	'case' expressionlist=ExpressionList | {ExprSwitchCase} 'default';
	public ExprSwitchCaseElements getExprSwitchCaseAccess() {
		return pExprSwitchCase;
	}
	
	public ParserRule getExprSwitchCaseRule() {
		return getExprSwitchCaseAccess().getRule();
	}
	
	//TypeSwitchStmt:
	//	'switch' (SimpleStmt ';')? typesg=TypeSwitchGuard '{' typecc+=TypeCaseClause* '}';
	public TypeSwitchStmtElements getTypeSwitchStmtAccess() {
		return pTypeSwitchStmt;
	}
	
	public ParserRule getTypeSwitchStmtRule() {
		return getTypeSwitchStmtAccess().getRule();
	}
	
	//TypeSwitchGuard:
	//	(IDENTIFIER ':=')? PrimaryExpr '.' '(' 'type' ')';
	public TypeSwitchGuardElements getTypeSwitchGuardAccess() {
		return pTypeSwitchGuard;
	}
	
	public ParserRule getTypeSwitchGuardRule() {
		return getTypeSwitchGuardAccess().getRule();
	}
	
	//TypeCaseClause:
	//	TypeSwitchCase ':' statementlist=StatementList;
	public TypeCaseClauseElements getTypeCaseClauseAccess() {
		return pTypeCaseClause;
	}
	
	public ParserRule getTypeCaseClauseRule() {
		return getTypeCaseClauseAccess().getRule();
	}
	
	//TypeSwitchCase:
	//	{TypeSwitchCase} 'case' typelist=TypeList | {TypeSwitchCase} 'default';
	public TypeSwitchCaseElements getTypeSwitchCaseAccess() {
		return pTypeSwitchCase;
	}
	
	public ParserRule getTypeSwitchCaseRule() {
		return getTypeSwitchCaseAccess().getRule();
	}
	
	//TypeList:
	//	type=Type (',' type2+=Type)*;
	public TypeListElements getTypeListAccess() {
		return pTypeList;
	}
	
	public ParserRule getTypeListRule() {
		return getTypeListAccess().getRule();
	}
	
	//CommClause:
	//	CommCase ':' statementlist2=StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//CommCase:
	//	{CommCase} 'case' (sendstmt=SendStmt | recvstmt=RecvStmt) | {CommCase} 'default';
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//RecvStmt:
	//	(ExpressionList "=" | IdentifierList ":=")? recvexpr=RecvExpr;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	//RecvExpr:
	//	Expression;
	public RecvExprElements getRecvExprAccess() {
		return pRecvExpr;
	}
	
	public ParserRule getRecvExprRule() {
		return getRecvExprAccess().getRule();
	}
	
	//Condition:
	//	Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ForClause:
	//	InitStmt? ';' condition=Condition? ';' poststmt=PostStmt;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//RangeClause:
	//	(expressionlist=ExpressionList "=" | IdentifierList ":=")? 'range' expression=Expression;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//InitStmt:
	//	SimpleStmt;
	public InitStmtElements getInitStmtAccess() {
		return pInitStmt;
	}
	
	public ParserRule getInitStmtRule() {
		return getInitStmtAccess().getRule();
	}
	
	//PostStmt:
	//	SimpleStmt;
	public PostStmtElements getPostStmtAccess() {
		return pPostStmt;
	}
	
	public ParserRule getPostStmtRule() {
		return getPostStmtAccess().getRule();
	}
	
	//Label:
	//	IDENTIFIER;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//ExpressionList:
	//	Expression (';' expression2+=Expression)*;
	public ExpressionListElements getExpressionListAccess() {
		return pExpressionList;
	}
	
	public ParserRule getExpressionListRule() {
		return getExpressionListAccess().getRule();
	}
	
	//Expression:
	//	UnaryExpr exp=Expression2;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression2:
	//	{Expression2} (BINARY_OP expression=Expression expression2=Expression2)?;
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//UnaryExpr:
	//	PrimaryExpr | UNARY_OP UnaryExpr;
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//PrimaryExpr:
	//	Operand pr=PrimaryExpr2 | Conversion pr=PrimaryExpr2 | MethodExpr pr=PrimaryExpr2;
	public PrimaryExprElements getPrimaryExprAccess() {
		return pPrimaryExpr;
	}
	
	public ParserRule getPrimaryExprRule() {
		return getPrimaryExprAccess().getRule();
	}
	
	//PrimaryExpr2:
	//	{PrimaryExpr2} (Selector pr=PrimaryExpr2 | index=Index pr=PrimaryExpr2 | slice=Slice pr=PrimaryExpr2 |
	//	typeass=TypeAssertion pr=PrimaryExpr2 | arguments=Arguments pr=PrimaryExpr2)?;
	public PrimaryExpr2Elements getPrimaryExpr2Access() {
		return pPrimaryExpr2;
	}
	
	public ParserRule getPrimaryExpr2Rule() {
		return getPrimaryExpr2Access().getRule();
	}
	
	//Operand:
	//	{Operand} literal=Literal | operandn=OperandName | '(' expression=Expression ')';
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//Conversion:
	//	type=Type '(' expression=Expression ','? ')';
	public ConversionElements getConversionAccess() {
		return pConversion;
	}
	
	public ParserRule getConversionRule() {
		return getConversionAccess().getRule();
	}
	
	//MethodExpr:
	//	ReceiverType '.' MethodName;
	public MethodExprElements getMethodExprAccess() {
		return pMethodExpr;
	}
	
	public ParserRule getMethodExprRule() {
		return getMethodExprAccess().getRule();
	}
	
	//Selector:
	//	'.' IDENTIFIER;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//Index:
	//	'[' expression=Expression ']';
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Slice:
	//	{Slice}
	//	'[' expression=Expression? ':' expression2=Expression? ']' |
	//	'[' expression3=Expression? ':' expression4=Expression ':' expression5=Expression ']';
	public SliceElements getSliceAccess() {
		return pSlice;
	}
	
	public ParserRule getSliceRule() {
		return getSliceAccess().getRule();
	}
	
	//TypeAssertion:
	//	'.' '(' Type ')';
	public TypeAssertionElements getTypeAssertionAccess() {
		return pTypeAssertion;
	}
	
	public ParserRule getTypeAssertionRule() {
		return getTypeAssertionAccess().getRule();
	}
	
	//Arguments:
	//	{Arguments}
	//	'(' ((expressionlist=ExpressionList | type=Type (',' expressionlist=ExpressionList)?)? '...'? ','?)? ')';
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Literal:
	//	{Literal} BasicLit | CompositeLit | FunctionLit;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//FunctionLit:
	//	'func' Signature functionbody=FunctionBody;
	public FunctionLitElements getFunctionLitAccess() {
		return pFunctionLit;
	}
	
	public ParserRule getFunctionLitRule() {
		return getFunctionLitAccess().getRule();
	}
	
	//CompositeLit:
	//	literalt=LiteralType literalv=LiteralValue;
	public CompositeLitElements getCompositeLitAccess() {
		return pCompositeLit;
	}
	
	public ParserRule getCompositeLitRule() {
		return getCompositeLitAccess().getRule();
	}
	
	//LiteralType:
	//	{LiteralType} structtype=StructType | arraytype=ArrayType | '[' '...' ']' elementype=ElementType |
	//	slicetype=SliceType | maptype=MapType | typename=TypeName;
	public LiteralTypeElements getLiteralTypeAccess() {
		return pLiteralType;
	}
	
	public ParserRule getLiteralTypeRule() {
		return getLiteralTypeAccess().getRule();
	}
	
	//LiteralValue:
	//	{LiteralValue}
	//	'{' (elementlist=ElementList ','?)? '}';
	public LiteralValueElements getLiteralValueAccess() {
		return pLiteralValue;
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}
	
	//ElementList:
	//	KeyedElement ("," keyedelement+=KeyedElement)*;
	public ElementListElements getElementListAccess() {
		return pElementList;
	}
	
	public ParserRule getElementListRule() {
		return getElementListAccess().getRule();
	}
	
	//KeyedElement:
	//	(Key ':')? element=Element;
	public KeyedElementElements getKeyedElementAccess() {
		return pKeyedElement;
	}
	
	public ParserRule getKeyedElementRule() {
		return getKeyedElementAccess().getRule();
	}
	
	//Key:
	//	{Key} FieldName | Expression | LiteralValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//FieldName:
	//	IDENTIFIER;
	public FieldNameElements getFieldNameAccess() {
		return pFieldName;
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}
	
	//Element:
	//	Expression | LiteralValue;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//BasicLit:
	//	INT_LIT | FLOAT_LIT | IMAGINARY_LIT | RUNE_LIT | STRING_LIT;
	public BasicLitElements getBasicLitAccess() {
		return pBasicLit;
	}
	
	public ParserRule getBasicLitRule() {
		return getBasicLitAccess().getRule();
	}
	
	//ReceiverType:
	//	type=Type;
	public ReceiverTypeElements getReceiverTypeAccess() {
		return pReceiverType;
	}
	
	public ParserRule getReceiverTypeRule() {
		return getReceiverTypeAccess().getRule();
	}
	
	//FunctionBody:
	//	Block;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//OperandName:
	//	IDENTIFIER | QualifiedIdent;
	public OperandNameElements getOperandNameAccess() {
		return pOperandName;
	}
	
	public ParserRule getOperandNameRule() {
		return getOperandNameAccess().getRule();
	}
	
	//ImportDecl:
	//	{ImportDecl}
	//	"import" (ImportSpec | '(' (ImportSpec ';')* ')');
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | PackageName)? ImportPath;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//ImportPath:
	//	STRING_LIT;
	public ImportPathElements getImportPathAccess() {
		return pImportPath;
	}
	
	public ParserRule getImportPathRule() {
		return getImportPathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
