/*
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.go.AliasDecl;
import org.xtext.example.mydsl.go.Arguments;
import org.xtext.example.mydsl.go.ArrayLength;
import org.xtext.example.mydsl.go.Assignment;
import org.xtext.example.mydsl.go.BaseType;
import org.xtext.example.mydsl.go.Block;
import org.xtext.example.mydsl.go.BreakStmt;
import org.xtext.example.mydsl.go.Channel;
import org.xtext.example.mydsl.go.ChannelType;
import org.xtext.example.mydsl.go.CommCase;
import org.xtext.example.mydsl.go.Compilation_initial;
import org.xtext.example.mydsl.go.CompositeLit;
import org.xtext.example.mydsl.go.Condition;
import org.xtext.example.mydsl.go.ConstDecl;
import org.xtext.example.mydsl.go.ConstSpec;
import org.xtext.example.mydsl.go.ContinueStmt;
import org.xtext.example.mydsl.go.Conversion;
import org.xtext.example.mydsl.go.Declaration;
import org.xtext.example.mydsl.go.DeferStmt;
import org.xtext.example.mydsl.go.Element;
import org.xtext.example.mydsl.go.ElementType;
import org.xtext.example.mydsl.go.ExprSwitchCase;
import org.xtext.example.mydsl.go.ExprSwitchStmt;
import org.xtext.example.mydsl.go.Expression;
import org.xtext.example.mydsl.go.Expression2;
import org.xtext.example.mydsl.go.ExpressionList;
import org.xtext.example.mydsl.go.ExpressionStmt;
import org.xtext.example.mydsl.go.FieldDecl;
import org.xtext.example.mydsl.go.FieldName;
import org.xtext.example.mydsl.go.ForClause;
import org.xtext.example.mydsl.go.ForStmt;
import org.xtext.example.mydsl.go.FunctionBody;
import org.xtext.example.mydsl.go.FunctionDecl;
import org.xtext.example.mydsl.go.FunctionLit;
import org.xtext.example.mydsl.go.FunctionName;
import org.xtext.example.mydsl.go.FunctionType;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.GoStmt;
import org.xtext.example.mydsl.go.GotoStmt;
import org.xtext.example.mydsl.go.IdentifierList;
import org.xtext.example.mydsl.go.IfStmt;
import org.xtext.example.mydsl.go.ImportDecl;
import org.xtext.example.mydsl.go.IncDecStmt;
import org.xtext.example.mydsl.go.Index;
import org.xtext.example.mydsl.go.InitStmt;
import org.xtext.example.mydsl.go.InterfaceType;
import org.xtext.example.mydsl.go.InterfaceTypeName;
import org.xtext.example.mydsl.go.Key;
import org.xtext.example.mydsl.go.KeyType;
import org.xtext.example.mydsl.go.KeyedElement;
import org.xtext.example.mydsl.go.LabeledStmt;
import org.xtext.example.mydsl.go.Literal;
import org.xtext.example.mydsl.go.LiteralType;
import org.xtext.example.mydsl.go.LiteralValue;
import org.xtext.example.mydsl.go.MapType;
import org.xtext.example.mydsl.go.MethodDecl;
import org.xtext.example.mydsl.go.MethodSpec;
import org.xtext.example.mydsl.go.Model;
import org.xtext.example.mydsl.go.Operand;
import org.xtext.example.mydsl.go.OperandName;
import org.xtext.example.mydsl.go.PackageClause;
import org.xtext.example.mydsl.go.ParameterDecl;
import org.xtext.example.mydsl.go.ParameterList;
import org.xtext.example.mydsl.go.Parameters;
import org.xtext.example.mydsl.go.PointerType;
import org.xtext.example.mydsl.go.PostStmt;
import org.xtext.example.mydsl.go.PrimaryExpr;
import org.xtext.example.mydsl.go.PrimaryExpr2;
import org.xtext.example.mydsl.go.RangeClause;
import org.xtext.example.mydsl.go.Receiver;
import org.xtext.example.mydsl.go.ReceiverType;
import org.xtext.example.mydsl.go.RecvExpr;
import org.xtext.example.mydsl.go.RecvStmt;
import org.xtext.example.mydsl.go.Result;
import org.xtext.example.mydsl.go.ReturnStmt;
import org.xtext.example.mydsl.go.SelectStmt;
import org.xtext.example.mydsl.go.SendStmt;
import org.xtext.example.mydsl.go.ShortVarDecl;
import org.xtext.example.mydsl.go.Signature;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.Slice;
import org.xtext.example.mydsl.go.SliceType;
import org.xtext.example.mydsl.go.Statement;
import org.xtext.example.mydsl.go.StatementList;
import org.xtext.example.mydsl.go.StructType;
import org.xtext.example.mydsl.go.SwitchStmt;
import org.xtext.example.mydsl.go.TopLevelDecl;
import org.xtext.example.mydsl.go.Type;
import org.xtext.example.mydsl.go.TypeDecl;
import org.xtext.example.mydsl.go.TypeDef;
import org.xtext.example.mydsl.go.TypeList;
import org.xtext.example.mydsl.go.TypeLit;
import org.xtext.example.mydsl.go.TypeSpec;
import org.xtext.example.mydsl.go.TypeSwitchCase;
import org.xtext.example.mydsl.go.TypeSwitchGuard;
import org.xtext.example.mydsl.go.TypeSwitchStmt;
import org.xtext.example.mydsl.go.UnaryExpr;
import org.xtext.example.mydsl.go.VarDecl;
import org.xtext.example.mydsl.go.VarSpec;
import org.xtext.example.mydsl.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GoPackage.ALIAS_DECL:
				sequence_AliasDecl(context, (AliasDecl) semanticObject); 
				return; 
			case GoPackage.ARGUMENTS:
				sequence_Arguments(context, (Arguments) semanticObject); 
				return; 
			case GoPackage.ARRAY_LENGTH:
				if (rule == grammarAccess.getArrayLengthRule()) {
					sequence_ArrayLength(context, (ArrayLength) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getArrayTypeRule()) {
					sequence_ArrayLength_ArrayType(context, (ArrayLength) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case GoPackage.BASE_TYPE:
				sequence_BaseType(context, (BaseType) semanticObject); 
				return; 
			case GoPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case GoPackage.BREAK_STMT:
				sequence_BreakStmt(context, (BreakStmt) semanticObject); 
				return; 
			case GoPackage.CHANNEL:
				sequence_Channel(context, (Channel) semanticObject); 
				return; 
			case GoPackage.CHANNEL_TYPE:
				sequence_ChannelType(context, (ChannelType) semanticObject); 
				return; 
			case GoPackage.COMM_CASE:
				if (rule == grammarAccess.getCommCaseRule()) {
					sequence_CommCase(context, (CommCase) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommClauseRule()) {
					sequence_CommCase_CommClause(context, (CommCase) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.COMPILATION_INITIAL:
				sequence_Compilation_initial(context, (Compilation_initial) semanticObject); 
				return; 
			case GoPackage.COMPOSITE_LIT:
				sequence_CompositeLit(context, (CompositeLit) semanticObject); 
				return; 
			case GoPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GoPackage.CONST_DECL:
				sequence_ConstDecl(context, (ConstDecl) semanticObject); 
				return; 
			case GoPackage.CONST_SPEC:
				sequence_ConstSpec(context, (ConstSpec) semanticObject); 
				return; 
			case GoPackage.CONTINUE_STMT:
				sequence_ContinueStmt(context, (ContinueStmt) semanticObject); 
				return; 
			case GoPackage.CONVERSION:
				sequence_Conversion(context, (Conversion) semanticObject); 
				return; 
			case GoPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case GoPackage.DEFER_STMT:
				sequence_DeferStmt(context, (DeferStmt) semanticObject); 
				return; 
			case GoPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case GoPackage.ELEMENT_TYPE:
				sequence_ElementType(context, (ElementType) semanticObject); 
				return; 
			case GoPackage.EXPR_SWITCH_CASE:
				if (rule == grammarAccess.getExprCaseClauseRule()) {
					sequence_ExprCaseClause_ExprSwitchCase(context, (ExprSwitchCase) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getExprSwitchCaseRule()) {
					sequence_ExprSwitchCase(context, (ExprSwitchCase) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.EXPR_SWITCH_STMT:
				sequence_ExprSwitchStmt(context, (ExprSwitchStmt) semanticObject); 
				return; 
			case GoPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case GoPackage.EXPRESSION2:
				sequence_Expression2(context, (Expression2) semanticObject); 
				return; 
			case GoPackage.EXPRESSION_LIST:
				if (rule == grammarAccess.getExpressionListRule()) {
					sequence_ExpressionList(context, (ExpressionList) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRecvStmtRule()) {
					sequence_ExpressionList_RecvStmt(context, (ExpressionList) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.EXPRESSION_STMT:
				sequence_ExpressionStmt(context, (ExpressionStmt) semanticObject); 
				return; 
			case GoPackage.FIELD_DECL:
				sequence_FieldDecl(context, (FieldDecl) semanticObject); 
				return; 
			case GoPackage.FIELD_NAME:
				sequence_FieldName(context, (FieldName) semanticObject); 
				return; 
			case GoPackage.FOR_CLAUSE:
				sequence_ForClause(context, (ForClause) semanticObject); 
				return; 
			case GoPackage.FOR_STMT:
				sequence_ForStmt(context, (ForStmt) semanticObject); 
				return; 
			case GoPackage.FUNCTION_BODY:
				sequence_FunctionBody(context, (FunctionBody) semanticObject); 
				return; 
			case GoPackage.FUNCTION_DECL:
				sequence_FunctionDecl(context, (FunctionDecl) semanticObject); 
				return; 
			case GoPackage.FUNCTION_LIT:
				sequence_FunctionLit(context, (FunctionLit) semanticObject); 
				return; 
			case GoPackage.FUNCTION_NAME:
				sequence_FunctionName(context, (FunctionName) semanticObject); 
				return; 
			case GoPackage.FUNCTION_TYPE:
				sequence_FunctionType(context, (FunctionType) semanticObject); 
				return; 
			case GoPackage.GO_STMT:
				sequence_GoStmt(context, (GoStmt) semanticObject); 
				return; 
			case GoPackage.GOTO_STMT:
				sequence_GotoStmt(context, (GotoStmt) semanticObject); 
				return; 
			case GoPackage.IDENTIFIER_LIST:
				sequence_IdentifierList(context, (IdentifierList) semanticObject); 
				return; 
			case GoPackage.IF_STMT:
				sequence_IfStmt(context, (IfStmt) semanticObject); 
				return; 
			case GoPackage.IMPORT_DECL:
				sequence_ImportDecl(context, (ImportDecl) semanticObject); 
				return; 
			case GoPackage.INC_DEC_STMT:
				sequence_IncDecStmt(context, (IncDecStmt) semanticObject); 
				return; 
			case GoPackage.INDEX:
				sequence_Index(context, (Index) semanticObject); 
				return; 
			case GoPackage.INIT_STMT:
				sequence_InitStmt(context, (InitStmt) semanticObject); 
				return; 
			case GoPackage.INTERFACE_TYPE:
				sequence_InterfaceType(context, (InterfaceType) semanticObject); 
				return; 
			case GoPackage.INTERFACE_TYPE_NAME:
				sequence_InterfaceTypeName(context, (InterfaceTypeName) semanticObject); 
				return; 
			case GoPackage.KEY:
				if (rule == grammarAccess.getElementListRule()) {
					sequence_ElementList_Key_KeyedElement(context, (Key) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKeyRule()) {
					sequence_Key(context, (Key) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKeyedElementRule()) {
					sequence_Key_KeyedElement(context, (Key) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.KEY_TYPE:
				sequence_KeyType(context, (KeyType) semanticObject); 
				return; 
			case GoPackage.KEYED_ELEMENT:
				if (rule == grammarAccess.getElementListRule()) {
					sequence_ElementList_KeyedElement(context, (KeyedElement) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getKeyedElementRule()) {
					sequence_KeyedElement(context, (KeyedElement) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.LABELED_STMT:
				sequence_LabeledStmt(context, (LabeledStmt) semanticObject); 
				return; 
			case GoPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case GoPackage.LITERAL_TYPE:
				sequence_LiteralType(context, (LiteralType) semanticObject); 
				return; 
			case GoPackage.LITERAL_VALUE:
				sequence_LiteralValue(context, (LiteralValue) semanticObject); 
				return; 
			case GoPackage.MAP_TYPE:
				sequence_MapType(context, (MapType) semanticObject); 
				return; 
			case GoPackage.METHOD_DECL:
				sequence_MethodDecl(context, (MethodDecl) semanticObject); 
				return; 
			case GoPackage.METHOD_SPEC:
				sequence_MethodSpec(context, (MethodSpec) semanticObject); 
				return; 
			case GoPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GoPackage.OPERAND:
				sequence_Operand(context, (Operand) semanticObject); 
				return; 
			case GoPackage.OPERAND_NAME:
				sequence_OperandName(context, (OperandName) semanticObject); 
				return; 
			case GoPackage.PACKAGE_CLAUSE:
				sequence_PackageClause(context, (PackageClause) semanticObject); 
				return; 
			case GoPackage.PARAMETER_DECL:
				sequence_ParameterDecl(context, (ParameterDecl) semanticObject); 
				return; 
			case GoPackage.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case GoPackage.PARAMETERS:
				sequence_Parameters(context, (Parameters) semanticObject); 
				return; 
			case GoPackage.POINTER_TYPE:
				sequence_PointerType(context, (PointerType) semanticObject); 
				return; 
			case GoPackage.POST_STMT:
				sequence_PostStmt(context, (PostStmt) semanticObject); 
				return; 
			case GoPackage.PRIMARY_EXPR:
				sequence_PrimaryExpr(context, (PrimaryExpr) semanticObject); 
				return; 
			case GoPackage.PRIMARY_EXPR2:
				sequence_PrimaryExpr2(context, (PrimaryExpr2) semanticObject); 
				return; 
			case GoPackage.RANGE_CLAUSE:
				sequence_RangeClause(context, (RangeClause) semanticObject); 
				return; 
			case GoPackage.RECEIVER:
				sequence_Receiver(context, (Receiver) semanticObject); 
				return; 
			case GoPackage.RECEIVER_TYPE:
				if (rule == grammarAccess.getMethodExprRule()) {
					sequence_MethodExpr_ReceiverType(context, (ReceiverType) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getReceiverTypeRule()) {
					sequence_ReceiverType(context, (ReceiverType) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.RECV_EXPR:
				sequence_RecvExpr(context, (RecvExpr) semanticObject); 
				return; 
			case GoPackage.RECV_STMT:
				sequence_RecvStmt(context, (RecvStmt) semanticObject); 
				return; 
			case GoPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			case GoPackage.RETURN_STMT:
				sequence_ReturnStmt(context, (ReturnStmt) semanticObject); 
				return; 
			case GoPackage.SELECT_STMT:
				sequence_SelectStmt(context, (SelectStmt) semanticObject); 
				return; 
			case GoPackage.SEND_STMT:
				sequence_SendStmt(context, (SendStmt) semanticObject); 
				return; 
			case GoPackage.SHORT_VAR_DECL:
				sequence_ShortVarDecl(context, (ShortVarDecl) semanticObject); 
				return; 
			case GoPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case GoPackage.SIMPLE_STMT:
				sequence_SimpleStmt(context, (SimpleStmt) semanticObject); 
				return; 
			case GoPackage.SLICE:
				sequence_Slice(context, (Slice) semanticObject); 
				return; 
			case GoPackage.SLICE_TYPE:
				sequence_SliceType(context, (SliceType) semanticObject); 
				return; 
			case GoPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case GoPackage.STATEMENT_LIST:
				sequence_StatementList(context, (StatementList) semanticObject); 
				return; 
			case GoPackage.STRUCT_TYPE:
				sequence_StructType(context, (StructType) semanticObject); 
				return; 
			case GoPackage.SWITCH_STMT:
				sequence_SwitchStmt(context, (SwitchStmt) semanticObject); 
				return; 
			case GoPackage.TOP_LEVEL_DECL:
				sequence_TopLevelDecl(context, (TopLevelDecl) semanticObject); 
				return; 
			case GoPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case GoPackage.TYPE_DECL:
				sequence_TypeDecl(context, (TypeDecl) semanticObject); 
				return; 
			case GoPackage.TYPE_DEF:
				sequence_TypeDef(context, (TypeDef) semanticObject); 
				return; 
			case GoPackage.TYPE_LIST:
				sequence_TypeList(context, (TypeList) semanticObject); 
				return; 
			case GoPackage.TYPE_LIT:
				sequence_TypeLit(context, (TypeLit) semanticObject); 
				return; 
			case GoPackage.TYPE_SPEC:
				sequence_TypeSpec(context, (TypeSpec) semanticObject); 
				return; 
			case GoPackage.TYPE_SWITCH_CASE:
				if (rule == grammarAccess.getTypeCaseClauseRule()) {
					sequence_TypeCaseClause_TypeSwitchCase(context, (TypeSwitchCase) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTypeSwitchCaseRule()) {
					sequence_TypeSwitchCase(context, (TypeSwitchCase) semanticObject); 
					return; 
				}
				else break;
			case GoPackage.TYPE_SWITCH_GUARD:
				sequence_TypeSwitchGuard(context, (TypeSwitchGuard) semanticObject); 
				return; 
			case GoPackage.TYPE_SWITCH_STMT:
				sequence_TypeSwitchStmt(context, (TypeSwitchStmt) semanticObject); 
				return; 
			case GoPackage.UNARY_EXPR:
				sequence_UnaryExpr(context, (UnaryExpr) semanticObject); 
				return; 
			case GoPackage.VAR_DECL:
				sequence_VarDecl(context, (VarDecl) semanticObject); 
				return; 
			case GoPackage.VAR_SPEC:
				sequence_VarSpec(context, (VarSpec) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AliasDecl returns AliasDecl
	 *
	 * Constraint:
	 *     (id=IDENTIFIER tp=Type)
	 */
	protected void sequence_AliasDecl(ISerializationContext context, AliasDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ALIAS_DECL__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ALIAS_DECL__ID));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ALIAS_DECL__TP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ALIAS_DECL__TP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAliasDeclAccess().getIdIDENTIFIERParserRuleCall_1_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getAliasDeclAccess().getTpTypeParserRuleCall_3_0(), semanticObject.getTp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Arguments returns Arguments
	 *
	 * Constraint:
	 *     (expressionlist=ExpressionList | (type=Type expressionlist=ExpressionList?))?
	 */
	protected void sequence_Arguments(ISerializationContext context, Arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ArrayLength returns ArrayLength
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_ArrayLength(ISerializationContext context, ArrayLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ARRAY_LENGTH__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ARRAY_LENGTH__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArrayLengthAccess().getExpExpressionParserRuleCall_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ArrayType returns ArrayLength
	 *
	 * Constraint:
	 *     (exp=Expression elemtype=ElementType)
	 */
	protected void sequence_ArrayLength_ArrayType(ISerializationContext context, ArrayLength semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ARRAY_LENGTH__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ARRAY_LENGTH__EXP));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ARRAY_LENGTH__ELEMTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ARRAY_LENGTH__ELEMTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getArrayLengthAccess().getExpExpressionParserRuleCall_0(), semanticObject.getExp());
		feeder.accept(grammarAccess.getArrayTypeAccess().getElemtypeElementTypeParserRuleCall_3_0(), semanticObject.getElemtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (expressionlist=ExpressionList asop=ASSING_OP expressionlist2=ExpressionList)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ASSIGNMENT__EXPRESSIONLIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ASSIGNMENT__EXPRESSIONLIST));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ASSIGNMENT__ASOP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ASSIGNMENT__ASOP));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ASSIGNMENT__EXPRESSIONLIST2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ASSIGNMENT__EXPRESSIONLIST2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getExpressionlistExpressionListParserRuleCall_1_0(), semanticObject.getExpressionlist());
		feeder.accept(grammarAccess.getAssignmentAccess().getAsopASSING_OPTerminalRuleCall_2_0(), semanticObject.getAsop());
		feeder.accept(grammarAccess.getAssignmentAccess().getExpressionlist2ExpressionListParserRuleCall_3_0(), semanticObject.getExpressionlist2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BaseType returns BaseType
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_BaseType(ISerializationContext context, BaseType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.BASE_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.BASE_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBaseTypeAccess().getTypeTypeParserRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     statlist=StatementList
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.BLOCK__STATLIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.BLOCK__STATLIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBlockAccess().getStatlistStatementListParserRuleCall_1_0(), semanticObject.getStatlist());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BreakStmt returns BreakStmt
	 *
	 * Constraint:
	 *     label=Label?
	 */
	protected void sequence_BreakStmt(ISerializationContext context, BreakStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChannelType returns ChannelType
	 *
	 * Constraint:
	 *     elemtype=ElementType
	 */
	protected void sequence_ChannelType(ISerializationContext context, ChannelType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.CHANNEL_TYPE__ELEMTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.CHANNEL_TYPE__ELEMTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannelTypeAccess().getElemtypeElementTypeParserRuleCall_1_0(), semanticObject.getElemtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Channel returns Channel
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_Channel(ISerializationContext context, Channel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.CHANNEL__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.CHANNEL__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getChannelAccess().getExpExpressionParserRuleCall_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommCase returns CommCase
	 *
	 * Constraint:
	 *     (sendstmt=SendStmt | recvstmt=RecvStmt)?
	 */
	protected void sequence_CommCase(ISerializationContext context, CommCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommClause returns CommCase
	 *
	 * Constraint:
	 *     ((sendstmt=SendStmt | recvstmt=RecvStmt)? statementlist2=StatementList)
	 */
	protected void sequence_CommCase_CommClause(ISerializationContext context, CommCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Compilation_initial returns Compilation_initial
	 *
	 * Constraint:
	 *     (initial=PackageClause importdecl+=ImportDecl* toplevel+=TopLevelDecl*)?
	 */
	protected void sequence_Compilation_initial(ISerializationContext context, Compilation_initial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositeLit returns CompositeLit
	 *
	 * Constraint:
	 *     (literalt=LiteralType literalv=LiteralValue)
	 */
	protected void sequence_CompositeLit(ISerializationContext context, CompositeLit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.COMPOSITE_LIT__LITERALT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.COMPOSITE_LIT__LITERALT));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.COMPOSITE_LIT__LITERALV) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.COMPOSITE_LIT__LITERALV));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompositeLitAccess().getLiteraltLiteralTypeParserRuleCall_0_0(), semanticObject.getLiteralt());
		feeder.accept(grammarAccess.getCompositeLitAccess().getLiteralvLiteralValueParserRuleCall_1_0(), semanticObject.getLiteralv());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.CONDITION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.CONDITION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getExpExpressionParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstDecl returns ConstDecl
	 *
	 * Constraint:
	 *     (constspec=ConstSpec | constspec2+=ConstSpec+)?
	 */
	protected void sequence_ConstDecl(ISerializationContext context, ConstDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstSpec returns ConstSpec
	 *
	 * Constraint:
	 *     (id=IdentifierList (tp=Type? expressionlist=ExpressionList)?)
	 */
	protected void sequence_ConstSpec(ISerializationContext context, ConstSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ContinueStmt returns ContinueStmt
	 *
	 * Constraint:
	 *     label=Label?
	 */
	protected void sequence_ContinueStmt(ISerializationContext context, ContinueStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Conversion returns Conversion
	 *
	 * Constraint:
	 *     (type=Type expression=Expression)
	 */
	protected void sequence_Conversion(ISerializationContext context, Conversion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.CONVERSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.CONVERSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.CONVERSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.CONVERSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConversionAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getConversionAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Declaration returns Declaration
	 *
	 * Constraint:
	 *     (const=ConstDecl | tye=TypeDecl | var=VarDecl)
	 */
	protected void sequence_Declaration(ISerializationContext context, Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DeferStmt returns DeferStmt
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_DeferStmt(ISerializationContext context, DeferStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.DEFER_STMT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.DEFER_STMT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeferStmtAccess().getExpExpressionParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ElementList returns Key
	 *
	 * Constraint:
	 *     ((fieldn=FieldName | exp=Expression | ltv=LiteralValue) element=Element keyedelement+=KeyedElement*)
	 */
	protected void sequence_ElementList_Key_KeyedElement(ISerializationContext context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementList returns KeyedElement
	 *
	 * Constraint:
	 *     (element=Element keyedelement+=KeyedElement*)
	 */
	protected void sequence_ElementList_KeyedElement(ISerializationContext context, KeyedElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementType returns ElementType
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_ElementType(ISerializationContext context, ElementType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.ELEMENT_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.ELEMENT_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElementTypeAccess().getTypeTypeParserRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (exp=Expression | ltv=LiteralValue)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprCaseClause returns ExprSwitchCase
	 *
	 * Constraint:
	 *     (expressionlist=ExpressionList? statementlist=StatementList)
	 */
	protected void sequence_ExprCaseClause_ExprSwitchCase(ISerializationContext context, ExprSwitchCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprSwitchCase returns ExprSwitchCase
	 *
	 * Constraint:
	 *     expressionlist=ExpressionList?
	 */
	protected void sequence_ExprSwitchCase(ISerializationContext context, ExprSwitchCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprSwitchStmt returns ExprSwitchStmt
	 *
	 * Constraint:
	 *     (simplestmt=SimpleStmt? expression=Expression? exprcase+=ExprCaseClause*)
	 */
	protected void sequence_ExprSwitchStmt(ISerializationContext context, ExprSwitchStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression2 returns Expression2
	 *
	 * Constraint:
	 *     (bop=BINARY_OP expression=Expression expression2=Expression2)?
	 */
	protected void sequence_Expression2(ISerializationContext context, Expression2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionList returns ExpressionList
	 *
	 * Constraint:
	 *     (exp=Expression expression2+=Expression*)
	 */
	protected void sequence_ExpressionList(ISerializationContext context, ExpressionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RecvStmt returns ExpressionList
	 *
	 * Constraint:
	 *     (exp=Expression expression2+=Expression* recvexpr=RecvExpr)
	 */
	protected void sequence_ExpressionList_RecvStmt(ISerializationContext context, ExpressionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpressionStmt returns ExpressionStmt
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_ExpressionStmt(ISerializationContext context, ExpressionStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.EXPRESSION_STMT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.EXPRESSION_STMT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionStmtAccess().getExpExpressionParserRuleCall_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (up=UnaryExpr exp=Expression2)
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.EXPRESSION__UP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.EXPRESSION__UP));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.EXPRESSION__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.EXPRESSION__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getUpUnaryExprParserRuleCall_1_0(), semanticObject.getUp());
		feeder.accept(grammarAccess.getExpressionAccess().getExpExpression2ParserRuleCall_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FieldDecl returns FieldDecl
	 *
	 * Constraint:
	 *     (((indentifierL=IdentifierList type=Type) | embedded=EmbeddedField) tag=Tag?)
	 */
	protected void sequence_FieldDecl(ISerializationContext context, FieldDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldName returns FieldName
	 *
	 * Constraint:
	 *     id=IDENTIFIER
	 */
	protected void sequence_FieldName(ISerializationContext context, FieldName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FIELD_NAME__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FIELD_NAME__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFieldNameAccess().getIdIDENTIFIERParserRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ForClause returns ForClause
	 *
	 * Constraint:
	 *     (init=InitStmt? condition=Condition? poststmt=PostStmt?)
	 */
	protected void sequence_ForClause(ISerializationContext context, ForClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForStmt returns ForStmt
	 *
	 * Constraint:
	 *     ((condition=Condition | for=ForClause | range=RangeClause)? block=Block)
	 */
	protected void sequence_ForStmt(ISerializationContext context, ForStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBody returns FunctionBody
	 *
	 * Constraint:
	 *     block=Block
	 */
	protected void sequence_FunctionBody(ISerializationContext context, FunctionBody semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FUNCTION_BODY__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FUNCTION_BODY__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionBodyAccess().getBlockBlockParserRuleCall_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDecl returns FunctionDecl
	 *
	 * Constraint:
	 *     (functionn=FunctionName signature=Signature body+=FunctionBody?)
	 */
	protected void sequence_FunctionDecl(ISerializationContext context, FunctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionLit returns FunctionLit
	 *
	 * Constraint:
	 *     (signature=Signature functionbody=FunctionBody)
	 */
	protected void sequence_FunctionLit(ISerializationContext context, FunctionLit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FUNCTION_LIT__SIGNATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FUNCTION_LIT__SIGNATURE));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FUNCTION_LIT__FUNCTIONBODY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FUNCTION_LIT__FUNCTIONBODY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionLitAccess().getSignatureSignatureParserRuleCall_1_0(), semanticObject.getSignature());
		feeder.accept(grammarAccess.getFunctionLitAccess().getFunctionbodyFunctionBodyParserRuleCall_2_0(), semanticObject.getFunctionbody());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionName returns FunctionName
	 *
	 * Constraint:
	 *     id=IDENTIFIER
	 */
	protected void sequence_FunctionName(ISerializationContext context, FunctionName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FUNCTION_NAME__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FUNCTION_NAME__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionNameAccess().getIdIDENTIFIERParserRuleCall_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionType returns FunctionType
	 *
	 * Constraint:
	 *     signature=Signature
	 */
	protected void sequence_FunctionType(ISerializationContext context, FunctionType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.FUNCTION_TYPE__SIGNATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.FUNCTION_TYPE__SIGNATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionTypeAccess().getSignatureSignatureParserRuleCall_1_0(), semanticObject.getSignature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GoStmt returns GoStmt
	 *
	 * Constraint:
	 *     label=Label
	 */
	protected void sequence_GoStmt(ISerializationContext context, GoStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.GO_STMT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.GO_STMT__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoStmtAccess().getLabelLabelParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GotoStmt returns GotoStmt
	 *
	 * Constraint:
	 *     label=Label
	 */
	protected void sequence_GotoStmt(ISerializationContext context, GotoStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.GOTO_STMT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.GOTO_STMT__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGotoStmtAccess().getLabelLabelParserRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IdentifierList returns IdentifierList
	 *
	 * Constraint:
	 *     (id=IDENTIFIER id2+=IDENTIFIER*)
	 */
	protected void sequence_IdentifierList(ISerializationContext context, IdentifierList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IfStmt returns IfStmt
	 *
	 * Constraint:
	 *     (simst=SimpleStmt? expression=Expression block=Block (ifs=IfStmt | block2=Block)?)
	 */
	protected void sequence_IfStmt(ISerializationContext context, IfStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImportDecl returns ImportDecl
	 *
	 * Constraint:
	 *     (imports+=ImportSpec | imports2+=ImportSpec+)?
	 */
	protected void sequence_ImportDecl(ISerializationContext context, ImportDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IncDecStmt returns IncDecStmt
	 *
	 * Constraint:
	 *     (exp=Expression | exp2=Expression)
	 */
	protected void sequence_IncDecStmt(ISerializationContext context, IncDecStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Index returns Index
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Index(ISerializationContext context, Index semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.INDEX__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.INDEX__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIndexAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitStmt returns InitStmt
	 *
	 * Constraint:
	 *     simple=SimpleStmt
	 */
	protected void sequence_InitStmt(ISerializationContext context, InitStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.INIT_STMT__SIMPLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.INIT_STMT__SIMPLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitStmtAccess().getSimpleSimpleStmtParserRuleCall_0(), semanticObject.getSimple());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceTypeName returns InterfaceTypeName
	 *
	 * Constraint:
	 *     typen=TypeName
	 */
	protected void sequence_InterfaceTypeName(ISerializationContext context, InterfaceTypeName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.INTERFACE_TYPE_NAME__TYPEN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.INTERFACE_TYPE_NAME__TYPEN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInterfaceTypeNameAccess().getTypenTypeNameParserRuleCall_0(), semanticObject.getTypen());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceType returns InterfaceType
	 *
	 * Constraint:
	 *     methodspec+=MethodSpec*
	 */
	protected void sequence_InterfaceType(ISerializationContext context, InterfaceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyType returns KeyType
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_KeyType(ISerializationContext context, KeyType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.KEY_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.KEY_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyTypeAccess().getTypeTypeParserRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Key returns Key
	 *
	 * Constraint:
	 *     (fieldn=FieldName | exp=Expression | ltv=LiteralValue)
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyedElement returns Key
	 *
	 * Constraint:
	 *     ((fieldn=FieldName | exp=Expression | ltv=LiteralValue) element=Element)
	 */
	protected void sequence_Key_KeyedElement(ISerializationContext context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     KeyedElement returns KeyedElement
	 *
	 * Constraint:
	 *     element=Element
	 */
	protected void sequence_KeyedElement(ISerializationContext context, KeyedElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.KEYED_ELEMENT__ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.KEYED_ELEMENT__ELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyedElementAccess().getElementElementParserRuleCall_1_0(), semanticObject.getElement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LabeledStmt returns LabeledStmt
	 *
	 * Constraint:
	 *     (label=Label statement=Statement)
	 */
	protected void sequence_LabeledStmt(ISerializationContext context, LabeledStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.LABELED_STMT__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.LABELED_STMT__LABEL));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.LABELED_STMT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.LABELED_STMT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabeledStmtAccess().getLabelLabelParserRuleCall_0_0(), semanticObject.getLabel());
		feeder.accept(grammarAccess.getLabeledStmtAccess().getStatementStatementParserRuleCall_2_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LiteralType returns LiteralType
	 *
	 * Constraint:
	 *     (
	 *         structtype=StructType | 
	 *         arraytype=ArrayType | 
	 *         elementype=ElementType | 
	 *         slicetype=SliceType | 
	 *         maptype=MapType | 
	 *         typename=TypeName
	 *     )
	 */
	protected void sequence_LiteralType(ISerializationContext context, LiteralType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LiteralValue returns LiteralValue
	 *
	 * Constraint:
	 *     elementlist=ElementList?
	 */
	protected void sequence_LiteralValue(ISerializationContext context, LiteralValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (basic=BasicLit | cl=CompositeLit | fl=FunctionLit)
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MapType returns MapType
	 *
	 * Constraint:
	 *     (keytype=KeyType elemtype=ElementType)
	 */
	protected void sequence_MapType(ISerializationContext context, MapType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.MAP_TYPE__KEYTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.MAP_TYPE__KEYTYPE));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.MAP_TYPE__ELEMTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.MAP_TYPE__ELEMTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMapTypeAccess().getKeytypeKeyTypeParserRuleCall_2_0(), semanticObject.getKeytype());
		feeder.accept(grammarAccess.getMapTypeAccess().getElemtypeElementTypeParserRuleCall_4_0(), semanticObject.getElemtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MethodDecl returns MethodDecl
	 *
	 * Constraint:
	 *     (receiver=Receiver method=MethodName signature=Signature body+=FunctionBody?)
	 */
	protected void sequence_MethodDecl(ISerializationContext context, MethodDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MethodExpr returns ReceiverType
	 *
	 * Constraint:
	 *     (type=Type methodn=MethodName)
	 */
	protected void sequence_MethodExpr_ReceiverType(ISerializationContext context, ReceiverType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RECEIVER_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RECEIVER_TYPE__TYPE));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RECEIVER_TYPE__METHODN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RECEIVER_TYPE__METHODN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReceiverTypeAccess().getTypeTypeParserRuleCall_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getMethodExprAccess().getMethodnMethodNameParserRuleCall_2_0(), semanticObject.getMethodn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MethodSpec returns MethodSpec
	 *
	 * Constraint:
	 *     ((mn=MethodName signature=Signature) | itn=InterfaceTypeName)
	 */
	protected void sequence_MethodSpec(ISerializationContext context, MethodSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     greetings+=Compilation_initial
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperandName returns OperandName
	 *
	 * Constraint:
	 *     (id=IDENTIFIER | qi=QualifiedIdent)
	 */
	protected void sequence_OperandName(ISerializationContext context, OperandName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operand returns Operand
	 *
	 * Constraint:
	 *     (literal=Literal | operandn=OperandName | expression=Expression)
	 */
	protected void sequence_Operand(ISerializationContext context, Operand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PackageClause returns PackageClause
	 *
	 * Constraint:
	 *     package=PackageName
	 */
	protected void sequence_PackageClause(ISerializationContext context, PackageClause semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.PACKAGE_CLAUSE__PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.PACKAGE_CLAUSE__PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackageClauseAccess().getPackagePackageNameParserRuleCall_1_0(), semanticObject.getPackage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ParameterDecl returns ParameterDecl
	 *
	 * Constraint:
	 *     (identifierL=IdentifierList? type=Type?)
	 */
	protected void sequence_ParameterDecl(ISerializationContext context, ParameterDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterList returns ParameterList
	 *
	 * Constraint:
	 *     (parameterDecl1=ParameterDecl parameterdecl+=ParameterDecl*)
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameters returns Parameters
	 *
	 * Constraint:
	 *     parameterlist=ParameterList?
	 */
	protected void sequence_Parameters(ISerializationContext context, Parameters semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PointerType returns PointerType
	 *
	 * Constraint:
	 *     basetype=BaseType
	 */
	protected void sequence_PointerType(ISerializationContext context, PointerType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.POINTER_TYPE__BASETYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.POINTER_TYPE__BASETYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointerTypeAccess().getBasetypeBaseTypeParserRuleCall_1_0(), semanticObject.getBasetype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PostStmt returns PostStmt
	 *
	 * Constraint:
	 *     simple=SimpleStmt
	 */
	protected void sequence_PostStmt(ISerializationContext context, PostStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.POST_STMT__SIMPLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.POST_STMT__SIMPLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPostStmtAccess().getSimpleSimpleStmtParserRuleCall_1_0(), semanticObject.getSimple());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryExpr2 returns PrimaryExpr2
	 *
	 * Constraint:
	 *     (
	 *         (selector=Selector pr=PrimaryExpr2) | 
	 *         (index=Index pr=PrimaryExpr2) | 
	 *         (slice=Slice pr=PrimaryExpr2) | 
	 *         (typeass=TypeAssertion pr=PrimaryExpr2) | 
	 *         (arguments=Arguments pr=PrimaryExpr2)
	 *     )?
	 */
	protected void sequence_PrimaryExpr2(ISerializationContext context, PrimaryExpr2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryExpr returns PrimaryExpr
	 *
	 * Constraint:
	 *     ((op=Operand pr=PrimaryExpr2) | (con=Conversion pr=PrimaryExpr2) | (me=MethodExpr pr=PrimaryExpr2))
	 */
	protected void sequence_PrimaryExpr(ISerializationContext context, PrimaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RangeClause returns RangeClause
	 *
	 * Constraint:
	 *     ((expressionlist=ExpressionList | idl=IdentifierList)? expression=Expression)
	 */
	protected void sequence_RangeClause(ISerializationContext context, RangeClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReceiverType returns ReceiverType
	 *
	 * Constraint:
	 *     type=Type
	 */
	protected void sequence_ReceiverType(ISerializationContext context, ReceiverType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RECEIVER_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RECEIVER_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReceiverTypeAccess().getTypeTypeParserRuleCall_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Receiver returns Receiver
	 *
	 * Constraint:
	 *     parameters=Parameters
	 */
	protected void sequence_Receiver(ISerializationContext context, Receiver semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RECEIVER__PARAMETERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RECEIVER__PARAMETERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReceiverAccess().getParametersParametersParserRuleCall_0(), semanticObject.getParameters());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RecvExpr returns RecvExpr
	 *
	 * Constraint:
	 *     exp=Expression
	 */
	protected void sequence_RecvExpr(ISerializationContext context, RecvExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.RECV_EXPR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.RECV_EXPR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRecvExprAccess().getExpExpressionParserRuleCall_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RecvStmt returns RecvStmt
	 *
	 * Constraint:
	 *     (idl=IdentifierList? recvexpr=RecvExpr)
	 */
	protected void sequence_RecvStmt(ISerializationContext context, RecvStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Result returns Result
	 *
	 * Constraint:
	 *     (parameteres=Parameters | type=Type)
	 */
	protected void sequence_Result(ISerializationContext context, Result semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns ReturnStmt
	 *     ReturnStmt returns ReturnStmt
	 *
	 * Constraint:
	 *     expressionlist=ExpressionList?
	 */
	protected void sequence_ReturnStmt(ISerializationContext context, ReturnStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectStmt returns SelectStmt
	 *
	 * Constraint:
	 *     commclause+=CommClause*
	 */
	protected void sequence_SelectStmt(ISerializationContext context, SelectStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SendStmt returns SendStmt
	 *
	 * Constraint:
	 *     (ch=Channel expression=Expression)
	 */
	protected void sequence_SendStmt(ISerializationContext context, SendStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SEND_STMT__CH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SEND_STMT__CH));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SEND_STMT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SEND_STMT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSendStmtAccess().getChChannelParserRuleCall_1_0(), semanticObject.getCh());
		feeder.accept(grammarAccess.getSendStmtAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ShortVarDecl returns ShortVarDecl
	 *
	 * Constraint:
	 *     (idl=IdentifierList epl=ExpressionList)
	 */
	protected void sequence_ShortVarDecl(ISerializationContext context, ShortVarDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SHORT_VAR_DECL__IDL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SHORT_VAR_DECL__IDL));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SHORT_VAR_DECL__EPL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SHORT_VAR_DECL__EPL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShortVarDeclAccess().getIdlIdentifierListParserRuleCall_1_0(), semanticObject.getIdl());
		feeder.accept(grammarAccess.getShortVarDeclAccess().getEplExpressionListParserRuleCall_3_0(), semanticObject.getEpl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (parameters=Parameters result=Result?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleStmt returns SimpleStmt
	 *
	 * Constraint:
	 *     (
	 *         inc=IncDecStmt | 
	 *         ass=Assignment | 
	 *         ss=SendStmt | 
	 *         svd=ShortVarDecl | 
	 *         es=ExpressionStmt | 
	 *         empty=EmptyStmt
	 *     )
	 */
	protected void sequence_SimpleStmt(ISerializationContext context, SimpleStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SliceType returns SliceType
	 *
	 * Constraint:
	 *     elemtype=ElementType
	 */
	protected void sequence_SliceType(ISerializationContext context, SliceType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.SLICE_TYPE__ELEMTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.SLICE_TYPE__ELEMTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSliceTypeAccess().getElemtypeElementTypeParserRuleCall_2_0(), semanticObject.getElemtype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Slice returns Slice
	 *
	 * Constraint:
	 *     ((expression=Expression? expression2=Expression?) | (expression3=Expression? expression4=Expression expression5=Expression))
	 */
	protected void sequence_Slice(ISerializationContext context, Slice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StatementList returns StatementList
	 *
	 * Constraint:
	 *     statment+=Statement*
	 */
	protected void sequence_StatementList(ISerializationContext context, StatementList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (
	 *         declaration=Declaration | 
	 *         labest=LabeledStmt | 
	 *         simplest=SimpleStmt | 
	 *         gotst=GoStmt | 
	 *         breakst=BreakStmt | 
	 *         continuest=ContinueStmt | 
	 *         gotost=GotoStmt | 
	 *         falltst=FallthroughStmt | 
	 *         block1=Block | 
	 *         if=IfStmt | 
	 *         switch=SwitchStmt | 
	 *         selectst=SelectStmt | 
	 *         forst=ForStmt | 
	 *         deferst=DeferStmt
	 *     )
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructType returns StructType
	 *
	 * Constraint:
	 *     fielddecl+=FieldDecl*
	 */
	protected void sequence_StructType(ISerializationContext context, StructType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SwitchStmt returns SwitchStmt
	 *
	 * Constraint:
	 *     (expstmt=ExprSwitchStmt | typess=TypeSwitchStmt)
	 */
	protected void sequence_SwitchStmt(ISerializationContext context, SwitchStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TopLevelDecl returns TopLevelDecl
	 *
	 * Constraint:
	 *     (declaration=Declaration | functiondecl=FunctionDecl | methoddecl=MethodDecl)
	 */
	protected void sequence_TopLevelDecl(ISerializationContext context, TopLevelDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeCaseClause returns TypeSwitchCase
	 *
	 * Constraint:
	 *     (typelist=TypeList? statementlist=StatementList)
	 */
	protected void sequence_TypeCaseClause_TypeSwitchCase(ISerializationContext context, TypeSwitchCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDecl returns TypeDecl
	 *
	 * Constraint:
	 *     (typespec=TypeSpec | typespec2+=TypeSpec+)?
	 */
	protected void sequence_TypeDecl(ISerializationContext context, TypeDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDef returns TypeDef
	 *
	 * Constraint:
	 *     (id=IDENTIFIER tp=Type)
	 */
	protected void sequence_TypeDef(ISerializationContext context, TypeDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.TYPE_DEF__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.TYPE_DEF__ID));
			if (transientValues.isValueTransient(semanticObject, GoPackage.Literals.TYPE_DEF__TP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GoPackage.Literals.TYPE_DEF__TP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeDefAccess().getIdIDENTIFIERParserRuleCall_0_0(), semanticObject.getId());
		feeder.accept(grammarAccess.getTypeDefAccess().getTpTypeParserRuleCall_1_0(), semanticObject.getTp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeList returns TypeList
	 *
	 * Constraint:
	 *     (type=Type type2+=Type*)
	 */
	protected void sequence_TypeList(ISerializationContext context, TypeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeLit returns TypeLit
	 *
	 * Constraint:
	 *     (
	 *         array=ArrayType | 
	 *         struct=StructType | 
	 *         pointer=PointerType | 
	 *         function=FunctionType | 
	 *         intype=InterfaceType | 
	 *         slice=SliceType | 
	 *         map=MapType | 
	 *         channel=ChannelType
	 *     )
	 */
	protected void sequence_TypeLit(ISerializationContext context, TypeLit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSpec returns TypeSpec
	 *
	 * Constraint:
	 *     (aliasdecl=AliasDecl | typed=TypeDef)
	 */
	protected void sequence_TypeSpec(ISerializationContext context, TypeSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSwitchCase returns TypeSwitchCase
	 *
	 * Constraint:
	 *     typelist=TypeList?
	 */
	protected void sequence_TypeSwitchCase(ISerializationContext context, TypeSwitchCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSwitchGuard returns TypeSwitchGuard
	 *
	 * Constraint:
	 *     (id=IDENTIFIER? per=PrimaryExpr)
	 */
	protected void sequence_TypeSwitchGuard(ISerializationContext context, TypeSwitchGuard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeSwitchStmt returns TypeSwitchStmt
	 *
	 * Constraint:
	 *     (simplestm=SimpleStmt? typesg=TypeSwitchGuard typecc+=TypeCaseClause*)
	 */
	protected void sequence_TypeSwitchStmt(ISerializationContext context, TypeSwitchStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *     TypeAssertion returns Type
	 *
	 * Constraint:
	 *     (tp=TypeName | tp2=TypeLit | tp3=Type)
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UnaryExpr returns UnaryExpr
	 *
	 * Constraint:
	 *     (primary=PrimaryExpr | (up=UNARY_OP ue=UnaryExpr))
	 */
	protected void sequence_UnaryExpr(ISerializationContext context, UnaryExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDecl returns VarDecl
	 *
	 * Constraint:
	 *     (varspec=VarSpec | varspec2+=VarSpec+)?
	 */
	protected void sequence_VarDecl(ISerializationContext context, VarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarSpec returns VarSpec
	 *
	 * Constraint:
	 *     (id=IdentifierList tp2=Type? expressionlist=ExpressionList?)
	 */
	protected void sequence_VarSpec(ISerializationContext context, VarSpec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
