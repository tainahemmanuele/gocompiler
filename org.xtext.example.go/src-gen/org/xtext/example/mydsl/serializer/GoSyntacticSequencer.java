/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Arguments_CommaKeyword_2_2_q;
	protected AbstractElementAlias match_Arguments_FullStopFullStopFullStopKeyword_2_1_q;
	protected AbstractElementAlias match_ChannelType___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1_q___or___LessThanSignHyphenMinusKeyword_0_1_0_ChanKeyword_0_1_1__;
	protected AbstractElementAlias match_Conversion_CommaKeyword_3_q;
	protected AbstractElementAlias match_FunctionType_Type___LeftParenthesisKeyword_2_0_a_FuncKeyword_0__q;
	protected AbstractElementAlias match_IncDecStmt_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0;
	protected AbstractElementAlias match_LiteralValue_CommaKeyword_2_1_q;
	protected AbstractElementAlias match_ParameterDecl_FullStopFullStopFullStopKeyword_1_q;
	protected AbstractElementAlias match_Parameters_CommaKeyword_2_1_q;
	protected AbstractElementAlias match_StatementList_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_Type_LeftParenthesisKeyword_2_0_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GoGrammarAccess) access;
		match_Arguments_CommaKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getArgumentsAccess().getCommaKeyword_2_2());
		match_Arguments_FullStopFullStopFullStopKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getArgumentsAccess().getFullStopFullStopFullStopKeyword_2_1());
		match_ChannelType___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1_q___or___LessThanSignHyphenMinusKeyword_0_1_0_ChanKeyword_0_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChannelTypeAccess().getChanKeyword_0_0_0()), new TokenAlias(false, true, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getChannelTypeAccess().getLessThanSignHyphenMinusKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getChannelTypeAccess().getChanKeyword_0_1_1())));
		match_Conversion_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getConversionAccess().getCommaKeyword_3());
		match_FunctionType_Type___LeftParenthesisKeyword_2_0_a_FuncKeyword_0__q = new GroupAlias(false, true, new TokenAlias(true, true, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getFunctionTypeAccess().getFuncKeyword_0()));
		match_IncDecStmt_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIncDecStmtAccess().getHyphenMinusHyphenMinusKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getIncDecStmtAccess().getPlusSignPlusSignKeyword_1_0()));
		match_LiteralValue_CommaKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getLiteralValueAccess().getCommaKeyword_2_1());
		match_ParameterDecl_FullStopFullStopFullStopKeyword_1_q = new TokenAlias(false, true, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
		match_Parameters_CommaKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getParametersAccess().getCommaKeyword_2_1());
		match_StatementList_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getStatementListAccess().getSemicolonKeyword_1_1());
		match_Type_LeftParenthesisKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getTypeAccess().getLeftParenthesisKeyword_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Arguments_CommaKeyword_2_2_q.equals(syntax))
				emit_Arguments_CommaKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Arguments_FullStopFullStopFullStopKeyword_2_1_q.equals(syntax))
				emit_Arguments_FullStopFullStopFullStopKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ChannelType___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1_q___or___LessThanSignHyphenMinusKeyword_0_1_0_ChanKeyword_0_1_1__.equals(syntax))
				emit_ChannelType___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1_q___or___LessThanSignHyphenMinusKeyword_0_1_0_ChanKeyword_0_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Conversion_CommaKeyword_3_q.equals(syntax))
				emit_Conversion_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionType_Type___LeftParenthesisKeyword_2_0_a_FuncKeyword_0__q.equals(syntax))
				emit_FunctionType_Type___LeftParenthesisKeyword_2_0_a_FuncKeyword_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IncDecStmt_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0.equals(syntax))
				emit_IncDecStmt_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LiteralValue_CommaKeyword_2_1_q.equals(syntax))
				emit_LiteralValue_CommaKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParameterDecl_FullStopFullStopFullStopKeyword_1_q.equals(syntax))
				emit_ParameterDecl_FullStopFullStopFullStopKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameters_CommaKeyword_2_1_q.equals(syntax))
				emit_Parameters_CommaKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementList_SemicolonKeyword_1_1_q.equals(syntax))
				emit_StatementList_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Type_LeftParenthesisKeyword_2_0_a.equals(syntax))
				emit_Type_LeftParenthesisKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' '...'? (ambiguity) ')' (rule start)
	 *     expressionlist=ExpressionList '...'? (ambiguity) ')' (rule end)
	 *     type=Type '...'? (ambiguity) ')' (rule end)
	 */
	protected void emit_Arguments_CommaKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '...'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ','? ')' (rule start)
	 *     expressionlist=ExpressionList (ambiguity) ','? ')' (rule end)
	 *     type=Type (ambiguity) ','? ')' (rule end)
	 */
	protected void emit_Arguments_FullStopFullStopFullStopKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('chan' '<-'?) | ('<-' 'chan')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) elemtype=ElementType
	 *     (rule start) '.' '(' '('* (ambiguity) elemtype=ElementType
	 *     (rule start) (ambiguity) elemtype=ElementType
	 */
	protected void emit_ChannelType___ChanKeyword_0_0_0_LessThanSignHyphenMinusKeyword_0_0_1_q___or___LessThanSignHyphenMinusKeyword_0_1_0_ChanKeyword_0_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression (ambiguity) ')' (rule end)
	 *     expression=Expression (ambiguity) ')' pr=PrimaryExpr2
	 */
	protected void emit_Conversion_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('('* 'func')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '(' ')' (rule start)
	 *     (rule start) (ambiguity) '(' ')' result=Result
	 *     (rule start) (ambiguity) '(' parameterlist=ParameterList
	 */
	protected void emit_FunctionType_Type___LeftParenthesisKeyword_2_0_a_FuncKeyword_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '++' | '--'
	 *
	 * This ambiguous syntax occurs at:
	 *     exp=Expression2 (ambiguity) (rule end)
	 */
	protected void emit_IncDecStmt_HyphenMinusHyphenMinusKeyword_1_1_or_PlusSignPlusSignKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     elementlist=ElementList (ambiguity) '}' ':' element=Element
	 *     elementlist=ElementList (ambiguity) '}' (rule end)
	 */
	protected void emit_LiteralValue_CommaKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '...'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=Type
	 *     indentifierL=IdentifierList (ambiguity) type=Type
	 */
	protected void emit_ParameterDecl_FullStopFullStopFullStopKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameterlist=ParameterList (ambiguity) ')' ')' (rule end)
	 *     parameterlist=ParameterList (ambiguity) ')' (rule end)
	 *     parameterlist=ParameterList (ambiguity) ')' functionbody=FunctionBody
	 *     parameterlist=ParameterList (ambiguity) ')' result=Result
	 */
	protected void emit_Parameters_CommaKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     statment+=Statement (ambiguity) '}' (rule end)
	 *     statment+=Statement (ambiguity) (rule end)
	 *     statment+=Statement (ambiguity) statment+=Statement
	 */
	protected void emit_StatementList_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '.' '(' (ambiguity) '*' basetype=BaseType
	 *     (rule start) '.' '(' (ambiguity) '[' ']' elemtype=ElementType
	 *     (rule start) '.' '(' (ambiguity) '[' up=UnaryExpr
	 *     (rule start) '.' '(' (ambiguity) 'func' '(' ')' ')' (rule start)
	 *     (rule start) '.' '(' (ambiguity) 'func' '(' ')' result=Result
	 *     (rule start) '.' '(' (ambiguity) 'func' '(' parameterlist=ParameterList
	 *     (rule start) '.' '(' (ambiguity) 'interface' '{' '}' ')' (rule start)
	 *     (rule start) '.' '(' (ambiguity) 'interface' '{' methodspec+=MethodSpec
	 *     (rule start) '.' '(' (ambiguity) 'map' '[' keytype=KeyType
	 *     (rule start) '.' '(' (ambiguity) 'struct' '{' '}' ')' (rule start)
	 *     (rule start) '.' '(' (ambiguity) 'struct' '{' fielddecl+=FieldDecl
	 *     (rule start) '.' '(' (ambiguity) (('chan' '<-'?) | ('<-' 'chan')) elemtype=ElementType
	 *     (rule start) '.' '(' (ambiguity) tp=TypeName
	 *     (rule start) (ambiguity) '*' basetype=BaseType
	 *     (rule start) (ambiguity) '[' ']' elemtype=ElementType
	 *     (rule start) (ambiguity) '[' up=UnaryExpr
	 *     (rule start) (ambiguity) 'func' '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'func' '(' ')' result=Result
	 *     (rule start) (ambiguity) 'func' '(' parameterlist=ParameterList
	 *     (rule start) (ambiguity) 'interface' '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'interface' '{' methodspec+=MethodSpec
	 *     (rule start) (ambiguity) 'map' '[' keytype=KeyType
	 *     (rule start) (ambiguity) 'struct' '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'struct' '{' fielddecl+=FieldDecl
	 *     (rule start) (ambiguity) (('chan' '<-'?) | ('<-' 'chan')) elemtype=ElementType
	 *     (rule start) (ambiguity) tp=TypeName
	 */
	protected void emit_Type_LeftParenthesisKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
