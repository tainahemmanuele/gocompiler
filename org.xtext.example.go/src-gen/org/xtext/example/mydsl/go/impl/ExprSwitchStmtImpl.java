/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.go.ExprCaseClause;
import org.xtext.example.mydsl.go.ExprSwitchStmt;
import org.xtext.example.mydsl.go.Expression;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.SimpleStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExprSwitchStmtImpl#getSimplestmt <em>Simplestmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExprSwitchStmtImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExprSwitchStmtImpl#getExprcase <em>Exprcase</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprSwitchStmtImpl extends SwitchStmtImpl implements ExprSwitchStmt
{
  /**
   * The cached value of the '{@link #getSimplestmt() <em>Simplestmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimplestmt()
   * @generated
   * @ordered
   */
  protected SimpleStmt simplestmt;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The cached value of the '{@link #getExprcase() <em>Exprcase</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExprcase()
   * @generated
   * @ordered
   */
  protected EList<ExprCaseClause> exprcase;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprSwitchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPR_SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimplestmt()
  {
    return simplestmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimplestmt(SimpleStmt newSimplestmt, NotificationChain msgs)
  {
    SimpleStmt oldSimplestmt = simplestmt;
    simplestmt = newSimplestmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT, oldSimplestmt, newSimplestmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimplestmt(SimpleStmt newSimplestmt)
  {
    if (newSimplestmt != simplestmt)
    {
      NotificationChain msgs = null;
      if (simplestmt != null)
        msgs = ((InternalEObject)simplestmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT, null, msgs);
      if (newSimplestmt != null)
        msgs = ((InternalEObject)newSimplestmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT, null, msgs);
      msgs = basicSetSimplestmt(newSimplestmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT, newSimplestmt, newSimplestmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPR_SWITCH_STMT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPR_SWITCH_STMT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ExprCaseClause> getExprcase()
  {
    if (exprcase == null)
    {
      exprcase = new EObjectContainmentEList<ExprCaseClause>(ExprCaseClause.class, this, GoPackage.EXPR_SWITCH_STMT__EXPRCASE);
    }
    return exprcase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT:
        return basicSetSimplestmt(null, msgs);
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case GoPackage.EXPR_SWITCH_STMT__EXPRCASE:
        return ((InternalEList<?>)getExprcase()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT:
        return getSimplestmt();
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return getExpression();
      case GoPackage.EXPR_SWITCH_STMT__EXPRCASE:
        return getExprcase();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT:
        setSimplestmt((SimpleStmt)newValue);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRCASE:
        getExprcase().clear();
        getExprcase().addAll((Collection<? extends ExprCaseClause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT:
        setSimplestmt((SimpleStmt)null);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        setExpression((Expression)null);
        return;
      case GoPackage.EXPR_SWITCH_STMT__EXPRCASE:
        getExprcase().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPR_SWITCH_STMT__SIMPLESTMT:
        return simplestmt != null;
      case GoPackage.EXPR_SWITCH_STMT__EXPRESSION:
        return expression != null;
      case GoPackage.EXPR_SWITCH_STMT__EXPRCASE:
        return exprcase != null && !exprcase.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ExprSwitchStmtImpl
