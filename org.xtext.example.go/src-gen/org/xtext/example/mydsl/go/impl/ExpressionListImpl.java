/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.go.Condition;
import org.xtext.example.mydsl.go.ExpressionList;
import org.xtext.example.mydsl.go.ForClause;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.InitStmt;
import org.xtext.example.mydsl.go.PostStmt;
import org.xtext.example.mydsl.go.RecvExpr;
import org.xtext.example.mydsl.go.RecvStmt;
import org.xtext.example.mydsl.go.ShortVarDecl;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.SwitchStmt;
import org.xtext.example.mydsl.go.TypeCaseClause;
import org.xtext.example.mydsl.go.TypeSwitchGuard;
import org.xtext.example.mydsl.go.TypeSwitchStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getTypesg <em>Typesg</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getTypecc <em>Typecc</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getPoststmt <em>Poststmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getEmpty <em>Empty</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ExpressionListImpl#getRecvexpr <em>Recvexpr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionListImpl extends VarSpecImpl implements ExpressionList
{
  /**
   * The cached value of the '{@link #getTypesg() <em>Typesg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypesg()
   * @generated
   * @ordered
   */
  protected TypeSwitchGuard typesg;

  /**
   * The cached value of the '{@link #getTypecc() <em>Typecc</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypecc()
   * @generated
   * @ordered
   */
  protected EList<TypeCaseClause> typecc;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getPoststmt() <em>Poststmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoststmt()
   * @generated
   * @ordered
   */
  protected PostStmt poststmt;

  /**
   * The default value of the '{@link #getEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmpty()
   * @generated
   * @ordered
   */
  protected static final String EMPTY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEmpty() <em>Empty</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmpty()
   * @generated
   * @ordered
   */
  protected String empty = EMPTY_EDEFAULT;

  /**
   * The cached value of the '{@link #getRecvexpr() <em>Recvexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecvexpr()
   * @generated
   * @ordered
   */
  protected RecvExpr recvexpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.EXPRESSION_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSwitchGuard getTypesg()
  {
    return typesg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypesg(TypeSwitchGuard newTypesg, NotificationChain msgs)
  {
    TypeSwitchGuard oldTypesg = typesg;
    typesg = newTypesg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__TYPESG, oldTypesg, newTypesg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypesg(TypeSwitchGuard newTypesg)
  {
    if (newTypesg != typesg)
    {
      NotificationChain msgs = null;
      if (typesg != null)
        msgs = ((InternalEObject)typesg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__TYPESG, null, msgs);
      if (newTypesg != null)
        msgs = ((InternalEObject)newTypesg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__TYPESG, null, msgs);
      msgs = basicSetTypesg(newTypesg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__TYPESG, newTypesg, newTypesg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeCaseClause> getTypecc()
  {
    if (typecc == null)
    {
      typecc = new EObjectContainmentEList<TypeCaseClause>(TypeCaseClause.class, this, GoPackage.EXPRESSION_LIST__TYPECC);
    }
    return typecc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostStmt getPoststmt()
  {
    return poststmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoststmt(PostStmt newPoststmt, NotificationChain msgs)
  {
    PostStmt oldPoststmt = poststmt;
    poststmt = newPoststmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__POSTSTMT, oldPoststmt, newPoststmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPoststmt(PostStmt newPoststmt)
  {
    if (newPoststmt != poststmt)
    {
      NotificationChain msgs = null;
      if (poststmt != null)
        msgs = ((InternalEObject)poststmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__POSTSTMT, null, msgs);
      if (newPoststmt != null)
        msgs = ((InternalEObject)newPoststmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__POSTSTMT, null, msgs);
      msgs = basicSetPoststmt(newPoststmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__POSTSTMT, newPoststmt, newPoststmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getEmpty()
  {
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEmpty(String newEmpty)
  {
    String oldEmpty = empty;
    empty = newEmpty;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__EMPTY, oldEmpty, empty));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecvExpr getRecvexpr()
  {
    return recvexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecvexpr(RecvExpr newRecvexpr, NotificationChain msgs)
  {
    RecvExpr oldRecvexpr = recvexpr;
    recvexpr = newRecvexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__RECVEXPR, oldRecvexpr, newRecvexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecvexpr(RecvExpr newRecvexpr)
  {
    if (newRecvexpr != recvexpr)
    {
      NotificationChain msgs = null;
      if (recvexpr != null)
        msgs = ((InternalEObject)recvexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__RECVEXPR, null, msgs);
      if (newRecvexpr != null)
        msgs = ((InternalEObject)newRecvexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.EXPRESSION_LIST__RECVEXPR, null, msgs);
      msgs = basicSetRecvexpr(newRecvexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.EXPRESSION_LIST__RECVEXPR, newRecvexpr, newRecvexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__TYPESG:
        return basicSetTypesg(null, msgs);
      case GoPackage.EXPRESSION_LIST__TYPECC:
        return ((InternalEList<?>)getTypecc()).basicRemove(otherEnd, msgs);
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return basicSetCondition(null, msgs);
      case GoPackage.EXPRESSION_LIST__POSTSTMT:
        return basicSetPoststmt(null, msgs);
      case GoPackage.EXPRESSION_LIST__RECVEXPR:
        return basicSetRecvexpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__TYPESG:
        return getTypesg();
      case GoPackage.EXPRESSION_LIST__TYPECC:
        return getTypecc();
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return getCondition();
      case GoPackage.EXPRESSION_LIST__POSTSTMT:
        return getPoststmt();
      case GoPackage.EXPRESSION_LIST__EMPTY:
        return getEmpty();
      case GoPackage.EXPRESSION_LIST__RECVEXPR:
        return getRecvexpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__TYPESG:
        setTypesg((TypeSwitchGuard)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__TYPECC:
        getTypecc().clear();
        getTypecc().addAll((Collection<? extends TypeCaseClause>)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__CONDITION:
        setCondition((Condition)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__POSTSTMT:
        setPoststmt((PostStmt)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__EMPTY:
        setEmpty((String)newValue);
        return;
      case GoPackage.EXPRESSION_LIST__RECVEXPR:
        setRecvexpr((RecvExpr)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__TYPESG:
        setTypesg((TypeSwitchGuard)null);
        return;
      case GoPackage.EXPRESSION_LIST__TYPECC:
        getTypecc().clear();
        return;
      case GoPackage.EXPRESSION_LIST__CONDITION:
        setCondition((Condition)null);
        return;
      case GoPackage.EXPRESSION_LIST__POSTSTMT:
        setPoststmt((PostStmt)null);
        return;
      case GoPackage.EXPRESSION_LIST__EMPTY:
        setEmpty(EMPTY_EDEFAULT);
        return;
      case GoPackage.EXPRESSION_LIST__RECVEXPR:
        setRecvexpr((RecvExpr)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.EXPRESSION_LIST__TYPESG:
        return typesg != null;
      case GoPackage.EXPRESSION_LIST__TYPECC:
        return typecc != null && !typecc.isEmpty();
      case GoPackage.EXPRESSION_LIST__CONDITION:
        return condition != null;
      case GoPackage.EXPRESSION_LIST__POSTSTMT:
        return poststmt != null;
      case GoPackage.EXPRESSION_LIST__EMPTY:
        return EMPTY_EDEFAULT == null ? empty != null : !EMPTY_EDEFAULT.equals(empty);
      case GoPackage.EXPRESSION_LIST__RECVEXPR:
        return recvexpr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == SwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__TYPESG: return GoPackage.TYPE_SWITCH_STMT__TYPESG;
        case GoPackage.EXPRESSION_LIST__TYPECC: return GoPackage.TYPE_SWITCH_STMT__TYPECC;
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__CONDITION: return GoPackage.FOR_CLAUSE__CONDITION;
        case GoPackage.EXPRESSION_LIST__POSTSTMT: return GoPackage.FOR_CLAUSE__POSTSTMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__EMPTY: return GoPackage.SIMPLE_STMT__EMPTY;
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.EXPRESSION_LIST__RECVEXPR: return GoPackage.RECV_STMT__RECVEXPR;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == SwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.TYPE_SWITCH_STMT__TYPESG: return GoPackage.EXPRESSION_LIST__TYPESG;
        case GoPackage.TYPE_SWITCH_STMT__TYPECC: return GoPackage.EXPRESSION_LIST__TYPECC;
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.FOR_CLAUSE__CONDITION: return GoPackage.EXPRESSION_LIST__CONDITION;
        case GoPackage.FOR_CLAUSE__POSTSTMT: return GoPackage.EXPRESSION_LIST__POSTSTMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.SIMPLE_STMT__EMPTY: return GoPackage.EXPRESSION_LIST__EMPTY;
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.RECV_STMT__RECVEXPR: return GoPackage.EXPRESSION_LIST__RECVEXPR;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (empty: ");
    result.append(empty);
    result.append(')');
    return result.toString();
  }

} //ExpressionListImpl
