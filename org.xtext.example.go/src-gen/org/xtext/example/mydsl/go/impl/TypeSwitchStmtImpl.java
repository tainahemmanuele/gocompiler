/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.TypeCaseClause;
import org.xtext.example.mydsl.go.TypeSwitchGuard;
import org.xtext.example.mydsl.go.TypeSwitchStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Switch Stmt</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeSwitchStmtImpl#getSimplestm <em>Simplestm</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeSwitchStmtImpl#getTypesg <em>Typesg</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeSwitchStmtImpl#getTypecc <em>Typecc</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeSwitchStmtImpl extends MinimalEObjectImpl.Container implements TypeSwitchStmt
{
  /**
   * The cached value of the '{@link #getSimplestm() <em>Simplestm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimplestm()
   * @generated
   * @ordered
   */
  protected SimpleStmt simplestm;

  /**
   * The cached value of the '{@link #getTypesg() <em>Typesg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypesg()
   * @generated
   * @ordered
   */
  protected TypeSwitchGuard typesg;

  /**
   * The cached value of the '{@link #getTypecc() <em>Typecc</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypecc()
   * @generated
   * @ordered
   */
  protected EList<TypeCaseClause> typecc;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeSwitchStmtImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE_SWITCH_STMT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimplestm()
  {
    return simplestm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimplestm(SimpleStmt newSimplestm, NotificationChain msgs)
  {
    SimpleStmt oldSimplestm = simplestm;
    simplestm = newSimplestm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SWITCH_STMT__SIMPLESTM, oldSimplestm, newSimplestm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimplestm(SimpleStmt newSimplestm)
  {
    if (newSimplestm != simplestm)
    {
      NotificationChain msgs = null;
      if (simplestm != null)
        msgs = ((InternalEObject)simplestm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SWITCH_STMT__SIMPLESTM, null, msgs);
      if (newSimplestm != null)
        msgs = ((InternalEObject)newSimplestm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SWITCH_STMT__SIMPLESTM, null, msgs);
      msgs = basicSetSimplestm(newSimplestm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SWITCH_STMT__SIMPLESTM, newSimplestm, newSimplestm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSwitchGuard getTypesg()
  {
    return typesg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypesg(TypeSwitchGuard newTypesg, NotificationChain msgs)
  {
    TypeSwitchGuard oldTypesg = typesg;
    typesg = newTypesg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SWITCH_STMT__TYPESG, oldTypesg, newTypesg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypesg(TypeSwitchGuard newTypesg)
  {
    if (newTypesg != typesg)
    {
      NotificationChain msgs = null;
      if (typesg != null)
        msgs = ((InternalEObject)typesg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SWITCH_STMT__TYPESG, null, msgs);
      if (newTypesg != null)
        msgs = ((InternalEObject)newTypesg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SWITCH_STMT__TYPESG, null, msgs);
      msgs = basicSetTypesg(newTypesg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SWITCH_STMT__TYPESG, newTypesg, newTypesg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeCaseClause> getTypecc()
  {
    if (typecc == null)
    {
      typecc = new EObjectContainmentEList<TypeCaseClause>(TypeCaseClause.class, this, GoPackage.TYPE_SWITCH_STMT__TYPECC);
    }
    return typecc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SWITCH_STMT__SIMPLESTM:
        return basicSetSimplestm(null, msgs);
      case GoPackage.TYPE_SWITCH_STMT__TYPESG:
        return basicSetTypesg(null, msgs);
      case GoPackage.TYPE_SWITCH_STMT__TYPECC:
        return ((InternalEList<?>)getTypecc()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SWITCH_STMT__SIMPLESTM:
        return getSimplestm();
      case GoPackage.TYPE_SWITCH_STMT__TYPESG:
        return getTypesg();
      case GoPackage.TYPE_SWITCH_STMT__TYPECC:
        return getTypecc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SWITCH_STMT__SIMPLESTM:
        setSimplestm((SimpleStmt)newValue);
        return;
      case GoPackage.TYPE_SWITCH_STMT__TYPESG:
        setTypesg((TypeSwitchGuard)newValue);
        return;
      case GoPackage.TYPE_SWITCH_STMT__TYPECC:
        getTypecc().clear();
        getTypecc().addAll((Collection<? extends TypeCaseClause>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SWITCH_STMT__SIMPLESTM:
        setSimplestm((SimpleStmt)null);
        return;
      case GoPackage.TYPE_SWITCH_STMT__TYPESG:
        setTypesg((TypeSwitchGuard)null);
        return;
      case GoPackage.TYPE_SWITCH_STMT__TYPECC:
        getTypecc().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SWITCH_STMT__SIMPLESTM:
        return simplestm != null;
      case GoPackage.TYPE_SWITCH_STMT__TYPESG:
        return typesg != null;
      case GoPackage.TYPE_SWITCH_STMT__TYPECC:
        return typecc != null && !typecc.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeSwitchStmtImpl
