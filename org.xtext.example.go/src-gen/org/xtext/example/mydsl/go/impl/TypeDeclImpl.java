/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.TypeDecl;
import org.xtext.example.mydsl.go.TypeSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Decl</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeDeclImpl#getTypespec <em>Typespec</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeDeclImpl#getTypespec2 <em>Typespec2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeDeclImpl extends DeclarationImpl implements TypeDecl
{
  /**
   * The cached value of the '{@link #getTypespec() <em>Typespec</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypespec()
   * @generated
   * @ordered
   */
  protected TypeSpec typespec;

  /**
   * The cached value of the '{@link #getTypespec2() <em>Typespec2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypespec2()
   * @generated
   * @ordered
   */
  protected EList<TypeSpec> typespec2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeDeclImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE_DECL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSpec getTypespec()
  {
    return typespec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypespec(TypeSpec newTypespec, NotificationChain msgs)
  {
    TypeSpec oldTypespec = typespec;
    typespec = newTypespec;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_DECL__TYPESPEC, oldTypespec, newTypespec);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypespec(TypeSpec newTypespec)
  {
    if (newTypespec != typespec)
    {
      NotificationChain msgs = null;
      if (typespec != null)
        msgs = ((InternalEObject)typespec).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_DECL__TYPESPEC, null, msgs);
      if (newTypespec != null)
        msgs = ((InternalEObject)newTypespec).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_DECL__TYPESPEC, null, msgs);
      msgs = basicSetTypespec(newTypespec, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_DECL__TYPESPEC, newTypespec, newTypespec));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeSpec> getTypespec2()
  {
    if (typespec2 == null)
    {
      typespec2 = new EObjectContainmentEList<TypeSpec>(TypeSpec.class, this, GoPackage.TYPE_DECL__TYPESPEC2);
    }
    return typespec2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_DECL__TYPESPEC:
        return basicSetTypespec(null, msgs);
      case GoPackage.TYPE_DECL__TYPESPEC2:
        return ((InternalEList<?>)getTypespec2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_DECL__TYPESPEC:
        return getTypespec();
      case GoPackage.TYPE_DECL__TYPESPEC2:
        return getTypespec2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_DECL__TYPESPEC:
        setTypespec((TypeSpec)newValue);
        return;
      case GoPackage.TYPE_DECL__TYPESPEC2:
        getTypespec2().clear();
        getTypespec2().addAll((Collection<? extends TypeSpec>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_DECL__TYPESPEC:
        setTypespec((TypeSpec)null);
        return;
      case GoPackage.TYPE_DECL__TYPESPEC2:
        getTypespec2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_DECL__TYPESPEC:
        return typespec != null;
      case GoPackage.TYPE_DECL__TYPESPEC2:
        return typespec2 != null && !typespec2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeDeclImpl
