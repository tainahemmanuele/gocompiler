/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.go.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.go.AliasDecl;
import org.xtext.example.mydsl.go.ArrayLength;
import org.xtext.example.mydsl.go.ArrayType;
import org.xtext.example.mydsl.go.BaseType;
import org.xtext.example.mydsl.go.Channel;
import org.xtext.example.mydsl.go.Condition;
import org.xtext.example.mydsl.go.ConstSpec;
import org.xtext.example.mydsl.go.DeferStmt;
import org.xtext.example.mydsl.go.Element;
import org.xtext.example.mydsl.go.ElementList;
import org.xtext.example.mydsl.go.ElementType;
import org.xtext.example.mydsl.go.Expression;
import org.xtext.example.mydsl.go.Expression2;
import org.xtext.example.mydsl.go.ExpressionList;
import org.xtext.example.mydsl.go.ExpressionStmt;
import org.xtext.example.mydsl.go.ForClause;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.IncDecStmt;
import org.xtext.example.mydsl.go.InitStmt;
import org.xtext.example.mydsl.go.Key;
import org.xtext.example.mydsl.go.KeyType;
import org.xtext.example.mydsl.go.KeyedElement;
import org.xtext.example.mydsl.go.PostStmt;
import org.xtext.example.mydsl.go.PrimaryExpr;
import org.xtext.example.mydsl.go.PrimaryExpr2;
import org.xtext.example.mydsl.go.RecvExpr;
import org.xtext.example.mydsl.go.RecvStmt;
import org.xtext.example.mydsl.go.Result;
import org.xtext.example.mydsl.go.ShortVarDecl;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.SwitchStmt;
import org.xtext.example.mydsl.go.Type;
import org.xtext.example.mydsl.go.TypeAssertion;
import org.xtext.example.mydsl.go.TypeCaseClause;
import org.xtext.example.mydsl.go.TypeDef;
import org.xtext.example.mydsl.go.TypeLit;
import org.xtext.example.mydsl.go.TypeSpec;
import org.xtext.example.mydsl.go.TypeSwitchGuard;
import org.xtext.example.mydsl.go.TypeSwitchStmt;
import org.xtext.example.mydsl.go.UnaryExpr;
import org.xtext.example.mydsl.go.VarSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Primary Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getExpressionlist <em>Expressionlist</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getElemtype <em>Elemtype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getTypesg <em>Typesg</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getTypecc <em>Typecc</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getPoststmt <em>Poststmt</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getRecvexpr <em>Recvexpr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getKeyedelement <em>Keyedelement</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getElement <em>Element</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getExpression2 <em>Expression2</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExprImpl#getPr <em>Pr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PrimaryExprImpl extends TypeSwitchGuardImpl implements PrimaryExpr
{
  /**
   * The cached value of the '{@link #getExpressionlist() <em>Expressionlist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionlist()
   * @generated
   * @ordered
   */
  protected ExpressionList expressionlist;

  /**
   * The cached value of the '{@link #getElemtype() <em>Elemtype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElemtype()
   * @generated
   * @ordered
   */
  protected ElementType elemtype;

  /**
   * The cached value of the '{@link #getTypesg() <em>Typesg</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypesg()
   * @generated
   * @ordered
   */
  protected TypeSwitchGuard typesg;

  /**
   * The cached value of the '{@link #getTypecc() <em>Typecc</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypecc()
   * @generated
   * @ordered
   */
  protected EList<TypeCaseClause> typecc;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected Condition condition;

  /**
   * The cached value of the '{@link #getPoststmt() <em>Poststmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoststmt()
   * @generated
   * @ordered
   */
  protected PostStmt poststmt;

  /**
   * The cached value of the '{@link #getRecvexpr() <em>Recvexpr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRecvexpr()
   * @generated
   * @ordered
   */
  protected RecvExpr recvexpr;

  /**
   * The cached value of the '{@link #getKeyedelement() <em>Keyedelement</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getKeyedelement()
   * @generated
   * @ordered
   */
  protected EList<KeyedElement> keyedelement;

  /**
   * The cached value of the '{@link #getElement() <em>Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElement()
   * @generated
   * @ordered
   */
  protected Element element;

  /**
   * The cached value of the '{@link #getExpression2() <em>Expression2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression2()
   * @generated
   * @ordered
   */
  protected EList<Expression> expression2;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected Expression2 exp;

  /**
   * The cached value of the '{@link #getPr() <em>Pr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPr()
   * @generated
   * @ordered
   */
  protected PrimaryExpr2 pr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimaryExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.PRIMARY_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionList getExpressionlist()
  {
    return expressionlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionlist(ExpressionList newExpressionlist, NotificationChain msgs)
  {
    ExpressionList oldExpressionlist = expressionlist;
    expressionlist = newExpressionlist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__EXPRESSIONLIST, oldExpressionlist, newExpressionlist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExpressionlist(ExpressionList newExpressionlist)
  {
    if (newExpressionlist != expressionlist)
    {
      NotificationChain msgs = null;
      if (expressionlist != null)
        msgs = ((InternalEObject)expressionlist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__EXPRESSIONLIST, null, msgs);
      if (newExpressionlist != null)
        msgs = ((InternalEObject)newExpressionlist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__EXPRESSIONLIST, null, msgs);
      msgs = basicSetExpressionlist(newExpressionlist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__EXPRESSIONLIST, newExpressionlist, newExpressionlist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType getElemtype()
  {
    return elemtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElemtype(ElementType newElemtype, NotificationChain msgs)
  {
    ElementType oldElemtype = elemtype;
    elemtype = newElemtype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__ELEMTYPE, oldElemtype, newElemtype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElemtype(ElementType newElemtype)
  {
    if (newElemtype != elemtype)
    {
      NotificationChain msgs = null;
      if (elemtype != null)
        msgs = ((InternalEObject)elemtype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__ELEMTYPE, null, msgs);
      if (newElemtype != null)
        msgs = ((InternalEObject)newElemtype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__ELEMTYPE, null, msgs);
      msgs = basicSetElemtype(newElemtype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__ELEMTYPE, newElemtype, newElemtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeSwitchGuard getTypesg()
  {
    return typesg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypesg(TypeSwitchGuard newTypesg, NotificationChain msgs)
  {
    TypeSwitchGuard oldTypesg = typesg;
    typesg = newTypesg;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__TYPESG, oldTypesg, newTypesg);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypesg(TypeSwitchGuard newTypesg)
  {
    if (newTypesg != typesg)
    {
      NotificationChain msgs = null;
      if (typesg != null)
        msgs = ((InternalEObject)typesg).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__TYPESG, null, msgs);
      if (newTypesg != null)
        msgs = ((InternalEObject)newTypesg).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__TYPESG, null, msgs);
      msgs = basicSetTypesg(newTypesg, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__TYPESG, newTypesg, newTypesg));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeCaseClause> getTypecc()
  {
    if (typecc == null)
    {
      typecc = new EObjectContainmentEList<TypeCaseClause>(TypeCaseClause.class, this, GoPackage.PRIMARY_EXPR__TYPECC);
    }
    return typecc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(Condition newCondition, NotificationChain msgs)
  {
    Condition oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(Condition newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PostStmt getPoststmt()
  {
    return poststmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPoststmt(PostStmt newPoststmt, NotificationChain msgs)
  {
    PostStmt oldPoststmt = poststmt;
    poststmt = newPoststmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__POSTSTMT, oldPoststmt, newPoststmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPoststmt(PostStmt newPoststmt)
  {
    if (newPoststmt != poststmt)
    {
      NotificationChain msgs = null;
      if (poststmt != null)
        msgs = ((InternalEObject)poststmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__POSTSTMT, null, msgs);
      if (newPoststmt != null)
        msgs = ((InternalEObject)newPoststmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__POSTSTMT, null, msgs);
      msgs = basicSetPoststmt(newPoststmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__POSTSTMT, newPoststmt, newPoststmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RecvExpr getRecvexpr()
  {
    return recvexpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRecvexpr(RecvExpr newRecvexpr, NotificationChain msgs)
  {
    RecvExpr oldRecvexpr = recvexpr;
    recvexpr = newRecvexpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__RECVEXPR, oldRecvexpr, newRecvexpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRecvexpr(RecvExpr newRecvexpr)
  {
    if (newRecvexpr != recvexpr)
    {
      NotificationChain msgs = null;
      if (recvexpr != null)
        msgs = ((InternalEObject)recvexpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__RECVEXPR, null, msgs);
      if (newRecvexpr != null)
        msgs = ((InternalEObject)newRecvexpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__RECVEXPR, null, msgs);
      msgs = basicSetRecvexpr(newRecvexpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__RECVEXPR, newRecvexpr, newRecvexpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<KeyedElement> getKeyedelement()
  {
    if (keyedelement == null)
    {
      keyedelement = new EObjectContainmentEList<KeyedElement>(KeyedElement.class, this, GoPackage.PRIMARY_EXPR__KEYEDELEMENT);
    }
    return keyedelement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element getElement()
  {
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElement(Element newElement, NotificationChain msgs)
  {
    Element oldElement = element;
    element = newElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__ELEMENT, oldElement, newElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElement(Element newElement)
  {
    if (newElement != element)
    {
      NotificationChain msgs = null;
      if (element != null)
        msgs = ((InternalEObject)element).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__ELEMENT, null, msgs);
      if (newElement != null)
        msgs = ((InternalEObject)newElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__ELEMENT, null, msgs);
      msgs = basicSetElement(newElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__ELEMENT, newElement, newElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getExpression2()
  {
    if (expression2 == null)
    {
      expression2 = new EObjectContainmentEList<Expression>(Expression.class, this, GoPackage.PRIMARY_EXPR__EXPRESSION2);
    }
    return expression2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression2 getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExp(Expression2 newExp, NotificationChain msgs)
  {
    Expression2 oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__EXP, oldExp, newExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(Expression2 newExp)
  {
    if (newExp != exp)
    {
      NotificationChain msgs = null;
      if (exp != null)
        msgs = ((InternalEObject)exp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__EXP, null, msgs);
      if (newExp != null)
        msgs = ((InternalEObject)newExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__EXP, null, msgs);
      msgs = basicSetExp(newExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__EXP, newExp, newExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryExpr2 getPr()
  {
    return pr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPr(PrimaryExpr2 newPr, NotificationChain msgs)
  {
    PrimaryExpr2 oldPr = pr;
    pr = newPr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__PR, oldPr, newPr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPr(PrimaryExpr2 newPr)
  {
    if (newPr != pr)
    {
      NotificationChain msgs = null;
      if (pr != null)
        msgs = ((InternalEObject)pr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__PR, null, msgs);
      if (newPr != null)
        msgs = ((InternalEObject)newPr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR__PR, null, msgs);
      msgs = basicSetPr(newPr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR__PR, newPr, newPr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST:
        return basicSetExpressionlist(null, msgs);
      case GoPackage.PRIMARY_EXPR__ELEMTYPE:
        return basicSetElemtype(null, msgs);
      case GoPackage.PRIMARY_EXPR__TYPESG:
        return basicSetTypesg(null, msgs);
      case GoPackage.PRIMARY_EXPR__TYPECC:
        return ((InternalEList<?>)getTypecc()).basicRemove(otherEnd, msgs);
      case GoPackage.PRIMARY_EXPR__CONDITION:
        return basicSetCondition(null, msgs);
      case GoPackage.PRIMARY_EXPR__POSTSTMT:
        return basicSetPoststmt(null, msgs);
      case GoPackage.PRIMARY_EXPR__RECVEXPR:
        return basicSetRecvexpr(null, msgs);
      case GoPackage.PRIMARY_EXPR__KEYEDELEMENT:
        return ((InternalEList<?>)getKeyedelement()).basicRemove(otherEnd, msgs);
      case GoPackage.PRIMARY_EXPR__ELEMENT:
        return basicSetElement(null, msgs);
      case GoPackage.PRIMARY_EXPR__EXPRESSION2:
        return ((InternalEList<?>)getExpression2()).basicRemove(otherEnd, msgs);
      case GoPackage.PRIMARY_EXPR__EXP:
        return basicSetExp(null, msgs);
      case GoPackage.PRIMARY_EXPR__PR:
        return basicSetPr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST:
        return getExpressionlist();
      case GoPackage.PRIMARY_EXPR__ELEMTYPE:
        return getElemtype();
      case GoPackage.PRIMARY_EXPR__TYPESG:
        return getTypesg();
      case GoPackage.PRIMARY_EXPR__TYPECC:
        return getTypecc();
      case GoPackage.PRIMARY_EXPR__CONDITION:
        return getCondition();
      case GoPackage.PRIMARY_EXPR__POSTSTMT:
        return getPoststmt();
      case GoPackage.PRIMARY_EXPR__RECVEXPR:
        return getRecvexpr();
      case GoPackage.PRIMARY_EXPR__KEYEDELEMENT:
        return getKeyedelement();
      case GoPackage.PRIMARY_EXPR__ELEMENT:
        return getElement();
      case GoPackage.PRIMARY_EXPR__EXPRESSION2:
        return getExpression2();
      case GoPackage.PRIMARY_EXPR__EXP:
        return getExp();
      case GoPackage.PRIMARY_EXPR__PR:
        return getPr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST:
        setExpressionlist((ExpressionList)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__ELEMTYPE:
        setElemtype((ElementType)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__TYPESG:
        setTypesg((TypeSwitchGuard)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__TYPECC:
        getTypecc().clear();
        getTypecc().addAll((Collection<? extends TypeCaseClause>)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__CONDITION:
        setCondition((Condition)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__POSTSTMT:
        setPoststmt((PostStmt)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__RECVEXPR:
        setRecvexpr((RecvExpr)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__KEYEDELEMENT:
        getKeyedelement().clear();
        getKeyedelement().addAll((Collection<? extends KeyedElement>)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__ELEMENT:
        setElement((Element)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__EXPRESSION2:
        getExpression2().clear();
        getExpression2().addAll((Collection<? extends Expression>)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__EXP:
        setExp((Expression2)newValue);
        return;
      case GoPackage.PRIMARY_EXPR__PR:
        setPr((PrimaryExpr2)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST:
        setExpressionlist((ExpressionList)null);
        return;
      case GoPackage.PRIMARY_EXPR__ELEMTYPE:
        setElemtype((ElementType)null);
        return;
      case GoPackage.PRIMARY_EXPR__TYPESG:
        setTypesg((TypeSwitchGuard)null);
        return;
      case GoPackage.PRIMARY_EXPR__TYPECC:
        getTypecc().clear();
        return;
      case GoPackage.PRIMARY_EXPR__CONDITION:
        setCondition((Condition)null);
        return;
      case GoPackage.PRIMARY_EXPR__POSTSTMT:
        setPoststmt((PostStmt)null);
        return;
      case GoPackage.PRIMARY_EXPR__RECVEXPR:
        setRecvexpr((RecvExpr)null);
        return;
      case GoPackage.PRIMARY_EXPR__KEYEDELEMENT:
        getKeyedelement().clear();
        return;
      case GoPackage.PRIMARY_EXPR__ELEMENT:
        setElement((Element)null);
        return;
      case GoPackage.PRIMARY_EXPR__EXPRESSION2:
        getExpression2().clear();
        return;
      case GoPackage.PRIMARY_EXPR__EXP:
        setExp((Expression2)null);
        return;
      case GoPackage.PRIMARY_EXPR__PR:
        setPr((PrimaryExpr2)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST:
        return expressionlist != null;
      case GoPackage.PRIMARY_EXPR__ELEMTYPE:
        return elemtype != null;
      case GoPackage.PRIMARY_EXPR__TYPESG:
        return typesg != null;
      case GoPackage.PRIMARY_EXPR__TYPECC:
        return typecc != null && !typecc.isEmpty();
      case GoPackage.PRIMARY_EXPR__CONDITION:
        return condition != null;
      case GoPackage.PRIMARY_EXPR__POSTSTMT:
        return poststmt != null;
      case GoPackage.PRIMARY_EXPR__RECVEXPR:
        return recvexpr != null;
      case GoPackage.PRIMARY_EXPR__KEYEDELEMENT:
        return keyedelement != null && !keyedelement.isEmpty();
      case GoPackage.PRIMARY_EXPR__ELEMENT:
        return element != null;
      case GoPackage.PRIMARY_EXPR__EXPRESSION2:
        return expression2 != null && !expression2.isEmpty();
      case GoPackage.PRIMARY_EXPR__EXP:
        return exp != null;
      case GoPackage.PRIMARY_EXPR__PR:
        return pr != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == ElementType.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BaseType.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Result.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyType.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeDef.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AliasDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeAssertion.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Type.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__EXPRESSIONLIST: return GoPackage.TYPE__EXPRESSIONLIST;
        default: return -1;
      }
    }
    if (baseClass == TypeLit.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArrayType.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArrayLength.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__ELEMTYPE: return GoPackage.ARRAY_LENGTH__ELEMTYPE;
        default: return -1;
      }
    }
    if (baseClass == DeferStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSwitchStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__TYPESG: return GoPackage.TYPE_SWITCH_STMT__TYPESG;
        case GoPackage.PRIMARY_EXPR__TYPECC: return GoPackage.TYPE_SWITCH_STMT__TYPECC;
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__CONDITION: return GoPackage.FOR_CLAUSE__CONDITION;
        case GoPackage.PRIMARY_EXPR__POSTSTMT: return GoPackage.FOR_CLAUSE__POSTSTMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Channel.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IncDecStmt.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvExpr.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Condition.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__RECVEXPR: return GoPackage.RECV_STMT__RECVEXPR;
        default: return -1;
      }
    }
    if (baseClass == ExpressionList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ElementList.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyedElement.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__KEYEDELEMENT: return GoPackage.KEYED_ELEMENT__KEYEDELEMENT;
        case GoPackage.PRIMARY_EXPR__ELEMENT: return GoPackage.KEYED_ELEMENT__ELEMENT;
        default: return -1;
      }
    }
    if (baseClass == Key.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Element.class)
    {
      switch (derivedFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Expression.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__EXPRESSION2: return GoPackage.EXPRESSION__EXPRESSION2;
        default: return -1;
      }
    }
    if (baseClass == UnaryExpr.class)
    {
      switch (derivedFeatureID)
      {
        case GoPackage.PRIMARY_EXPR__EXP: return GoPackage.UNARY_EXPR__EXP;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == ElementType.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == BaseType.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Result.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyType.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ConstSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeDef.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == AliasDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == VarSpec.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeAssertion.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Type.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.TYPE__EXPRESSIONLIST: return GoPackage.PRIMARY_EXPR__EXPRESSIONLIST;
        default: return -1;
      }
    }
    if (baseClass == TypeLit.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArrayType.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ArrayLength.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.ARRAY_LENGTH__ELEMTYPE: return GoPackage.PRIMARY_EXPR__ELEMTYPE;
        default: return -1;
      }
    }
    if (baseClass == DeferStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == TypeSwitchStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.TYPE_SWITCH_STMT__TYPESG: return GoPackage.PRIMARY_EXPR__TYPESG;
        case GoPackage.TYPE_SWITCH_STMT__TYPECC: return GoPackage.PRIMARY_EXPR__TYPECC;
        default: return -1;
      }
    }
    if (baseClass == ForClause.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.FOR_CLAUSE__CONDITION: return GoPackage.PRIMARY_EXPR__CONDITION;
        case GoPackage.FOR_CLAUSE__POSTSTMT: return GoPackage.PRIMARY_EXPR__POSTSTMT;
        default: return -1;
      }
    }
    if (baseClass == InitStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == PostStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == SimpleStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ExpressionStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Channel.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == IncDecStmt.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvExpr.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Condition.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ShortVarDecl.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == RecvStmt.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.RECV_STMT__RECVEXPR: return GoPackage.PRIMARY_EXPR__RECVEXPR;
        default: return -1;
      }
    }
    if (baseClass == ExpressionList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == ElementList.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == KeyedElement.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.KEYED_ELEMENT__KEYEDELEMENT: return GoPackage.PRIMARY_EXPR__KEYEDELEMENT;
        case GoPackage.KEYED_ELEMENT__ELEMENT: return GoPackage.PRIMARY_EXPR__ELEMENT;
        default: return -1;
      }
    }
    if (baseClass == Key.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Element.class)
    {
      switch (baseFeatureID)
      {
        default: return -1;
      }
    }
    if (baseClass == Expression.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.EXPRESSION__EXPRESSION2: return GoPackage.PRIMARY_EXPR__EXPRESSION2;
        default: return -1;
      }
    }
    if (baseClass == UnaryExpr.class)
    {
      switch (baseFeatureID)
      {
        case GoPackage.UNARY_EXPR__EXP: return GoPackage.PRIMARY_EXPR__EXP;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

} //PrimaryExprImpl
