/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.go.Arguments;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.Index;
import org.xtext.example.mydsl.go.PrimaryExpr2;
import org.xtext.example.mydsl.go.Slice;
import org.xtext.example.mydsl.go.TypeAssertion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Primary Expr2</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getSelector <em>Selector</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getPr <em>Pr</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getIndex <em>Index</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getSlice <em>Slice</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getTypeass <em>Typeass</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.PrimaryExpr2Impl#getArguments <em>Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PrimaryExpr2Impl extends MinimalEObjectImpl.Container implements PrimaryExpr2
{
  /**
   * The default value of the '{@link #getSelector() <em>Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelector()
   * @generated
   * @ordered
   */
  protected static final String SELECTOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSelector() <em>Selector</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelector()
   * @generated
   * @ordered
   */
  protected String selector = SELECTOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getPr() <em>Pr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPr()
   * @generated
   * @ordered
   */
  protected PrimaryExpr2 pr;

  /**
   * The cached value of the '{@link #getIndex() <em>Index</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndex()
   * @generated
   * @ordered
   */
  protected Index index;

  /**
   * The cached value of the '{@link #getSlice() <em>Slice</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlice()
   * @generated
   * @ordered
   */
  protected Slice slice;

  /**
   * The cached value of the '{@link #getTypeass() <em>Typeass</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeass()
   * @generated
   * @ordered
   */
  protected TypeAssertion typeass;

  /**
   * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArguments()
   * @generated
   * @ordered
   */
  protected Arguments arguments;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrimaryExpr2Impl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.PRIMARY_EXPR2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSelector()
  {
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelector(String newSelector)
  {
    String oldSelector = selector;
    selector = newSelector;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__SELECTOR, oldSelector, selector));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimaryExpr2 getPr()
  {
    return pr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPr(PrimaryExpr2 newPr, NotificationChain msgs)
  {
    PrimaryExpr2 oldPr = pr;
    pr = newPr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__PR, oldPr, newPr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPr(PrimaryExpr2 newPr)
  {
    if (newPr != pr)
    {
      NotificationChain msgs = null;
      if (pr != null)
        msgs = ((InternalEObject)pr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__PR, null, msgs);
      if (newPr != null)
        msgs = ((InternalEObject)newPr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__PR, null, msgs);
      msgs = basicSetPr(newPr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__PR, newPr, newPr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Index getIndex()
  {
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIndex(Index newIndex, NotificationChain msgs)
  {
    Index oldIndex = index;
    index = newIndex;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__INDEX, oldIndex, newIndex);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIndex(Index newIndex)
  {
    if (newIndex != index)
    {
      NotificationChain msgs = null;
      if (index != null)
        msgs = ((InternalEObject)index).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__INDEX, null, msgs);
      if (newIndex != null)
        msgs = ((InternalEObject)newIndex).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__INDEX, null, msgs);
      msgs = basicSetIndex(newIndex, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__INDEX, newIndex, newIndex));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Slice getSlice()
  {
    return slice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlice(Slice newSlice, NotificationChain msgs)
  {
    Slice oldSlice = slice;
    slice = newSlice;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__SLICE, oldSlice, newSlice);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSlice(Slice newSlice)
  {
    if (newSlice != slice)
    {
      NotificationChain msgs = null;
      if (slice != null)
        msgs = ((InternalEObject)slice).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__SLICE, null, msgs);
      if (newSlice != null)
        msgs = ((InternalEObject)newSlice).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__SLICE, null, msgs);
      msgs = basicSetSlice(newSlice, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__SLICE, newSlice, newSlice));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeAssertion getTypeass()
  {
    return typeass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeass(TypeAssertion newTypeass, NotificationChain msgs)
  {
    TypeAssertion oldTypeass = typeass;
    typeass = newTypeass;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__TYPEASS, oldTypeass, newTypeass);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeass(TypeAssertion newTypeass)
  {
    if (newTypeass != typeass)
    {
      NotificationChain msgs = null;
      if (typeass != null)
        msgs = ((InternalEObject)typeass).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__TYPEASS, null, msgs);
      if (newTypeass != null)
        msgs = ((InternalEObject)newTypeass).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__TYPEASS, null, msgs);
      msgs = basicSetTypeass(newTypeass, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__TYPEASS, newTypeass, newTypeass));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Arguments getArguments()
  {
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArguments(Arguments newArguments, NotificationChain msgs)
  {
    Arguments oldArguments = arguments;
    arguments = newArguments;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__ARGUMENTS, oldArguments, newArguments);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArguments(Arguments newArguments)
  {
    if (newArguments != arguments)
    {
      NotificationChain msgs = null;
      if (arguments != null)
        msgs = ((InternalEObject)arguments).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__ARGUMENTS, null, msgs);
      if (newArguments != null)
        msgs = ((InternalEObject)newArguments).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.PRIMARY_EXPR2__ARGUMENTS, null, msgs);
      msgs = basicSetArguments(newArguments, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.PRIMARY_EXPR2__ARGUMENTS, newArguments, newArguments));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR2__PR:
        return basicSetPr(null, msgs);
      case GoPackage.PRIMARY_EXPR2__INDEX:
        return basicSetIndex(null, msgs);
      case GoPackage.PRIMARY_EXPR2__SLICE:
        return basicSetSlice(null, msgs);
      case GoPackage.PRIMARY_EXPR2__TYPEASS:
        return basicSetTypeass(null, msgs);
      case GoPackage.PRIMARY_EXPR2__ARGUMENTS:
        return basicSetArguments(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR2__SELECTOR:
        return getSelector();
      case GoPackage.PRIMARY_EXPR2__PR:
        return getPr();
      case GoPackage.PRIMARY_EXPR2__INDEX:
        return getIndex();
      case GoPackage.PRIMARY_EXPR2__SLICE:
        return getSlice();
      case GoPackage.PRIMARY_EXPR2__TYPEASS:
        return getTypeass();
      case GoPackage.PRIMARY_EXPR2__ARGUMENTS:
        return getArguments();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR2__SELECTOR:
        setSelector((String)newValue);
        return;
      case GoPackage.PRIMARY_EXPR2__PR:
        setPr((PrimaryExpr2)newValue);
        return;
      case GoPackage.PRIMARY_EXPR2__INDEX:
        setIndex((Index)newValue);
        return;
      case GoPackage.PRIMARY_EXPR2__SLICE:
        setSlice((Slice)newValue);
        return;
      case GoPackage.PRIMARY_EXPR2__TYPEASS:
        setTypeass((TypeAssertion)newValue);
        return;
      case GoPackage.PRIMARY_EXPR2__ARGUMENTS:
        setArguments((Arguments)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR2__SELECTOR:
        setSelector(SELECTOR_EDEFAULT);
        return;
      case GoPackage.PRIMARY_EXPR2__PR:
        setPr((PrimaryExpr2)null);
        return;
      case GoPackage.PRIMARY_EXPR2__INDEX:
        setIndex((Index)null);
        return;
      case GoPackage.PRIMARY_EXPR2__SLICE:
        setSlice((Slice)null);
        return;
      case GoPackage.PRIMARY_EXPR2__TYPEASS:
        setTypeass((TypeAssertion)null);
        return;
      case GoPackage.PRIMARY_EXPR2__ARGUMENTS:
        setArguments((Arguments)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.PRIMARY_EXPR2__SELECTOR:
        return SELECTOR_EDEFAULT == null ? selector != null : !SELECTOR_EDEFAULT.equals(selector);
      case GoPackage.PRIMARY_EXPR2__PR:
        return pr != null;
      case GoPackage.PRIMARY_EXPR2__INDEX:
        return index != null;
      case GoPackage.PRIMARY_EXPR2__SLICE:
        return slice != null;
      case GoPackage.PRIMARY_EXPR2__TYPEASS:
        return typeass != null;
      case GoPackage.PRIMARY_EXPR2__ARGUMENTS:
        return arguments != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (selector: ");
    result.append(selector);
    result.append(')');
    return result.toString();
  }

} //PrimaryExpr2Impl
