/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.go.AliasDecl;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.TypeDef;
import org.xtext.example.mydsl.go.TypeSpec;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Spec</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeSpecImpl#getAliasdecl <em>Aliasdecl</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.TypeSpecImpl#getTyped <em>Typed</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeSpecImpl extends MinimalEObjectImpl.Container implements TypeSpec
{
  /**
   * The cached value of the '{@link #getAliasdecl() <em>Aliasdecl</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAliasdecl()
   * @generated
   * @ordered
   */
  protected AliasDecl aliasdecl;

  /**
   * The cached value of the '{@link #getTyped() <em>Typed</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTyped()
   * @generated
   * @ordered
   */
  protected TypeDef typed;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeSpecImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.TYPE_SPEC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasDecl getAliasdecl()
  {
    return aliasdecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAliasdecl(AliasDecl newAliasdecl, NotificationChain msgs)
  {
    AliasDecl oldAliasdecl = aliasdecl;
    aliasdecl = newAliasdecl;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SPEC__ALIASDECL, oldAliasdecl, newAliasdecl);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAliasdecl(AliasDecl newAliasdecl)
  {
    if (newAliasdecl != aliasdecl)
    {
      NotificationChain msgs = null;
      if (aliasdecl != null)
        msgs = ((InternalEObject)aliasdecl).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SPEC__ALIASDECL, null, msgs);
      if (newAliasdecl != null)
        msgs = ((InternalEObject)newAliasdecl).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SPEC__ALIASDECL, null, msgs);
      msgs = basicSetAliasdecl(newAliasdecl, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SPEC__ALIASDECL, newAliasdecl, newAliasdecl));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDef getTyped()
  {
    return typed;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTyped(TypeDef newTyped, NotificationChain msgs)
  {
    TypeDef oldTyped = typed;
    typed = newTyped;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SPEC__TYPED, oldTyped, newTyped);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTyped(TypeDef newTyped)
  {
    if (newTyped != typed)
    {
      NotificationChain msgs = null;
      if (typed != null)
        msgs = ((InternalEObject)typed).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SPEC__TYPED, null, msgs);
      if (newTyped != null)
        msgs = ((InternalEObject)newTyped).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.TYPE_SPEC__TYPED, null, msgs);
      msgs = basicSetTyped(newTyped, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.TYPE_SPEC__TYPED, newTyped, newTyped));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SPEC__ALIASDECL:
        return basicSetAliasdecl(null, msgs);
      case GoPackage.TYPE_SPEC__TYPED:
        return basicSetTyped(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SPEC__ALIASDECL:
        return getAliasdecl();
      case GoPackage.TYPE_SPEC__TYPED:
        return getTyped();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SPEC__ALIASDECL:
        setAliasdecl((AliasDecl)newValue);
        return;
      case GoPackage.TYPE_SPEC__TYPED:
        setTyped((TypeDef)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SPEC__ALIASDECL:
        setAliasdecl((AliasDecl)null);
        return;
      case GoPackage.TYPE_SPEC__TYPED:
        setTyped((TypeDef)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.TYPE_SPEC__ALIASDECL:
        return aliasdecl != null;
      case GoPackage.TYPE_SPEC__TYPED:
        return typed != null;
    }
    return super.eIsSet(featureID);
  }

} //TypeSpecImpl
