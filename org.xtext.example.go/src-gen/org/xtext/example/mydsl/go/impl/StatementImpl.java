/**
 * generated by Xtext 2.15.0-SNAPSHOT
 */
package org.xtext.example.mydsl.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.go.Block;
import org.xtext.example.mydsl.go.BreakStmt;
import org.xtext.example.mydsl.go.ContinueStmt;
import org.xtext.example.mydsl.go.Declaration;
import org.xtext.example.mydsl.go.DeferStmt;
import org.xtext.example.mydsl.go.ForStmt;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.GoStmt;
import org.xtext.example.mydsl.go.GotoStmt;
import org.xtext.example.mydsl.go.IfStmt;
import org.xtext.example.mydsl.go.LabeledStmt;
import org.xtext.example.mydsl.go.SelectStmt;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.Statement;
import org.xtext.example.mydsl.go.SwitchStmt;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getDeclaration <em>Declaration</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getLabest <em>Labest</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getSimplest <em>Simplest</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getGotst <em>Gotst</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getBreakst <em>Breakst</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getContinuest <em>Continuest</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getGotost <em>Gotost</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getFalltst <em>Falltst</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getBlock1 <em>Block1</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getIf <em>If</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getSwitch <em>Switch</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getSelectst <em>Selectst</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getForst <em>Forst</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.StatementImpl#getDeferst <em>Deferst</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StatementImpl extends MinimalEObjectImpl.Container implements Statement
{
  /**
   * The cached value of the '{@link #getDeclaration() <em>Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclaration()
   * @generated
   * @ordered
   */
  protected Declaration declaration;

  /**
   * The cached value of the '{@link #getLabest() <em>Labest</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabest()
   * @generated
   * @ordered
   */
  protected LabeledStmt labest;

  /**
   * The cached value of the '{@link #getSimplest() <em>Simplest</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimplest()
   * @generated
   * @ordered
   */
  protected SimpleStmt simplest;

  /**
   * The cached value of the '{@link #getGotst() <em>Gotst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGotst()
   * @generated
   * @ordered
   */
  protected GoStmt gotst;

  /**
   * The cached value of the '{@link #getBreakst() <em>Breakst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBreakst()
   * @generated
   * @ordered
   */
  protected BreakStmt breakst;

  /**
   * The cached value of the '{@link #getContinuest() <em>Continuest</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContinuest()
   * @generated
   * @ordered
   */
  protected ContinueStmt continuest;

  /**
   * The cached value of the '{@link #getGotost() <em>Gotost</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGotost()
   * @generated
   * @ordered
   */
  protected GotoStmt gotost;

  /**
   * The default value of the '{@link #getFalltst() <em>Falltst</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalltst()
   * @generated
   * @ordered
   */
  protected static final String FALLTST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFalltst() <em>Falltst</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalltst()
   * @generated
   * @ordered
   */
  protected String falltst = FALLTST_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlock1() <em>Block1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock1()
   * @generated
   * @ordered
   */
  protected Block block1;

  /**
   * The cached value of the '{@link #getIf() <em>If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIf()
   * @generated
   * @ordered
   */
  protected IfStmt if_;

  /**
   * The cached value of the '{@link #getSwitch() <em>Switch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSwitch()
   * @generated
   * @ordered
   */
  protected SwitchStmt switch_;

  /**
   * The cached value of the '{@link #getSelectst() <em>Selectst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectst()
   * @generated
   * @ordered
   */
  protected SelectStmt selectst;

  /**
   * The cached value of the '{@link #getForst() <em>Forst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForst()
   * @generated
   * @ordered
   */
  protected ForStmt forst;

  /**
   * The cached value of the '{@link #getDeferst() <em>Deferst</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeferst()
   * @generated
   * @ordered
   */
  protected DeferStmt deferst;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Declaration getDeclaration()
  {
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclaration(Declaration newDeclaration, NotificationChain msgs)
  {
    Declaration oldDeclaration = declaration;
    declaration = newDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DECLARATION, oldDeclaration, newDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclaration(Declaration newDeclaration)
  {
    if (newDeclaration != declaration)
    {
      NotificationChain msgs = null;
      if (declaration != null)
        msgs = ((InternalEObject)declaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DECLARATION, null, msgs);
      if (newDeclaration != null)
        msgs = ((InternalEObject)newDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DECLARATION, null, msgs);
      msgs = basicSetDeclaration(newDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DECLARATION, newDeclaration, newDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LabeledStmt getLabest()
  {
    return labest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabest(LabeledStmt newLabest, NotificationChain msgs)
  {
    LabeledStmt oldLabest = labest;
    labest = newLabest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__LABEST, oldLabest, newLabest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLabest(LabeledStmt newLabest)
  {
    if (newLabest != labest)
    {
      NotificationChain msgs = null;
      if (labest != null)
        msgs = ((InternalEObject)labest).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__LABEST, null, msgs);
      if (newLabest != null)
        msgs = ((InternalEObject)newLabest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__LABEST, null, msgs);
      msgs = basicSetLabest(newLabest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__LABEST, newLabest, newLabest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleStmt getSimplest()
  {
    return simplest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimplest(SimpleStmt newSimplest, NotificationChain msgs)
  {
    SimpleStmt oldSimplest = simplest;
    simplest = newSimplest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SIMPLEST, oldSimplest, newSimplest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimplest(SimpleStmt newSimplest)
  {
    if (newSimplest != simplest)
    {
      NotificationChain msgs = null;
      if (simplest != null)
        msgs = ((InternalEObject)simplest).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SIMPLEST, null, msgs);
      if (newSimplest != null)
        msgs = ((InternalEObject)newSimplest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SIMPLEST, null, msgs);
      msgs = basicSetSimplest(newSimplest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SIMPLEST, newSimplest, newSimplest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GoStmt getGotst()
  {
    return gotst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGotst(GoStmt newGotst, NotificationChain msgs)
  {
    GoStmt oldGotst = gotst;
    gotst = newGotst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTST, oldGotst, newGotst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGotst(GoStmt newGotst)
  {
    if (newGotst != gotst)
    {
      NotificationChain msgs = null;
      if (gotst != null)
        msgs = ((InternalEObject)gotst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTST, null, msgs);
      if (newGotst != null)
        msgs = ((InternalEObject)newGotst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTST, null, msgs);
      msgs = basicSetGotst(newGotst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTST, newGotst, newGotst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BreakStmt getBreakst()
  {
    return breakst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBreakst(BreakStmt newBreakst, NotificationChain msgs)
  {
    BreakStmt oldBreakst = breakst;
    breakst = newBreakst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BREAKST, oldBreakst, newBreakst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBreakst(BreakStmt newBreakst)
  {
    if (newBreakst != breakst)
    {
      NotificationChain msgs = null;
      if (breakst != null)
        msgs = ((InternalEObject)breakst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BREAKST, null, msgs);
      if (newBreakst != null)
        msgs = ((InternalEObject)newBreakst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BREAKST, null, msgs);
      msgs = basicSetBreakst(newBreakst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BREAKST, newBreakst, newBreakst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ContinueStmt getContinuest()
  {
    return continuest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetContinuest(ContinueStmt newContinuest, NotificationChain msgs)
  {
    ContinueStmt oldContinuest = continuest;
    continuest = newContinuest;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__CONTINUEST, oldContinuest, newContinuest);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setContinuest(ContinueStmt newContinuest)
  {
    if (newContinuest != continuest)
    {
      NotificationChain msgs = null;
      if (continuest != null)
        msgs = ((InternalEObject)continuest).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__CONTINUEST, null, msgs);
      if (newContinuest != null)
        msgs = ((InternalEObject)newContinuest).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__CONTINUEST, null, msgs);
      msgs = basicSetContinuest(newContinuest, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__CONTINUEST, newContinuest, newContinuest));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GotoStmt getGotost()
  {
    return gotost;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGotost(GotoStmt newGotost, NotificationChain msgs)
  {
    GotoStmt oldGotost = gotost;
    gotost = newGotost;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTOST, oldGotost, newGotost);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGotost(GotoStmt newGotost)
  {
    if (newGotost != gotost)
    {
      NotificationChain msgs = null;
      if (gotost != null)
        msgs = ((InternalEObject)gotost).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTOST, null, msgs);
      if (newGotost != null)
        msgs = ((InternalEObject)newGotost).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__GOTOST, null, msgs);
      msgs = basicSetGotost(newGotost, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__GOTOST, newGotost, newGotost));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getFalltst()
  {
    return falltst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFalltst(String newFalltst)
  {
    String oldFalltst = falltst;
    falltst = newFalltst;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FALLTST, oldFalltst, falltst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Block getBlock1()
  {
    return block1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock1(Block newBlock1, NotificationChain msgs)
  {
    Block oldBlock1 = block1;
    block1 = newBlock1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BLOCK1, oldBlock1, newBlock1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlock1(Block newBlock1)
  {
    if (newBlock1 != block1)
    {
      NotificationChain msgs = null;
      if (block1 != null)
        msgs = ((InternalEObject)block1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BLOCK1, null, msgs);
      if (newBlock1 != null)
        msgs = ((InternalEObject)newBlock1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__BLOCK1, null, msgs);
      msgs = basicSetBlock1(newBlock1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__BLOCK1, newBlock1, newBlock1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStmt getIf()
  {
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIf(IfStmt newIf, NotificationChain msgs)
  {
    IfStmt oldIf = if_;
    if_ = newIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__IF, oldIf, newIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIf(IfStmt newIf)
  {
    if (newIf != if_)
    {
      NotificationChain msgs = null;
      if (if_ != null)
        msgs = ((InternalEObject)if_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__IF, null, msgs);
      if (newIf != null)
        msgs = ((InternalEObject)newIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__IF, null, msgs);
      msgs = basicSetIf(newIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__IF, newIf, newIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwitchStmt getSwitch()
  {
    return switch_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSwitch(SwitchStmt newSwitch, NotificationChain msgs)
  {
    SwitchStmt oldSwitch = switch_;
    switch_ = newSwitch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SWITCH, oldSwitch, newSwitch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSwitch(SwitchStmt newSwitch)
  {
    if (newSwitch != switch_)
    {
      NotificationChain msgs = null;
      if (switch_ != null)
        msgs = ((InternalEObject)switch_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SWITCH, null, msgs);
      if (newSwitch != null)
        msgs = ((InternalEObject)newSwitch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SWITCH, null, msgs);
      msgs = basicSetSwitch(newSwitch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SWITCH, newSwitch, newSwitch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectStmt getSelectst()
  {
    return selectst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectst(SelectStmt newSelectst, NotificationChain msgs)
  {
    SelectStmt oldSelectst = selectst;
    selectst = newSelectst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SELECTST, oldSelectst, newSelectst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelectst(SelectStmt newSelectst)
  {
    if (newSelectst != selectst)
    {
      NotificationChain msgs = null;
      if (selectst != null)
        msgs = ((InternalEObject)selectst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SELECTST, null, msgs);
      if (newSelectst != null)
        msgs = ((InternalEObject)newSelectst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__SELECTST, null, msgs);
      msgs = basicSetSelectst(newSelectst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__SELECTST, newSelectst, newSelectst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForStmt getForst()
  {
    return forst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetForst(ForStmt newForst, NotificationChain msgs)
  {
    ForStmt oldForst = forst;
    forst = newForst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FORST, oldForst, newForst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setForst(ForStmt newForst)
  {
    if (newForst != forst)
    {
      NotificationChain msgs = null;
      if (forst != null)
        msgs = ((InternalEObject)forst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__FORST, null, msgs);
      if (newForst != null)
        msgs = ((InternalEObject)newForst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__FORST, null, msgs);
      msgs = basicSetForst(newForst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__FORST, newForst, newForst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeferStmt getDeferst()
  {
    return deferst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeferst(DeferStmt newDeferst, NotificationChain msgs)
  {
    DeferStmt oldDeferst = deferst;
    deferst = newDeferst;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DEFERST, oldDeferst, newDeferst);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeferst(DeferStmt newDeferst)
  {
    if (newDeferst != deferst)
    {
      NotificationChain msgs = null;
      if (deferst != null)
        msgs = ((InternalEObject)deferst).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DEFERST, null, msgs);
      if (newDeferst != null)
        msgs = ((InternalEObject)newDeferst).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.STATEMENT__DEFERST, null, msgs);
      msgs = basicSetDeferst(newDeferst, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.STATEMENT__DEFERST, newDeferst, newDeferst));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return basicSetDeclaration(null, msgs);
      case GoPackage.STATEMENT__LABEST:
        return basicSetLabest(null, msgs);
      case GoPackage.STATEMENT__SIMPLEST:
        return basicSetSimplest(null, msgs);
      case GoPackage.STATEMENT__GOTST:
        return basicSetGotst(null, msgs);
      case GoPackage.STATEMENT__BREAKST:
        return basicSetBreakst(null, msgs);
      case GoPackage.STATEMENT__CONTINUEST:
        return basicSetContinuest(null, msgs);
      case GoPackage.STATEMENT__GOTOST:
        return basicSetGotost(null, msgs);
      case GoPackage.STATEMENT__BLOCK1:
        return basicSetBlock1(null, msgs);
      case GoPackage.STATEMENT__IF:
        return basicSetIf(null, msgs);
      case GoPackage.STATEMENT__SWITCH:
        return basicSetSwitch(null, msgs);
      case GoPackage.STATEMENT__SELECTST:
        return basicSetSelectst(null, msgs);
      case GoPackage.STATEMENT__FORST:
        return basicSetForst(null, msgs);
      case GoPackage.STATEMENT__DEFERST:
        return basicSetDeferst(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return getDeclaration();
      case GoPackage.STATEMENT__LABEST:
        return getLabest();
      case GoPackage.STATEMENT__SIMPLEST:
        return getSimplest();
      case GoPackage.STATEMENT__GOTST:
        return getGotst();
      case GoPackage.STATEMENT__BREAKST:
        return getBreakst();
      case GoPackage.STATEMENT__CONTINUEST:
        return getContinuest();
      case GoPackage.STATEMENT__GOTOST:
        return getGotost();
      case GoPackage.STATEMENT__FALLTST:
        return getFalltst();
      case GoPackage.STATEMENT__BLOCK1:
        return getBlock1();
      case GoPackage.STATEMENT__IF:
        return getIf();
      case GoPackage.STATEMENT__SWITCH:
        return getSwitch();
      case GoPackage.STATEMENT__SELECTST:
        return getSelectst();
      case GoPackage.STATEMENT__FORST:
        return getForst();
      case GoPackage.STATEMENT__DEFERST:
        return getDeferst();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        setDeclaration((Declaration)newValue);
        return;
      case GoPackage.STATEMENT__LABEST:
        setLabest((LabeledStmt)newValue);
        return;
      case GoPackage.STATEMENT__SIMPLEST:
        setSimplest((SimpleStmt)newValue);
        return;
      case GoPackage.STATEMENT__GOTST:
        setGotst((GoStmt)newValue);
        return;
      case GoPackage.STATEMENT__BREAKST:
        setBreakst((BreakStmt)newValue);
        return;
      case GoPackage.STATEMENT__CONTINUEST:
        setContinuest((ContinueStmt)newValue);
        return;
      case GoPackage.STATEMENT__GOTOST:
        setGotost((GotoStmt)newValue);
        return;
      case GoPackage.STATEMENT__FALLTST:
        setFalltst((String)newValue);
        return;
      case GoPackage.STATEMENT__BLOCK1:
        setBlock1((Block)newValue);
        return;
      case GoPackage.STATEMENT__IF:
        setIf((IfStmt)newValue);
        return;
      case GoPackage.STATEMENT__SWITCH:
        setSwitch((SwitchStmt)newValue);
        return;
      case GoPackage.STATEMENT__SELECTST:
        setSelectst((SelectStmt)newValue);
        return;
      case GoPackage.STATEMENT__FORST:
        setForst((ForStmt)newValue);
        return;
      case GoPackage.STATEMENT__DEFERST:
        setDeferst((DeferStmt)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        setDeclaration((Declaration)null);
        return;
      case GoPackage.STATEMENT__LABEST:
        setLabest((LabeledStmt)null);
        return;
      case GoPackage.STATEMENT__SIMPLEST:
        setSimplest((SimpleStmt)null);
        return;
      case GoPackage.STATEMENT__GOTST:
        setGotst((GoStmt)null);
        return;
      case GoPackage.STATEMENT__BREAKST:
        setBreakst((BreakStmt)null);
        return;
      case GoPackage.STATEMENT__CONTINUEST:
        setContinuest((ContinueStmt)null);
        return;
      case GoPackage.STATEMENT__GOTOST:
        setGotost((GotoStmt)null);
        return;
      case GoPackage.STATEMENT__FALLTST:
        setFalltst(FALLTST_EDEFAULT);
        return;
      case GoPackage.STATEMENT__BLOCK1:
        setBlock1((Block)null);
        return;
      case GoPackage.STATEMENT__IF:
        setIf((IfStmt)null);
        return;
      case GoPackage.STATEMENT__SWITCH:
        setSwitch((SwitchStmt)null);
        return;
      case GoPackage.STATEMENT__SELECTST:
        setSelectst((SelectStmt)null);
        return;
      case GoPackage.STATEMENT__FORST:
        setForst((ForStmt)null);
        return;
      case GoPackage.STATEMENT__DEFERST:
        setDeferst((DeferStmt)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.STATEMENT__DECLARATION:
        return declaration != null;
      case GoPackage.STATEMENT__LABEST:
        return labest != null;
      case GoPackage.STATEMENT__SIMPLEST:
        return simplest != null;
      case GoPackage.STATEMENT__GOTST:
        return gotst != null;
      case GoPackage.STATEMENT__BREAKST:
        return breakst != null;
      case GoPackage.STATEMENT__CONTINUEST:
        return continuest != null;
      case GoPackage.STATEMENT__GOTOST:
        return gotost != null;
      case GoPackage.STATEMENT__FALLTST:
        return FALLTST_EDEFAULT == null ? falltst != null : !FALLTST_EDEFAULT.equals(falltst);
      case GoPackage.STATEMENT__BLOCK1:
        return block1 != null;
      case GoPackage.STATEMENT__IF:
        return if_ != null;
      case GoPackage.STATEMENT__SWITCH:
        return switch_ != null;
      case GoPackage.STATEMENT__SELECTST:
        return selectst != null;
      case GoPackage.STATEMENT__FORST:
        return forst != null;
      case GoPackage.STATEMENT__DEFERST:
        return deferst != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (falltst: ");
    result.append(falltst);
    result.append(')');
    return result.toString();
  }

} //StatementImpl
