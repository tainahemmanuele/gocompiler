/**
 * generated by Xtext 2.14.0.RC1
 */
package org.xtext.example.mydsl.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.mydsl.go.ChannelType;
import org.xtext.example.mydsl.go.ElementType;
import org.xtext.example.mydsl.go.GoPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Channel Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.ChannelTypeImpl#getElemtype <em>Elemtype</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChannelTypeImpl extends TypeLitImpl implements ChannelType
{
  /**
   * The cached value of the '{@link #getElemtype() <em>Elemtype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElemtype()
   * @generated
   * @ordered
   */
  protected ElementType elemtype;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChannelTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.CHANNEL_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType getElemtype()
  {
    return elemtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElemtype(ElementType newElemtype, NotificationChain msgs)
  {
    ElementType oldElemtype = elemtype;
    elemtype = newElemtype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.CHANNEL_TYPE__ELEMTYPE, oldElemtype, newElemtype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElemtype(ElementType newElemtype)
  {
    if (newElemtype != elemtype)
    {
      NotificationChain msgs = null;
      if (elemtype != null)
        msgs = ((InternalEObject)elemtype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.CHANNEL_TYPE__ELEMTYPE, null, msgs);
      if (newElemtype != null)
        msgs = ((InternalEObject)newElemtype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.CHANNEL_TYPE__ELEMTYPE, null, msgs);
      msgs = basicSetElemtype(newElemtype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.CHANNEL_TYPE__ELEMTYPE, newElemtype, newElemtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.CHANNEL_TYPE__ELEMTYPE:
        return basicSetElemtype(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.CHANNEL_TYPE__ELEMTYPE:
        return getElemtype();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.CHANNEL_TYPE__ELEMTYPE:
        setElemtype((ElementType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.CHANNEL_TYPE__ELEMTYPE:
        setElemtype((ElementType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.CHANNEL_TYPE__ELEMTYPE:
        return elemtype != null;
    }
    return super.eIsSet(featureID);
  }

} //ChannelTypeImpl
