/**
 * generated by Xtext 2.14.0.RC1
 */
package org.xtext.example.mydsl.go.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.go.ArrayType;
import org.xtext.example.mydsl.go.ElementType;
import org.xtext.example.mydsl.go.GoPackage;
import org.xtext.example.mydsl.go.LiteralType;
import org.xtext.example.mydsl.go.MapType;
import org.xtext.example.mydsl.go.SliceType;
import org.xtext.example.mydsl.go.StructType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Literal Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getStructtype <em>Structtype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getArraytype <em>Arraytype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getElementype <em>Elementype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getSlicetype <em>Slicetype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getMaptype <em>Maptype</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.go.impl.LiteralTypeImpl#getTypename <em>Typename</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LiteralTypeImpl extends MinimalEObjectImpl.Container implements LiteralType
{
  /**
   * The cached value of the '{@link #getStructtype() <em>Structtype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStructtype()
   * @generated
   * @ordered
   */
  protected StructType structtype;

  /**
   * The cached value of the '{@link #getArraytype() <em>Arraytype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArraytype()
   * @generated
   * @ordered
   */
  protected ArrayType arraytype;

  /**
   * The cached value of the '{@link #getElementype() <em>Elementype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementype()
   * @generated
   * @ordered
   */
  protected ElementType elementype;

  /**
   * The cached value of the '{@link #getSlicetype() <em>Slicetype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSlicetype()
   * @generated
   * @ordered
   */
  protected SliceType slicetype;

  /**
   * The cached value of the '{@link #getMaptype() <em>Maptype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaptype()
   * @generated
   * @ordered
   */
  protected MapType maptype;

  /**
   * The default value of the '{@link #getTypename() <em>Typename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypename()
   * @generated
   * @ordered
   */
  protected static final String TYPENAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTypename() <em>Typename</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypename()
   * @generated
   * @ordered
   */
  protected String typename = TYPENAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LiteralTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GoPackage.Literals.LITERAL_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StructType getStructtype()
  {
    return structtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStructtype(StructType newStructtype, NotificationChain msgs)
  {
    StructType oldStructtype = structtype;
    structtype = newStructtype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__STRUCTTYPE, oldStructtype, newStructtype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStructtype(StructType newStructtype)
  {
    if (newStructtype != structtype)
    {
      NotificationChain msgs = null;
      if (structtype != null)
        msgs = ((InternalEObject)structtype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__STRUCTTYPE, null, msgs);
      if (newStructtype != null)
        msgs = ((InternalEObject)newStructtype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__STRUCTTYPE, null, msgs);
      msgs = basicSetStructtype(newStructtype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__STRUCTTYPE, newStructtype, newStructtype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayType getArraytype()
  {
    return arraytype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArraytype(ArrayType newArraytype, NotificationChain msgs)
  {
    ArrayType oldArraytype = arraytype;
    arraytype = newArraytype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ARRAYTYPE, oldArraytype, newArraytype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArraytype(ArrayType newArraytype)
  {
    if (newArraytype != arraytype)
    {
      NotificationChain msgs = null;
      if (arraytype != null)
        msgs = ((InternalEObject)arraytype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ARRAYTYPE, null, msgs);
      if (newArraytype != null)
        msgs = ((InternalEObject)newArraytype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ARRAYTYPE, null, msgs);
      msgs = basicSetArraytype(newArraytype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ARRAYTYPE, newArraytype, newArraytype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementType getElementype()
  {
    return elementype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElementype(ElementType newElementype, NotificationChain msgs)
  {
    ElementType oldElementype = elementype;
    elementype = newElementype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ELEMENTYPE, oldElementype, newElementype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElementype(ElementType newElementype)
  {
    if (newElementype != elementype)
    {
      NotificationChain msgs = null;
      if (elementype != null)
        msgs = ((InternalEObject)elementype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ELEMENTYPE, null, msgs);
      if (newElementype != null)
        msgs = ((InternalEObject)newElementype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__ELEMENTYPE, null, msgs);
      msgs = basicSetElementype(newElementype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__ELEMENTYPE, newElementype, newElementype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SliceType getSlicetype()
  {
    return slicetype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSlicetype(SliceType newSlicetype, NotificationChain msgs)
  {
    SliceType oldSlicetype = slicetype;
    slicetype = newSlicetype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__SLICETYPE, oldSlicetype, newSlicetype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSlicetype(SliceType newSlicetype)
  {
    if (newSlicetype != slicetype)
    {
      NotificationChain msgs = null;
      if (slicetype != null)
        msgs = ((InternalEObject)slicetype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__SLICETYPE, null, msgs);
      if (newSlicetype != null)
        msgs = ((InternalEObject)newSlicetype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__SLICETYPE, null, msgs);
      msgs = basicSetSlicetype(newSlicetype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__SLICETYPE, newSlicetype, newSlicetype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MapType getMaptype()
  {
    return maptype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMaptype(MapType newMaptype, NotificationChain msgs)
  {
    MapType oldMaptype = maptype;
    maptype = newMaptype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__MAPTYPE, oldMaptype, newMaptype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMaptype(MapType newMaptype)
  {
    if (newMaptype != maptype)
    {
      NotificationChain msgs = null;
      if (maptype != null)
        msgs = ((InternalEObject)maptype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__MAPTYPE, null, msgs);
      if (newMaptype != null)
        msgs = ((InternalEObject)newMaptype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GoPackage.LITERAL_TYPE__MAPTYPE, null, msgs);
      msgs = basicSetMaptype(newMaptype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__MAPTYPE, newMaptype, newMaptype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTypename()
  {
    return typename;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypename(String newTypename)
  {
    String oldTypename = typename;
    typename = newTypename;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GoPackage.LITERAL_TYPE__TYPENAME, oldTypename, typename));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__STRUCTTYPE:
        return basicSetStructtype(null, msgs);
      case GoPackage.LITERAL_TYPE__ARRAYTYPE:
        return basicSetArraytype(null, msgs);
      case GoPackage.LITERAL_TYPE__ELEMENTYPE:
        return basicSetElementype(null, msgs);
      case GoPackage.LITERAL_TYPE__SLICETYPE:
        return basicSetSlicetype(null, msgs);
      case GoPackage.LITERAL_TYPE__MAPTYPE:
        return basicSetMaptype(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__STRUCTTYPE:
        return getStructtype();
      case GoPackage.LITERAL_TYPE__ARRAYTYPE:
        return getArraytype();
      case GoPackage.LITERAL_TYPE__ELEMENTYPE:
        return getElementype();
      case GoPackage.LITERAL_TYPE__SLICETYPE:
        return getSlicetype();
      case GoPackage.LITERAL_TYPE__MAPTYPE:
        return getMaptype();
      case GoPackage.LITERAL_TYPE__TYPENAME:
        return getTypename();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__STRUCTTYPE:
        setStructtype((StructType)newValue);
        return;
      case GoPackage.LITERAL_TYPE__ARRAYTYPE:
        setArraytype((ArrayType)newValue);
        return;
      case GoPackage.LITERAL_TYPE__ELEMENTYPE:
        setElementype((ElementType)newValue);
        return;
      case GoPackage.LITERAL_TYPE__SLICETYPE:
        setSlicetype((SliceType)newValue);
        return;
      case GoPackage.LITERAL_TYPE__MAPTYPE:
        setMaptype((MapType)newValue);
        return;
      case GoPackage.LITERAL_TYPE__TYPENAME:
        setTypename((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__STRUCTTYPE:
        setStructtype((StructType)null);
        return;
      case GoPackage.LITERAL_TYPE__ARRAYTYPE:
        setArraytype((ArrayType)null);
        return;
      case GoPackage.LITERAL_TYPE__ELEMENTYPE:
        setElementype((ElementType)null);
        return;
      case GoPackage.LITERAL_TYPE__SLICETYPE:
        setSlicetype((SliceType)null);
        return;
      case GoPackage.LITERAL_TYPE__MAPTYPE:
        setMaptype((MapType)null);
        return;
      case GoPackage.LITERAL_TYPE__TYPENAME:
        setTypename(TYPENAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GoPackage.LITERAL_TYPE__STRUCTTYPE:
        return structtype != null;
      case GoPackage.LITERAL_TYPE__ARRAYTYPE:
        return arraytype != null;
      case GoPackage.LITERAL_TYPE__ELEMENTYPE:
        return elementype != null;
      case GoPackage.LITERAL_TYPE__SLICETYPE:
        return slicetype != null;
      case GoPackage.LITERAL_TYPE__MAPTYPE:
        return maptype != null;
      case GoPackage.LITERAL_TYPE__TYPENAME:
        return TYPENAME_EDEFAULT == null ? typename != null : !TYPENAME_EDEFAULT.equals(typename);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (typename: ");
    result.append(typename);
    result.append(')');
    return result.toString();
  }

} //LiteralTypeImpl
