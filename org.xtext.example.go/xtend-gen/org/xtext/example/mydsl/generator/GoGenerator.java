/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.go.Assignment;
import org.xtext.example.mydsl.go.Block;
import org.xtext.example.mydsl.go.Condition;
import org.xtext.example.mydsl.go.Declaration;
import org.xtext.example.mydsl.go.Expression;
import org.xtext.example.mydsl.go.ExpressionStmt;
import org.xtext.example.mydsl.go.ForClause;
import org.xtext.example.mydsl.go.ForStmt;
import org.xtext.example.mydsl.go.FunctionBody;
import org.xtext.example.mydsl.go.FunctionDecl;
import org.xtext.example.mydsl.go.IncDecStmt;
import org.xtext.example.mydsl.go.InitStmt;
import org.xtext.example.mydsl.go.PostStmt;
import org.xtext.example.mydsl.go.ShortVarDecl;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.Statement;
import org.xtext.example.mydsl.go.StatementList;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GoGenerator extends AbstractGenerator {
  private Integer regCount = Integer.valueOf(0);
  
  private Integer lineCount = Integer.valueOf(0);
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<FunctionDecl> _filter = Iterables.<FunctionDecl>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FunctionDecl.class);
    for (final FunctionDecl f : _filter) {
      String _string = f.getFunctionn().toString();
      String _plus = (_string + ".txt");
      fsa.generateFile(_plus, this.genFunc(f));
    }
  }
  
  public CharSequence genFunc(final FunctionDecl f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<lineCount>>: LD SP 1000");
    _builder.newLine();
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("<<f.body.genFunctionBody>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genFunctionBody(final FunctionBody fb) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<fb.block.genBlock>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genBlock(final Block b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF b.statementlist != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<b.statementlist.genStatementList>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genStatementList(final StatementList sl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<FOR stmt : sl.statements>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<stmt.genStatement>>");
    _builder.newLine();
    _builder.append("<<ENDFOR>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genStatement(final Statement s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF s.declaration != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genDeclaration(s.declaration)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF s.simplest != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genSimpleStmt(s.simplest)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF s.forst != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genForStmt(s.forst)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genDeclaration(final Declaration d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF d.constdecl != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genConstDecl(d.constdecl)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF d.vardecl != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genVarDecl(d.vardecl)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genSimpleStatement(final SimpleStmt ss) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF ss.inc != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genIncDecStmt(ss.inc)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF ss.ass != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genAssignment(ss.ass)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF ss.svd != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genShortVarDecl(ss.svd)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF ss.es != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpressionStmt(ss.es)>>");
    _builder.newLine();
    _builder.append("<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genForStmt(final ForStmt fs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#FOR");
    _builder.newLine();
    _builder.append("<<IF fs.for != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genForClause(fs.for)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF fs.condition != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genCondition(f.condition)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<IF fs.block != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genBlock(fs.block)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<lineCount>>: BR #FOR");
    _builder.newLine();
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("#ENDFOR");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genForClause(final ForClause fc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF fc.init != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genInitStmt(fc.init)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<IF fc.condition != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genCondition(fc.condition)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<IF fc.poststmt != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genPostStmt(fc.poststmt)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genInitStmt(final InitStmt is) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF is.simple != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genSimpleStmt(is.simple)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genCondition(final Condition c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF c.exp != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpression(c.exp)>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<IF c.exp.exp.bop.toString.equals(\"<\")>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<lineCount>>: BLTZ R<<regCount>>, #ENDFOR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<ELSEIF c.exp.exp.bop.toString.equals(\"<=\")>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<lineCount>>: BLEZ R<<regCount>>, #ENDFOR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<ELSEIF c.exp.exp.bop.toString.equals(\">\")>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<lineCount>>: BGTZ R<<regCount>>, #ENDFOR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<ELSEIF c.exp.exp.bop.toString.equals(\"<=\")>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<lineCount>>: BGEZ R<<regCount>>, #ENDFOR");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<nextLine>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genPostStmt(final PostStmt ps) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF ps.simple != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genSimpleStmt(ps.simple)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genIncDecStmt(final IncDecStmt inc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF inc.exp != null >>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpression(inc.exp)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genAssignment(final Assignment ass) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF ass.expressionlist != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpressionList(ass.expressionlist)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF ass.expressionlist2 != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpressionList(ass.expressionlist)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genShortVarDecl(final ShortVarDecl ss) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF ss.idl != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genIdentifierList(ss.idl)>>");
    _builder.newLine();
    _builder.append("<<ELSEIF ss.epl != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpressionList(ss.epl)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genExpressionStmt(final ExpressionStmt es) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF es.exp != null>>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<genExpression(es.exp)>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<<IF exp.up != null >>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<IF exp.up.pr.op.literal != null>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<IF exp.exp ==null >>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<IF exp.up.pr.op.literal.basic.strd != null>>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<<genStringExpression(exp)>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<ELSE>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<IF exp.exp.bop.equals(\"+\")  >>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<<genIntLiteralExpression(exp)>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<ELSE IF exp.exp.bop.equals(\"-\")  >>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<<genIntLiteralExpression(exp)>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<ELSE IF exp.exp.bop.equals(\"*\")  >>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<<genIntLiteralExpression(exp)>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<ELSE IF exp.exp.bop.equals(\"/\")  >>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<<genIntLiteralExpression(exp)>>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    _builder.append("<<ENDIF>>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genStringExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.lineCount.toString();
    _builder.append(_string);
    _builder.append(": LD R");
    String _string_1 = this.regCount.toString();
    _builder.append(_string_1);
    _builder.append(", \"");
    String _strd = exp.getUp().getPr().getOp().getLiteral().getBasic().getStrd();
    _builder.append(_strd);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genIntLiteralExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.lineCount.toString();
    _builder.append(_string);
    _builder.append(": LD R");
    String _string_1 = this.regCount.toString();
    _builder.append(_string_1);
    _builder.append(", #");
    String _intd = exp.getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    String _string_2 = this.lineCount.toString();
    _builder.append(_string_2);
    _builder.append(": LD R");
    String _string_3 = this.regCount.toString();
    _builder.append(_string_3);
    _builder.append(", #");
    String _intd_1 = exp.getExp().getExpression().getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd_1);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getExp().getBop().equals("+");
      if (_equals) {
        String _string_4 = this.lineCount.toString();
        _builder.append(_string_4);
        _builder.append(": ADD R");
        String _string_5 = new Integer(((this.regCount).intValue() - 2)).toString();
        _builder.append(_string_5);
        _builder.append(", R");
        String _string_6 = new Integer(((this.regCount).intValue() - 1)).toString();
        _builder.append(_string_6);
        _builder.append(" , R");
        String _string_7 = new Integer(((this.regCount).intValue() - 2)).toString();
        _builder.append(_string_7);
        _builder.newLineIfNotEmpty();
        this.nextLine();
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = exp.getExp().getBop().equals("*");
        if (_equals_1) {
          String _string_8 = this.lineCount.toString();
          _builder.append(_string_8);
          _builder.append(": MUL R");
          String _string_9 = new Integer(((this.regCount).intValue() - 2)).toString();
          _builder.append(_string_9);
          _builder.append(", R");
          String _string_10 = new Integer(((this.regCount).intValue() - 1)).toString();
          _builder.append(_string_10);
          _builder.append(" , R");
          String _string_11 = new Integer(((this.regCount).intValue() - 2)).toString();
          _builder.append(_string_11);
          _builder.newLineIfNotEmpty();
          this.nextLine();
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = exp.getExp().getBop().equals("/");
          if (_equals_2) {
            String _string_12 = this.lineCount.toString();
            _builder.append(_string_12);
            _builder.append(": DIV R");
            String _string_13 = new Integer(((this.regCount).intValue() - 2)).toString();
            _builder.append(_string_13);
            _builder.append(", R");
            String _string_14 = new Integer(((this.regCount).intValue() - 1)).toString();
            _builder.append(_string_14);
            _builder.append(" , R");
            String _string_15 = new Integer(((this.regCount).intValue() - 2)).toString();
            _builder.append(_string_15);
            _builder.newLineIfNotEmpty();
            this.nextLine();
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_3 = exp.getExp().getBop().equals("-");
            if (_equals_3) {
              String _string_16 = this.lineCount.toString();
              _builder.append(_string_16);
              _builder.append(": SUB R");
              String _string_17 = new Integer(((this.regCount).intValue() - 2)).toString();
              _builder.append(_string_17);
              _builder.append(", R");
              String _string_18 = new Integer(((this.regCount).intValue() - 1)).toString();
              _builder.append(_string_18);
              _builder.append(" , R");
              String _string_19 = new Integer(((this.regCount).intValue() - 2)).toString();
              _builder.append(_string_19);
              _builder.newLineIfNotEmpty();
              this.nextLine();
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    this.nextReg();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genLogicalExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public void nextReg() {
    this.regCount++;
  }
  
  public void nextLine() {
    this.lineCount = Integer.valueOf(((this.lineCount).intValue() + 8));
  }
}
