/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.go.Assignment;
import org.xtext.example.mydsl.go.Block;
import org.xtext.example.mydsl.go.Condition;
import org.xtext.example.mydsl.go.ConstDecl;
import org.xtext.example.mydsl.go.Declaration;
import org.xtext.example.mydsl.go.Expression;
import org.xtext.example.mydsl.go.Expression2;
import org.xtext.example.mydsl.go.ExpressionList;
import org.xtext.example.mydsl.go.ExpressionStmt;
import org.xtext.example.mydsl.go.ForClause;
import org.xtext.example.mydsl.go.ForStmt;
import org.xtext.example.mydsl.go.FunctionBody;
import org.xtext.example.mydsl.go.FunctionDecl;
import org.xtext.example.mydsl.go.IdentifierList;
import org.xtext.example.mydsl.go.IncDecStmt;
import org.xtext.example.mydsl.go.InitStmt;
import org.xtext.example.mydsl.go.Literal;
import org.xtext.example.mydsl.go.PostStmt;
import org.xtext.example.mydsl.go.ShortVarDecl;
import org.xtext.example.mydsl.go.SimpleStmt;
import org.xtext.example.mydsl.go.Statement;
import org.xtext.example.mydsl.go.StatementList;
import org.xtext.example.mydsl.go.UnaryExpr;
import org.xtext.example.mydsl.go.VarDecl;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GoGenerator extends AbstractGenerator {
  private Integer regCount = Integer.valueOf(0);
  
  private Integer lineCount = Integer.valueOf(0);
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<FunctionDecl> _filter = Iterables.<FunctionDecl>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), FunctionDecl.class);
    for (final FunctionDecl f : _filter) {
      String _string = f.getFunctionn().toString();
      String _plus = (_string + ".txt");
      fsa.generateFile(_plus, this.genFunc(f));
    }
  }
  
  public CharSequence genFunc(final FunctionDecl f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(this.lineCount);
    _builder.append(": LD SP 1000");
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    {
      FunctionBody _body = f.getBody();
      boolean _tripleNotEquals = (_body != null);
      if (_tripleNotEquals) {
        CharSequence _genFunctionBody = this.genFunctionBody(f.getBody());
        _builder.append(_genFunctionBody);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genFunctionBody(final FunctionBody fb) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _genBlock = this.genBlock(fb.getBlock());
    _builder.append(_genBlock);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genBlock(final Block b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      StatementList _statementlist = b.getStatementlist();
      boolean _tripleNotEquals = (_statementlist != null);
      if (_tripleNotEquals) {
        CharSequence _genStatementList = this.genStatementList(b.getStatementlist());
        _builder.append(_genStatementList);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genStatementList(final StatementList sl) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Statement> _statment = sl.getStatment();
      for(final Statement stmt : _statment) {
        CharSequence _genStatement = this.genStatement(stmt);
        _builder.append(_genStatement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genStatement(final Statement s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Declaration _declaration = s.getDeclaration();
      boolean _tripleNotEquals = (_declaration != null);
      if (_tripleNotEquals) {
        CharSequence _genDeclaration = this.genDeclaration(s.getDeclaration());
        _builder.append(_genDeclaration);
        _builder.newLineIfNotEmpty();
      } else {
        SimpleStmt _simplest = s.getSimplest();
        boolean _tripleNotEquals_1 = (_simplest != null);
        if (_tripleNotEquals_1) {
          CharSequence _genSimpleStmt = this.genSimpleStmt(s.getSimplest());
          _builder.append(_genSimpleStmt);
          _builder.newLineIfNotEmpty();
        } else {
          ForStmt _forst = s.getForst();
          boolean _tripleNotEquals_2 = (_forst != null);
          if (_tripleNotEquals_2) {
            CharSequence _genForStmt = this.genForStmt(s.getForst());
            _builder.append(_genForStmt);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genSimpleStmt(final SimpleStmt stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genDeclaration(final Declaration d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ConstDecl _cd = d.getCd();
      boolean _tripleNotEquals = (_cd != null);
      if (_tripleNotEquals) {
        CharSequence _genConstDecl = this.genConstDecl(d.getCd());
        _builder.append(_genConstDecl);
        _builder.newLineIfNotEmpty();
      } else {
        VarDecl _vd = d.getVd();
        boolean _tripleNotEquals_1 = (_vd != null);
        if (_tripleNotEquals_1) {
          CharSequence _genVarDecl = this.genVarDecl(d.getVd());
          _builder.append(_genVarDecl);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genVarDecl(final VarDecl decl) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genConstDecl(final ConstDecl decl) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genSimpleStatement(final SimpleStmt ss) {
    StringConcatenation _builder = new StringConcatenation();
    {
      IncDecStmt _inc = ss.getInc();
      boolean _tripleNotEquals = (_inc != null);
      if (_tripleNotEquals) {
        CharSequence _genIncDecStmt = this.genIncDecStmt(ss.getInc());
        _builder.append(_genIncDecStmt);
        _builder.newLineIfNotEmpty();
      } else {
        Assignment _ass = ss.getAss();
        boolean _tripleNotEquals_1 = (_ass != null);
        if (_tripleNotEquals_1) {
          CharSequence _genAssignment = this.genAssignment(ss.getAss());
          _builder.append(_genAssignment);
          _builder.newLineIfNotEmpty();
        } else {
          ShortVarDecl _svd = ss.getSvd();
          boolean _tripleNotEquals_2 = (_svd != null);
          if (_tripleNotEquals_2) {
            CharSequence _genShortVarDecl = this.genShortVarDecl(ss.getSvd());
            _builder.append(_genShortVarDecl);
            _builder.newLineIfNotEmpty();
          } else {
            ExpressionStmt _es = ss.getEs();
            boolean _tripleNotEquals_3 = (_es != null);
            if (_tripleNotEquals_3) {
              CharSequence _genExpressionStmt = this.genExpressionStmt(ss.getEs());
              _builder.append(_genExpressionStmt);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genForStmt(final ForStmt fs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#FOR");
    _builder.newLine();
    {
      ForClause _for = fs.getFor();
      boolean _tripleNotEquals = (_for != null);
      if (_tripleNotEquals) {
        CharSequence _genForClause = this.genForClause(fs.getFor());
        _builder.append(_genForClause);
        _builder.newLineIfNotEmpty();
      } else {
        Condition _condition = fs.getCondition();
        boolean _tripleNotEquals_1 = (_condition != null);
        if (_tripleNotEquals_1) {
          CharSequence _genCondition = this.genCondition(fs.getCondition());
          _builder.append(_genCondition);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    {
      Block _block = fs.getBlock();
      boolean _tripleNotEquals_2 = (_block != null);
      if (_tripleNotEquals_2) {
        Object _genBlock = this.genBlock(fs.getBlock());
        _builder.append(_genBlock);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(this.lineCount);
    _builder.append(": BR #FOR");
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    _builder.append("#ENDFOR");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence genForClause(final ForClause fc) {
    StringConcatenation _builder = new StringConcatenation();
    {
      InitStmt _init = fc.getInit();
      boolean _tripleNotEquals = (_init != null);
      if (_tripleNotEquals) {
        CharSequence _genInitStmt = this.genInitStmt(fc.getInit());
        _builder.append(_genInitStmt);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Condition _condition = fc.getCondition();
      boolean _tripleNotEquals_1 = (_condition != null);
      if (_tripleNotEquals_1) {
        CharSequence _genCondition = this.genCondition(fc.getCondition());
        _builder.append(_genCondition);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      PostStmt _poststmt = fc.getPoststmt();
      boolean _tripleNotEquals_2 = (_poststmt != null);
      if (_tripleNotEquals_2) {
        CharSequence _genPostStmt = this.genPostStmt(fc.getPoststmt());
        _builder.append(_genPostStmt);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genInitStmt(final InitStmt is) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SimpleStmt _simple = is.getSimple();
      boolean _tripleNotEquals = (_simple != null);
      if (_tripleNotEquals) {
        CharSequence _genSimpleStmt = this.genSimpleStmt(is.getSimple());
        _builder.append(_genSimpleStmt);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genCondition(final Condition c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _exp = c.getExp();
      boolean _tripleNotEquals = (_exp != null);
      if (_tripleNotEquals) {
        CharSequence _genExpression = this.genExpression(c.getExp());
        _builder.append(_genExpression);
        _builder.newLineIfNotEmpty();
        {
          boolean _equals = c.getExp().getExp().getBop().toString().equals("<");
          if (_equals) {
            _builder.append(this.lineCount);
            _builder.append(": BLTZ R");
            _builder.append(this.regCount);
            _builder.append(", #ENDFOR");
            _builder.newLineIfNotEmpty();
            this.nextLine();
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_1 = c.getExp().getExp().getBop().toString().equals("<=");
            if (_equals_1) {
              _builder.append(this.lineCount);
              _builder.append(": BLEZ R");
              _builder.append(this.regCount);
              _builder.append(", #ENDFOR");
              _builder.newLineIfNotEmpty();
              this.nextLine();
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equals_2 = c.getExp().getExp().getBop().toString().equals(">");
              if (_equals_2) {
                _builder.append(this.lineCount);
                _builder.append(": BGTZ R");
                _builder.append(this.regCount);
                _builder.append(", #ENDFOR");
                _builder.newLineIfNotEmpty();
                this.nextLine();
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equals_3 = c.getExp().getExp().getBop().toString().equals("<=");
                if (_equals_3) {
                  _builder.append(this.lineCount);
                  _builder.append(": BGEZ R");
                  _builder.append(this.regCount);
                  _builder.append(", #ENDFOR");
                  _builder.newLineIfNotEmpty();
                  this.nextLine();
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genPostStmt(final PostStmt ps) {
    StringConcatenation _builder = new StringConcatenation();
    {
      SimpleStmt _simple = ps.getSimple();
      boolean _tripleNotEquals = (_simple != null);
      if (_tripleNotEquals) {
        CharSequence _genSimpleStmt = this.genSimpleStmt(ps.getSimple());
        _builder.append(_genSimpleStmt);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genIncDecStmt(final IncDecStmt inc) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _exp = inc.getExp();
      boolean _tripleNotEquals = (_exp != null);
      if (_tripleNotEquals) {
        CharSequence _genExpression = this.genExpression(inc.getExp());
        _builder.append(_genExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genAssignment(final Assignment ass) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ExpressionList _expressionlist = ass.getExpressionlist();
      boolean _tripleNotEquals = (_expressionlist != null);
      if (_tripleNotEquals) {
        CharSequence _genExpressionList = this.genExpressionList(ass.getExpressionlist());
        _builder.append(_genExpressionList);
        _builder.newLineIfNotEmpty();
      } else {
        ExpressionList _expressionlist2 = ass.getExpressionlist2();
        boolean _tripleNotEquals_1 = (_expressionlist2 != null);
        if (_tripleNotEquals_1) {
          CharSequence _genExpressionList_1 = this.genExpressionList(ass.getExpressionlist());
          _builder.append(_genExpressionList_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genExpressionList(final ExpressionList list) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genShortVarDecl(final ShortVarDecl ss) {
    StringConcatenation _builder = new StringConcatenation();
    {
      IdentifierList _idl = ss.getIdl();
      boolean _tripleNotEquals = (_idl != null);
      if (_tripleNotEquals) {
        CharSequence _genIdentifierList = this.genIdentifierList(ss.getIdl());
        _builder.append(_genIdentifierList);
        _builder.newLineIfNotEmpty();
      } else {
        ExpressionList _epl = ss.getEpl();
        boolean _tripleNotEquals_1 = (_epl != null);
        if (_tripleNotEquals_1) {
          CharSequence _genExpressionList = this.genExpressionList(ss.getEpl());
          _builder.append(_genExpressionList);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genIdentifierList(final IdentifierList list) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence genExpressionStmt(final ExpressionStmt es) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _exp = es.getExp();
      boolean _tripleNotEquals = (_exp != null);
      if (_tripleNotEquals) {
        CharSequence _genExpression = this.genExpression(es.getExp());
        _builder.append(_genExpression);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      UnaryExpr _up = exp.getUp();
      boolean _tripleNotEquals = (_up != null);
      if (_tripleNotEquals) {
        {
          Literal _literal = exp.getUp().getPr().getOp().getLiteral();
          boolean _tripleNotEquals_1 = (_literal != null);
          if (_tripleNotEquals_1) {
            {
              Expression2 _exp = exp.getExp();
              boolean _tripleEquals = (_exp == null);
              if (_tripleEquals) {
                {
                  String _strd = exp.getUp().getPr().getOp().getLiteral().getBasic().getStrd();
                  boolean _tripleNotEquals_2 = (_strd != null);
                  if (_tripleNotEquals_2) {
                    CharSequence _genStringExpression = this.genStringExpression(exp);
                    _builder.append(_genStringExpression);
                    _builder.newLineIfNotEmpty();
                  }
                }
              } else {
                {
                  boolean _equals = exp.getExp().getBop().equals("+");
                  if (_equals) {
                    CharSequence _genIntLiteralExpression = this.genIntLiteralExpression(exp);
                    _builder.append(_genIntLiteralExpression);
                    _builder.newLineIfNotEmpty();
                  } else {
                    boolean _equals_1 = exp.getExp().getBop().equals("-");
                    if (_equals_1) {
                      CharSequence _genIntLiteralExpression_1 = this.genIntLiteralExpression(exp);
                      _builder.append(_genIntLiteralExpression_1);
                      _builder.newLineIfNotEmpty();
                    } else {
                      boolean _equals_2 = exp.getExp().getBop().equals("*");
                      if (_equals_2) {
                        CharSequence _genIntLiteralExpression_2 = this.genIntLiteralExpression(exp);
                        _builder.append(_genIntLiteralExpression_2);
                        _builder.newLineIfNotEmpty();
                      } else {
                        boolean _equals_3 = exp.getExp().getBop().equals("/");
                        if (_equals_3) {
                          CharSequence _genIntLiteralExpression_3 = this.genIntLiteralExpression(exp);
                          _builder.append(_genIntLiteralExpression_3);
                          _builder.newLineIfNotEmpty();
                        } else {
                          CharSequence _genLogicalExpression = this.genLogicalExpression(exp);
                          _builder.append(_genLogicalExpression);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence genStringExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.lineCount.toString();
    _builder.append(_string);
    _builder.append(": LD R");
    String _string_1 = this.regCount.toString();
    _builder.append(_string_1);
    _builder.append(", \"");
    String _strd = exp.getUp().getPr().getOp().getLiteral().getBasic().getStrd();
    _builder.append(_strd);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genIntLiteralExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.lineCount.toString();
    _builder.append(_string);
    _builder.append(": LD R");
    String _string_1 = this.regCount.toString();
    _builder.append(_string_1);
    _builder.append(", #");
    String _intd = exp.getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    String _string_2 = this.lineCount.toString();
    _builder.append(_string_2);
    _builder.append(": LD R");
    String _string_3 = this.regCount.toString();
    _builder.append(_string_3);
    _builder.append(", #");
    String _intd_1 = exp.getExp().getExpression().getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd_1);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getExp().getBop().equals("+");
      if (_equals) {
        String _string_4 = this.lineCount.toString();
        _builder.append(_string_4);
        _builder.append(": ADD R");
        String _string_5 = new Integer(((this.regCount).intValue() - 2)).toString();
        _builder.append(_string_5);
        _builder.append(", R");
        String _string_6 = new Integer(((this.regCount).intValue() - 1)).toString();
        _builder.append(_string_6);
        _builder.append(" , R");
        String _string_7 = new Integer(((this.regCount).intValue() - 2)).toString();
        _builder.append(_string_7);
        _builder.newLineIfNotEmpty();
        this.nextLine();
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = exp.getExp().getBop().equals("*");
        if (_equals_1) {
          String _string_8 = this.lineCount.toString();
          _builder.append(_string_8);
          _builder.append(": MUL R");
          String _string_9 = new Integer(((this.regCount).intValue() - 2)).toString();
          _builder.append(_string_9);
          _builder.append(", R");
          String _string_10 = new Integer(((this.regCount).intValue() - 1)).toString();
          _builder.append(_string_10);
          _builder.append(" , R");
          String _string_11 = new Integer(((this.regCount).intValue() - 2)).toString();
          _builder.append(_string_11);
          _builder.newLineIfNotEmpty();
          this.nextLine();
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = exp.getExp().getBop().equals("/");
          if (_equals_2) {
            String _string_12 = this.lineCount.toString();
            _builder.append(_string_12);
            _builder.append(": DIV R");
            String _string_13 = new Integer(((this.regCount).intValue() - 2)).toString();
            _builder.append(_string_13);
            _builder.append(", R");
            String _string_14 = new Integer(((this.regCount).intValue() - 1)).toString();
            _builder.append(_string_14);
            _builder.append(" , R");
            String _string_15 = new Integer(((this.regCount).intValue() - 2)).toString();
            _builder.append(_string_15);
            _builder.newLineIfNotEmpty();
            this.nextLine();
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_3 = exp.getExp().getBop().equals("-");
            if (_equals_3) {
              String _string_16 = this.lineCount.toString();
              _builder.append(_string_16);
              _builder.append(": SUB R");
              String _string_17 = new Integer(((this.regCount).intValue() - 2)).toString();
              _builder.append(_string_17);
              _builder.append(", R");
              String _string_18 = new Integer(((this.regCount).intValue() - 1)).toString();
              _builder.append(_string_18);
              _builder.append(" , R");
              String _string_19 = new Integer(((this.regCount).intValue() - 2)).toString();
              _builder.append(_string_19);
              _builder.newLineIfNotEmpty();
              this.nextLine();
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    this.nextReg();
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genLogicalExpression(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    String _string = this.lineCount.toString();
    _builder.append(_string);
    _builder.append(": LD R");
    String _string_1 = this.regCount.toString();
    _builder.append(_string_1);
    _builder.append(", #");
    String _intd = exp.getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    String _string_2 = this.lineCount.toString();
    _builder.append(_string_2);
    _builder.append(": LD R");
    String _string_3 = this.regCount.toString();
    _builder.append(_string_3);
    _builder.append(", #");
    String _intd_1 = exp.getExp().getExpression().getUp().getPr().getOp().getLiteral().getBasic().getIntd();
    _builder.append(_intd_1);
    _builder.newLineIfNotEmpty();
    this.nextReg();
    _builder.newLineIfNotEmpty();
    this.nextLine();
    _builder.newLineIfNotEmpty();
    {
      boolean _equals = exp.getExp().getBop().toString().equals("<");
      if (_equals) {
        String _string_4 = this.lineCount.toString();
        _builder.append(_string_4);
        _builder.append(": SUB R");
        String _string_5 = new Integer((this.regCount).intValue()).toString();
        _builder.append(_string_5);
        _builder.append(", R");
        String _string_6 = new Integer(((this.regCount).intValue() - 2)).toString();
        _builder.append(_string_6);
        _builder.append(" , R");
        String _string_7 = new Integer(((this.regCount).intValue() - 1)).toString();
        _builder.append(_string_7);
        _builder.newLineIfNotEmpty();
        this.nextLine();
        _builder.newLineIfNotEmpty();
        String _string_8 = this.lineCount.toString();
        _builder.append(_string_8);
        _builder.append(": BGTZ R");
        String _string_9 = new Integer((this.regCount).intValue()).toString();
        _builder.append(_string_9);
        _builder.append(", #ENDFOR");
        _builder.newLineIfNotEmpty();
        this.nextLine();
        _builder.newLineIfNotEmpty();
      } else {
        boolean _equals_1 = exp.getExp().getBop().toString().equals(">");
        if (_equals_1) {
          String _string_10 = this.lineCount.toString();
          _builder.append(_string_10);
          _builder.append(": SUB R");
          String _string_11 = new Integer((this.regCount).intValue()).toString();
          _builder.append(_string_11);
          _builder.append(", R");
          String _string_12 = new Integer(((this.regCount).intValue() - 2)).toString();
          _builder.append(_string_12);
          _builder.append(" , R");
          String _string_13 = new Integer(((this.regCount).intValue() - 1)).toString();
          _builder.append(_string_13);
          _builder.newLineIfNotEmpty();
          this.nextLine();
          _builder.newLineIfNotEmpty();
          String _string_14 = this.lineCount.toString();
          _builder.append(_string_14);
          _builder.append(": BGTZ R");
          String _string_15 = new Integer((this.regCount).intValue()).toString();
          _builder.append(_string_15);
          _builder.append(", #ENDFOR");
          _builder.newLineIfNotEmpty();
          this.nextLine();
          _builder.newLineIfNotEmpty();
        } else {
          boolean _equals_2 = exp.getExp().getBop().toString().equals(">=");
          if (_equals_2) {
            String _string_16 = this.lineCount.toString();
            _builder.append(_string_16);
            _builder.append(": SUB R");
            String _string_17 = new Integer((this.regCount).intValue()).toString();
            _builder.append(_string_17);
            _builder.append(", R");
            String _string_18 = new Integer(((this.regCount).intValue() - 2)).toString();
            _builder.append(_string_18);
            _builder.append(" , R");
            String _string_19 = new Integer(((this.regCount).intValue() - 1)).toString();
            _builder.append(_string_19);
            _builder.newLineIfNotEmpty();
            this.nextLine();
            _builder.newLineIfNotEmpty();
            String _string_20 = this.lineCount.toString();
            _builder.append(_string_20);
            _builder.append(": BGEZ R");
            String _string_21 = new Integer((this.regCount).intValue()).toString();
            _builder.append(_string_21);
            _builder.append(", #ENDFOR");
            _builder.newLineIfNotEmpty();
            this.nextLine();
            _builder.newLineIfNotEmpty();
          } else {
            boolean _equals_3 = exp.getExp().getBop().toString().equals("<=");
            if (_equals_3) {
              String _string_22 = this.lineCount.toString();
              _builder.append(_string_22);
              _builder.append(": SUB R");
              String _string_23 = new Integer((this.regCount).intValue()).toString();
              _builder.append(_string_23);
              _builder.append(", R");
              String _string_24 = new Integer(((this.regCount).intValue() - 2)).toString();
              _builder.append(_string_24);
              _builder.append(" , R");
              String _string_25 = new Integer(((this.regCount).intValue() - 1)).toString();
              _builder.append(_string_25);
              _builder.newLineIfNotEmpty();
              this.nextLine();
              _builder.newLineIfNotEmpty();
              String _string_26 = this.lineCount.toString();
              _builder.append(_string_26);
              _builder.append(": BGEZ R");
              String _string_27 = new Integer((this.regCount).intValue()).toString();
              _builder.append(_string_27);
              _builder.append(", #ENDFOR");
              _builder.newLineIfNotEmpty();
              this.nextLine();
              _builder.append("\t");
              _builder.newLineIfNotEmpty();
            } else {
              boolean _equals_4 = exp.getExp().getBop().toString().equals("==");
              if (_equals_4) {
                String _string_28 = this.lineCount.toString();
                _builder.append(_string_28);
                _builder.append(": SUB R");
                String _string_29 = new Integer((this.regCount).intValue()).toString();
                _builder.append(_string_29);
                _builder.append(", R");
                String _string_30 = new Integer(((this.regCount).intValue() - 2)).toString();
                _builder.append(_string_30);
                _builder.append(" , R");
                String _string_31 = new Integer(((this.regCount).intValue() - 1)).toString();
                _builder.append(_string_31);
                _builder.newLineIfNotEmpty();
                this.nextLine();
                _builder.newLineIfNotEmpty();
                this.nextReg();
                _builder.newLineIfNotEmpty();
                String _string_32 = this.lineCount.toString();
                _builder.append(_string_32);
                _builder.append(": BGEZ R");
                String _string_33 = new Integer((this.regCount).intValue()).toString();
                _builder.append(_string_33);
                _builder.append(", #ENDFOR");
                _builder.newLineIfNotEmpty();
                this.nextLine();
                _builder.newLineIfNotEmpty();
              } else {
                boolean _equals_5 = exp.getExp().getBop().toString().equals("!=");
                if (_equals_5) {
                  String _string_34 = this.lineCount.toString();
                  _builder.append(_string_34);
                  _builder.append(": SUB R");
                  String _string_35 = new Integer((this.regCount).intValue()).toString();
                  _builder.append(_string_35);
                  _builder.append(", R");
                  String _string_36 = new Integer(((this.regCount).intValue() - 2)).toString();
                  _builder.append(_string_36);
                  _builder.append(" , R");
                  String _string_37 = new Integer(((this.regCount).intValue() - 1)).toString();
                  _builder.append(_string_37);
                  _builder.newLineIfNotEmpty();
                  this.nextLine();
                  _builder.newLineIfNotEmpty();
                  this.nextReg();
                  _builder.newLineIfNotEmpty();
                  String _string_38 = this.lineCount.toString();
                  _builder.append(_string_38);
                  _builder.append(": BGEZ R");
                  String _string_39 = new Integer((this.regCount).intValue()).toString();
                  _builder.append(_string_39);
                  _builder.append(", #ENDFOR");
                  _builder.newLineIfNotEmpty();
                  this.nextLine();
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public void nextReg() {
    this.regCount++;
  }
  
  public void nextLine() {
    this.lineCount = Integer.valueOf(((this.lineCount).intValue() + 8));
  }
}
